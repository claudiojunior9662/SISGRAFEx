/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.ordemProducao.consultas;

import entities.sisgrafex.Cliente;
import entities.sisgrafex.Faturamento;
import ui.cadastros.contatos.ContatoBEAN;
import ui.cadastros.enderecos.EnderecoBEAN;
import ui.cadastros.notas.NotaDAO;
import java.text.ParseException;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import ui.cadastros.produtos.ProdutoBEAN;
import entities.sisgrafex.OrdemProducao;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import entities.sisgrafex.ProdOrcamento;
import exception.EnvioExcecao;
import java.awt.Dimension;
import javax.swing.JTextArea;
import model.dao.OrcamentoDAO;
import model.dao.OrdemProducaoDAO;
import model.tabelas.OpExtTableModel;
import model.tabelas.OpIntTableModel;
import ui.cadastros.clientes.ClienteDAO;
import ui.cadastros.notas.FatFrame;
import ui.cadastros.produtos.ProdutoDAO;
import ui.cadastros.produtos.ProdutoPrEntBEAN;
import ui.cadastros.servicos.ServicoDAO;
import ui.controle.Controle;
import ui.login.TelaAutenticacao;

/**
 *
 * @author claud
 */
public class OpConsultaFrame extends javax.swing.JInternalFrame {
//VARIAVEIS DA CLASSE-------------------------------------------------------

    MaskFormatter mascaraPesquisa = null;
    private static boolean SEL_NOTA;
    public static int CODIGO_OP = 0;
    public static int CODIGO_ORCAMENTO_BASE = 0;

    public static void setSEL_NOTA(boolean SEL_NOTA) {
        OpConsultaFrame.SEL_NOTA = SEL_NOTA;
    }

    private static JLabel loading;
    private static OpConsultaFrame ordensProducaoConsultasNovo;

    public static OpConsultaFrame getInstancia(JLabel loading, byte CLASSE_PAI) {
        return new OpConsultaFrame(loading, CLASSE_PAI);
    }
    /**
     * @param CLASSE_PAI 2 - OD GRÁFICA, 3 - OD CLIENTE
     */
    private static byte CLASSE_PAI;
    private static final OpExtTableModel modelExt = new OpExtTableModel();
    private static final OpIntTableModel modelInt = new OpIntTableModel();

    public static void setCLASSE_PAI(byte CLASSE_PAI) {
        OpConsultaFrame.CLASSE_PAI = CLASSE_PAI;
    }

    /**
     * Creates new form OrdensProducaoConsultasNovo
     */
    public OpConsultaFrame(JLabel loading, byte CLASSE_PAI) {
        initComponents();
        this.loading = loading;
        this.CLASSE_PAI = CLASSE_PAI;
        System.setProperty("vermelho1", "#FF0000");
        System.setProperty("vermelho2", "#FFA500");
        System.setProperty("amarelo1", "#FFD700");
        System.setProperty("amarelo2", "#FFFF00");
        System.setProperty("amarelo3", "#F0E68C");
        System.setProperty("verde1", "#00FF00");
        System.setProperty("verde2", "#00FF7F");
        System.setProperty("verde3", "#90EE90");
        System.setProperty("verde4", "#98FB98");
        botaoGerarPdf.setEnabled(false);
        botaoCancelarOp.setEnabled(false);
        faturar.setEnabled(false);

        switch (CLASSE_PAI) {
            case 1:
            case 2:
                tabelaConsulta.setModel(modelInt);
                modelInt.setNumRows(0);
                break;
            case 3:
                tabelaConsulta.setModel(modelExt);
                modelExt.setNumRows(0);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        p1 = new javax.swing.JComboBox<>();
        botaoPesquisar = new javax.swing.JButton();
        mostraTodos = new javax.swing.JButton();
        p2 = new javax.swing.JComboBox<>();
        p3Data = new com.toedter.calendar.JDateChooser();
        botaoGerarPdf = new javax.swing.JButton();
        p3Formatado = new javax.swing.JFormattedTextField();
        p3Texto = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaConsulta = new javax.swing.JTable();
        faturar = new javax.swing.JButton();
        botaoCancelarOp = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        paginaAtual = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        paginaTotal = new javax.swing.JLabel();

        setTitle("CONSULTA DE ORDEM DE PRODUÇÃO");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/producao.png"))); // NOI18N

        p1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "CÓDIGO", "ORÇAMENTO BASE", "PRODUTO", "CLIENTE", "DATA EMISSÃO", "DATA DE ENTREGA", "STATUS" }));
        p1.setBorder(javax.swing.BorderFactory.createTitledBorder("PESQUISA POR"));
        p1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                p1ItemStateChanged(evt);
            }
        });
        p1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p1ActionPerformed(evt);
            }
        });

        botaoPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        botaoPesquisar.setText("PESQUISAR");
        botaoPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarActionPerformed(evt);
            }
        });

        mostraTodos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ultimos.png"))); // NOI18N
        mostraTodos.setText("MOSTRAR TODOS ");
        mostraTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostraTodosActionPerformed(evt);
            }
        });

        p2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE..." }));
        p2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                p2ItemStateChanged(evt);
            }
        });

        botaoGerarPdf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pdf.png"))); // NOI18N
        botaoGerarPdf.setText("GERAR PDF");
        botaoGerarPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarPdfActionPerformed(evt);
            }
        });

        try {
            p3Formatado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("?????????")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        tabelaConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "ORÇAMENTO", "PRODUTO", "CLIENTE", "TIPO CLIENTE", "DATA EMISSÃO", "DATA ENTREGA", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaConsultaMouseClicked(evt);
            }
        });
        tabelaConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabelaConsultaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaConsultaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaConsulta);
        if (tabelaConsulta.getColumnModel().getColumnCount() > 0) {
            tabelaConsulta.getColumnModel().getColumn(0).setPreferredWidth(10);
            tabelaConsulta.getColumnModel().getColumn(1).setPreferredWidth(10);
            tabelaConsulta.getColumnModel().getColumn(2).setPreferredWidth(150);
            tabelaConsulta.getColumnModel().getColumn(3).setPreferredWidth(150);
            tabelaConsulta.getColumnModel().getColumn(4).setPreferredWidth(15);
            tabelaConsulta.getColumnModel().getColumn(5).setPreferredWidth(15);
            tabelaConsulta.getColumnModel().getColumn(6).setPreferredWidth(15);
            tabelaConsulta.getColumnModel().getColumn(7).setPreferredWidth(150);
        }

        faturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/faturamento.png"))); // NOI18N
        faturar.setText("FATURAR");
        faturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faturarActionPerformed(evt);
            }
        });

        botaoCancelarOp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        botaoCancelarOp.setText("CANCELAR");
        botaoCancelarOp.setEnabled(false);
        botaoCancelarOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarOpActionPerformed(evt);
            }
        });

        jLabel1.setText("PÁGINA");

        paginaAtual.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paginaAtualItemStateChanged(evt);
            }
        });

        jLabel2.setText("DE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(529, 529, 529)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paginaAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paginaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(botaoGerarPdf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(faturar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoCancelarOp))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(p2, 0, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(p3Data, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(p3Formatado, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(p3Texto, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mostraTodos, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(botaoPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botaoPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mostraTodos))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(p1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                        .addComponent(p2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(p3Data, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(p3Formatado, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(p3Texto, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(paginaAtual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(paginaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(botaoCancelarOp)
                        .addComponent(faturar)
                        .addComponent(botaoGerarPdf)))
                .addGap(15, 15, 15))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, paginaAtual, paginaTotal});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void p1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_p1ItemStateChanged
        p2.removeAllItems();
        if (p1.getSelectedItem().equals("CLIENTE")) {
            p2.addItem("PESSOA FÍSICA - CÓDIGO");
            p2.addItem("PESSOA FÍSICA - NOME");
            p2.addItem("PESSOA FÍSICA - CPF (SOMENTE NÚMEROS)");
            p2.addItem("PESSOA JURÍDICA - CÓDIGO");
            p2.addItem("PESSOA JURÍDICA - NOME");
            p2.addItem("PESSOA JURÍDICA - NOME FANTASIA");
            p2.addItem("PESSOA JURÍDICA - CNPJ (SOMENTE NÚMEROS)");
            p2.setEnabled(true);
            p3Data.setEnabled(false);
        } else if (p1.getSelectedItem().equals("STATUS")) {
            p2.addItem("EM AVALIAÇÃO PELA SEÇ TÉCNICA");
            p2.addItem("ENCAMINHADO PARA PRÉ IMP");
            p2.addItem("DIAGRAMAÇÃO");
            p2.addItem("PRODUZINDO PROVA");
            p2.addItem("AGUARDANDO APR CLIENTE");
            p2.addItem("ENCAMINHADO PARA OFFSET");
            p2.addItem("ENCAMINHADO PARA TIPOGRAFIA");
            p2.addItem("ENCAMINHADO PARA ACABAMENTO");
            p2.addItem("EM FINALIZAÇÃO");
            p2.addItem("ENCAMINHADO PARA EXPEDIÇÃO");
            p2.addItem("CANCELADA");
            p2.addItem("ENTREGUE");
            p2.setEnabled(true);
            p3Data.setEnabled(false);
        } else if (p1.getSelectedItem().equals("DATA EMISSÃO") || p1.getSelectedItem().equals("DATA DE ENTREGA")) {
            p2.setEnabled(false);
            p3Data.setEnabled(true);
            p3Formatado.setEnabled(false);
            p3Texto.setEnabled(false);
        } else {
            p2.setEnabled(false);
            p3Data.setEnabled(false);
            p3Texto.setEnabled(true);
            p3Formatado.setEnabled(false);
        }
    }//GEN-LAST:event_p1ItemStateChanged

    private void p1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_p1ActionPerformed

    private void botaoPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarActionPerformed
        new Thread() {
            @Override
            public void run() {
                pesquisar();
            }
        }.start();

    }//GEN-LAST:event_botaoPesquisarActionPerformed

    private void mostraTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostraTodosActionPerformed
        new Thread() {
            @Override
            public void run() {
                mostraTodos();
            }
        }.start();
    }//GEN-LAST:event_mostraTodosActionPerformed

    private void p2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_p2ItemStateChanged
        try {
            if (p2.getItemCount() != 0) {
                if (p2.getSelectedItem().toString().equals("PESSOA FÍSICA - CPF (SOMENTE NÚMEROS)")) {
                    mascaraPesquisa = new MaskFormatter("###.###.###-##");
                    p3Formatado.setFormatterFactory(new DefaultFormatterFactory(mascaraPesquisa));
                    p3Formatado.setValue("");
                    p3Formatado.setEnabled(true);
                    p3Texto.setEnabled(false);

                } else if (p2.getSelectedItem().toString().equals("PESSOA JURÍDICA - CNPJ (SOMENTE NÚMEROS)")) {
                    mascaraPesquisa = new MaskFormatter("##.###.###/####-##");
                    p3Formatado.setFormatterFactory(new DefaultFormatterFactory(mascaraPesquisa));
                    p3Formatado.setValue("");
                    p3Formatado.setEnabled(true);
                    p3Texto.setEnabled(false);
                } else {
                    p3Formatado.setEnabled(false);
                    p3Texto.setEnabled(true);
                }
            }
        } catch (ParseException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }//GEN-LAST:event_p2ItemStateChanged

    private void botaoGerarPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarPdfActionPerformed
        new Thread() {
            @Override
            public void run() {
                loading.setVisible(true);
                loading.setText("GERANDO PDF, AGUARDE...");
                OrdemProducao.gerarPdfOp(Integer.parseInt(tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 0).toString()),
                        Integer.parseInt(tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 1).toString()),
                        (byte) 1,
                        null);
                loading.setVisible(false);
            }
        }.start();
    }//GEN-LAST:event_botaoGerarPdfActionPerformed

    private void tabelaConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaConsultaMouseClicked
        switch (tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 6).toString()) {
            case "ENTREGUE":
            case "CANCELADA":
                faturar.setEnabled(false);
                botaoCancelarOp.setEnabled(false);
                break;
            default:
                faturar.setEnabled(SEL_NOTA);
                if (TelaAutenticacao.getUsrLogado().getAcessoOrcAdm() == 1) {
                    botaoCancelarOp.setEnabled(true);
                }
                break;
        }
        botaoGerarPdf.setEnabled(true);
    }//GEN-LAST:event_tabelaConsultaMouseClicked

    private void faturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faturarActionPerformed
        selFat();
        this.dispose();
    }//GEN-LAST:event_faturarActionPerformed

    private void botaoCancelarOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarOpActionPerformed
        //INSTANCIA AS FUNÇÕES E VARIÁVEIS A SEREM UTILIZADAS-------------------
        //ALTERA O STATUS DA OP-------------------------------------------------        
        try {

            JLabel lbl2 = new JLabel("DIGITE O MOTIVO DO CANCELAMENTO");
            JTextArea motivo = new JTextArea();
            motivo.setPreferredSize(new Dimension(400, 200));
            motivo.setLineWrap(true);
            int retorno2 = JOptionPane.showConfirmDialog(null,
                    new Object[]{lbl2, motivo},
                    "MOTIVO DO CANCELAMENTO",
                    JOptionPane.OK_CANCEL_OPTION);
            if (retorno2 != JOptionPane.CANCEL_OPTION) {
                String txtMotivo = "Motivo do cancelamento: " + motivo.getText()
                        + ". Usuário que fez o cancelamento: " + TelaAutenticacao.getUsrLogado().getCodigo() + ".\n";
                if (txtMotivo.isEmpty()) {
                    JOptionPane.showMessageDialog(null,
                            "INSIRA UM MOTIVO PARA O CANCELAMENTO DA OP",
                            "ERRO",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                CODIGO_OP = Integer.valueOf(tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 0).toString());
                CODIGO_ORCAMENTO_BASE = Integer.valueOf(tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 1).toString());
                txtMotivo += "\n\n" + OrdemProducaoDAO.retornaObsOp(CODIGO_OP);
                OrdemProducaoDAO.cancelaOp(CODIGO_OP, txtMotivo);
                OrdemProducaoDAO.alteraDtCancelamento(CODIGO_OP, new java.util.Date());
                tabelaConsulta.setValueAt("CANCELADA", tabelaConsulta.getSelectedRow(), 7);
                OrdemProducao.corTabela(tabelaConsulta, (byte) 2);
                byte tipoProduto = OrdemProducaoDAO.retornaTipoProduto(CODIGO_OP);

                /**
                 * Verifica se é o caso restaurar o crédito do cliente
                 */
                if (OrcamentoDAO.retornaStatusFaturamento(CODIGO_ORCAMENTO_BASE) == 1) {
                    double vlrParc = OrcamentoDAO.retornaVlrParcProd(
                            CODIGO_ORCAMENTO_BASE,
                            tipoProduto,
                            OrdemProducaoDAO.retornaCodProd(CODIGO_OP));

                    if (OrdemProducaoDAO.verificaOpOrcNEntregues(CODIGO_ORCAMENTO_BASE, CODIGO_OP)) {
                        switch (tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 4).toString()) {
                            case "PESSOA FÍSICA":
                                ClienteDAO.corrigeCredito(OrdemProducaoDAO.retornaCodCliente(CODIGO_OP),
                                        (byte) 1,
                                        vlrParc,
                                        (byte) 1);
                                break;
                            case "PESSOA JURÍDICA":
                                ClienteDAO.corrigeCredito(OrdemProducaoDAO.retornaCodCliente(CODIGO_OP),
                                        (byte) 2,
                                        vlrParc,
                                        (byte) 1);
                                break;
                        }

                    } else {
                        vlrParc += OrcamentoDAO.retornaValorFrete(CODIGO_ORCAMENTO_BASE)
                                + ServicoDAO.retornaVlrSvOrcExistente(CODIGO_ORCAMENTO_BASE);

                        switch (tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 4).toString()) {
                            case "PESSOA FÍSICA":
                                ClienteDAO.corrigeCredito(OrdemProducaoDAO.retornaCodCliente(CODIGO_OP),
                                        (byte) 1,
                                        vlrParc,
                                        (byte) 1);
                                break;
                            case "PESSOA JURÍDICA":
                                ClienteDAO.corrigeCredito(OrdemProducaoDAO.retornaCodCliente(CODIGO_OP),
                                        (byte) 2,
                                        vlrParc,
                                        (byte) 1);
                                break;
                        }
                        OrcamentoDAO.mudarStatus(CODIGO_ORCAMENTO_BASE, (byte) 1);
                        OrcamentoDAO.atualizaStatusFaturamento(CODIGO_ORCAMENTO_BASE, (byte) 0);
                    }
                }

                JOptionPane.showMessageDialog(null, "A OP " + CODIGO_OP + " FOI CANCELADA COM SUCESSO.");
            }

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }//GEN-LAST:event_botaoCancelarOpActionPerformed

    private void paginaAtualItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paginaAtualItemStateChanged
        new Thread() {
            @Override
            public void run() {
                mudarPag();
            }
        }.start();
    }//GEN-LAST:event_paginaAtualItemStateChanged

    private void tabelaConsultaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaConsultaKeyPressed
        if (SEL_NOTA == true) {
            faturar.setEnabled(true);
            switch (tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 7).toString()) {
                case "ENTREGUE":
                case "CANCELADA":
                    botaoCancelarOp.setEnabled(false);
                    break;
                default:
                    botaoCancelarOp.setEnabled(true);
                    break;
            }
        } else {
            faturar.setEnabled(false);
        }
        botaoGerarPdf.setEnabled(true);
    }//GEN-LAST:event_tabelaConsultaKeyPressed

    private void tabelaConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaConsultaKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tabelaConsultaKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoCancelarOp;
    private javax.swing.JButton botaoGerarPdf;
    private static javax.swing.JButton botaoPesquisar;
    private javax.swing.JButton faturar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JButton mostraTodos;
    private static javax.swing.JComboBox<String> p1;
    private static javax.swing.JComboBox<String> p2;
    private static com.toedter.calendar.JDateChooser p3Data;
    private static javax.swing.JFormattedTextField p3Formatado;
    private static javax.swing.JTextField p3Texto;
    private static javax.swing.JComboBox<String> paginaAtual;
    private static javax.swing.JLabel paginaTotal;
    public static javax.swing.JTable tabelaConsulta;
    // End of variables declaration//GEN-END:variables

    public synchronized String retornaTelefoneFormatado(String telefone) {
        try {
            String formatar = telefone;
            formatar = formatar.replace("(", "");
            formatar = formatar.replace(")", "");
            formatar = formatar.replace(" ", "");
            formatar = formatar.replace("-", "");
            MaskFormatter formatoTelefone = null;
            if (formatar.length() == 10) {
                formatoTelefone = new MaskFormatter("(##) ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
            }
            if (formatar.length() == 11) {
                formatoTelefone = new MaskFormatter("(##) # ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);

            }
            return formatar;
        } catch (ParseException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
            return null;
        }
    }

    private synchronized void selFat() {
        try {
            /**
             * Mostra a imagem de carregamento
             */
            loading.setVisible(true);
            loading.setText("CARREGANDO...");

            /**
             * Define o código da OP
             */
            CODIGO_OP = Integer.valueOf(tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 0)
                    .toString());

            /**
             * Carrega informações sobre a OP
             */
            OrdemProducao op = OrdemProducaoDAO.selecionaInformacoesNota(CODIGO_OP);

            /**
             * Carrega informações sobre o cliente
             */
            Cliente cliente = ClienteDAO.selInfoNota((byte) op.getTipoPessoa(),
                    op.getCodCliente());

            /**
             * Carrega informações sobre o contato
             */
            ContatoBEAN contato = ClienteDAO.selInfoContato(op.getCodContato());

            /**
             * Carrega informações sobre o endereço
             */
            EnderecoBEAN endereco = ClienteDAO.selInfoEndereco(op.getCodEndereco());

            /**
             * Define o código do orçamento base
             */
            CODIGO_ORCAMENTO_BASE = op.getOrcBase();

            /**
             * Carrega informações sobre o produto
             */
            ProdOrcamento prodOrc = OrcamentoDAO.selecionaInformacoesProduto(
                    CODIGO_ORCAMENTO_BASE,
                    op.getCodProduto(),
                    op.getTipoProduto());

            /**
             * Define as informações sobre o faturamento
             */
            FatFrame.codOrc.setText(String.valueOf(CODIGO_ORCAMENTO_BASE));
            FatFrame.codOp.setText(String.valueOf(CODIGO_OP));
            FatFrame.qtdEntregue.setValue(NotaDAO.verificaQuantidadeEntregue(op.getCodigo()));
            FatFrame.valorServicos.setValue(ServicoDAO.retornaVlrSvOrcExistente(op.getOrcBase()));
            FatFrame.valorFrete.setValue(OrcamentoDAO.retornaValorFrete(op.getOrcBase()));
            FatFrame.STATUS_FATURAMENTO = OrcamentoDAO.retornaStatusFaturamento(op.getOrcBase());
            FatFrame.setFAT(new Faturamento());

            /**
             * Define as informações sobre o cliente
             */
            FatFrame.nomeContatoCliente.setText(contato.getNomeContato());
            FatFrame.telefoneCliente.setText(retornaTelefoneFormatado(contato.getTelefone()));
            FatFrame.telefoneCliente2.setText(retornaTelefoneFormatado(contato.getTelefone2()));
            FatFrame.emailCliente.setText(contato.getEmail());
            FatFrame.setCOD_CONTATO(op.getCodContato());
            FatFrame.nomeCliente.setText(cliente.getNome());
            FatFrame.cnpjCpf.setText(op.getTipoPessoa() == 1 ? "PESSOA FÍSICA" : "PESSOA JURÍDICA");
            FatFrame.tipoCliente.setText(op.getTipoPessoa() == 1 ? "PESSOA FÍSICA" : "PESSOA JURÍDICA");
            FatFrame.codigoCliente.setValue(op.getCodCliente());

            /**
             * Define as informações sobre o endereço
             */
            FatFrame.logadouroCliente.setText(endereco.getLogadouro());
            FatFrame.tipoEndereco.setText(endereco.getTipoEndereco());
            FatFrame.bairroCliente.setText(endereco.getBairro());
            FatFrame.cidadeCliente.setText(endereco.getCidade());
            FatFrame.ufCliente.setText(endereco.getUf());
            FatFrame.complementoCliente.setText(endereco.getComplemento());
            FatFrame.cepCliente.setText(EnderecoBEAN.retornaCepFormatado(endereco.getCep()));
            FatFrame.setCOD_ENDERECO(op.getCodEndereco());

            /**
             * Define as informações sobre o produto e quantidades
             */
            FatFrame.setCOD_PRODUTO(prodOrc.getCodProduto());
            FatFrame.descricao.setText(prodOrc.getDescricaoProduto());
            FatFrame.qtdSolicitada.setValue(prodOrc.getQuantidade());
            FatFrame.qtdSerEntregue.setModel(new SpinnerNumberModel(0,
                    0,
                    prodOrc.getQuantidade() - (int) FatFrame.qtdEntregue.getValue(),
                    1));

            if (prodOrc.getTipoProduto() == 2) {
                /**
                 * Pesquisa as informações do produto
                 */
                ProdutoPrEntBEAN produto = ProdutoDAO.selDimProdPrEnt(op.getCodProduto());
                FatFrame.alturaProduto.setValue(produto.getAltura());
                FatFrame.larguraProduto.setValue(produto.getLargura());
                FatFrame.espessuraProduto.setValue(produto.getEspessura());
                FatFrame.pesoProduto.setValue(produto.getPeso());
                /**
                 * Desativa os campos não editáveis
                 */
                FatFrame.espessuraProduto.setEditable(false);
                FatFrame.pesoProduto.setEditable(false);
            } else {
                /**
                 * Pesquisa as informações do produto
                 */
                ProdutoBEAN produto = ProdutoDAO.selecionaDimensoesProduto(op.getCodProduto());
                FatFrame.alturaProduto.setValue(produto.getAltura());
                FatFrame.larguraProduto.setValue(produto.getLargura());
                /**
                 * Ativa os campos editáveis
                 */
                FatFrame.espessuraProduto.setEditable(true);
                FatFrame.pesoProduto.setEditable(true);
            }

            /**
             * Define informações sobre valores
             */
            FatFrame.valorUnitario.setValue((double) prodOrc.getPrecoUnitario());
            FatFrame.verificaFaturamento();

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
        SEL_NOTA = false;

        loading.setVisible(false);
    }

    private synchronized void mudarPag() {
        try {

            loading.setVisible(true);
            loading.setText("CARREGANDO...");

            switch (CLASSE_PAI) {
                case 1:
                case 2:
                    modelInt.setNumRows(0);
                    break;
                case 3:
                    modelExt.setNumRows(0);
                    break;
            }

            //INSTANCIA AS FUNÇÕES E VARIÁVEIS NECESSÁRIAS--------------------------
            String tipoPessoa = null;
            int totalRegistros = 0;
            double totalPaginas = 0d;
            //FAZ A CONSULTA--------------------------------------------------------
            for (OrdemProducao op : OrdemProducaoDAO.consultaOpTodos(Integer.valueOf(paginaAtual.getSelectedItem().toString()))) {
                modelInt.addRow(op);
            }
            OrdemProducao.corTabela(tabelaConsulta, (byte) 2);

            loading.setVisible(false);

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }

    private synchronized void mostraTodos() {
        try {

            loading.setVisible(true);
            loading.setText("CARREGANDO...");

            switch (CLASSE_PAI) {
                case 1:
                case 2:
                    modelInt.setNumRows(0);
                    break;
                case 3:
                    modelExt.setNumRows(0);
                    break;
            }

            //INSTANCIA AS FUNÇÕES E VARIÁVEIS NECESSÁRIAS--------------------------
            String tipoPessoa = null;
            int totalRegistros = 0;
            double totalPaginas = 0d;
            //FAZ A CONSULTA--------------------------------------------------------
            for (OrdemProducao op : OrdemProducaoDAO.consultaOpTodos(1)) {
                modelInt.addRow(op);
            }
            //CALCULA O NUMERO DE PÁGINAS-------------------------------------------
            totalRegistros = OrdemProducaoDAO.retornaUltimoRegistro();
            totalPaginas = Math.ceil(totalRegistros / 45);
            //PREENCHE O SELETOR DE PÁGINAS-----------------------------------------
            for (int i = 1; i < totalPaginas; i++) {
                paginaAtual.addItem(String.valueOf(i));
            }
            paginaTotal.setText(String.valueOf(totalPaginas - 1));
            OrdemProducao.corTabela(tabelaConsulta, (byte) 2);

            loading.setVisible(false);

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }

    public static synchronized void pesquisar() {
        try {

            loading.setVisible(true);
            loading.setText("CARREGANDO...");

            switch (CLASSE_PAI) {
                case 1:
                case 2:
                    modelInt.setNumRows(0);
                    break;
                case 3:
                    modelExt.setNumRows(0);
                    break;
            }

            int totalRegistros = 0;
            double totalPaginas = 0d;

            /*
             @param p1
             0 - SELECIONE...
             1 - CÓDIGO
             2 - ORÇAMENTO BASE
             3 - PRODUTO
             4 - CLIENTE
             5 - DATA EMISSAO
             6 - DATA ENTREGA
             7 - STATUS
             */
            switch (p1.getSelectedIndex()) {
                case 0:
                    JOptionPane.showMessageDialog(null, "SELECIONE UM TIPO DE PESQUISA!",
                            "ERRO",
                            JOptionPane.ERROR_MESSAGE);
                    loading.setVisible(false);
                    break;
                case 1:
                    for (OrdemProducao op : OrdemProducaoDAO.consultaOp((byte) 1,
                            null,
                            p3Texto.getText(),
                            null)) {
                        switch (CLASSE_PAI) {
                            case 1:
                            case 2:
                                modelInt.addRow(op);
                                break;
                            case 3:
                                modelExt.addRow(op);
                                break;
                        }
                        totalRegistros += 1;
                    }
                    break;
                case 2:
                    for (OrdemProducao op : OrdemProducaoDAO.consultaOp((byte) 2,
                            null,
                            p3Texto.getText(),
                            null)) {
                        switch (CLASSE_PAI) {
                            case 1:
                            case 2:
                                modelInt.addRow(op);
                                break;
                            case 3:
                                modelExt.addRow(op);
                                break;
                        }
                        totalRegistros += 1;
                    }
                    break;
                case 3:
                    for (OrdemProducao op : OrdemProducaoDAO.consultaOp((byte) 3,
                            null,
                            p3Texto.getText(),
                            null)) {
                        switch (CLASSE_PAI) {
                            case 1:
                            case 2:
                                modelInt.addRow(op);
                                break;
                            case 3:
                                modelExt.addRow(op);
                                break;
                        }
                        totalRegistros += 1;
                    }
                    break;
                case 4:
                    for (OrdemProducao op : OrdemProducaoDAO.consultaOp((byte) 4,
                            p2.getSelectedItem().toString(),
                            p2.getSelectedItem().toString().contains("NÚMEROS")
                                    ? p3Formatado.getText().toUpperCase()
                                    : p3Texto.getText().toUpperCase(),
                            null)) {
                        switch (CLASSE_PAI) {
                            case 1:
                            case 2:
                                modelInt.addRow(op);
                                break;
                            case 3:
                                modelExt.addRow(op);
                                break;
                        }
                        totalRegistros += 1;
                    }
                    break;
                case 5:
                    for (OrdemProducao op : OrdemProducaoDAO.consultaOp((byte) 5,
                            null,
                            null,
                            p3Data.getDate())) {
                        switch (CLASSE_PAI) {
                            case 1:
                            case 2:
                                modelInt.addRow(op);
                                break;
                            case 3:
                                modelExt.addRow(op);
                                break;
                        }
                        totalRegistros += 1;
                    }
                    break;
                case 6:
                    for (OrdemProducao op : OrdemProducaoDAO.consultaOp((byte) 6,
                            null,
                            null,
                            p3Data.getDate())) {
                        switch (CLASSE_PAI) {
                            case 1:
                            case 2:
                                modelInt.addRow(op);
                                break;
                            case 3:
                                modelExt.addRow(op);
                                break;
                        }
                        totalRegistros += 1;
                    }
                    break;
                case 7:
                    for (OrdemProducao op : OrdemProducaoDAO.consultaOp((byte) 7,
                            p2.getSelectedItem().toString(),
                            null,
                            null)) {
                        switch (CLASSE_PAI) {
                            case 1:
                            case 2:
                                modelInt.addRow(op);
                                break;
                            case 3:
                                modelExt.addRow(op);
                                break;
                        }
                        totalRegistros += 1;
                    }
                    break;
            }

            switch (CLASSE_PAI) {
                case 1:
                case 2:
                    OrdemProducao.corTabela(tabelaConsulta, (byte) 2);
                    break;
                case 3:
                    OrdemProducao.corTabela(tabelaConsulta, (byte) 3);
                    break;
            }
            paginaAtual.removeAllItems();
            paginaTotal.setText("");
            loading.setVisible(false);

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }

    public synchronized static void estadoOdExt() {
        //Pré-definir os valores dos campos
        p1.setSelectedIndex(4);
        p2.setSelectedIndex(3);
        p3Texto.setText(TelaAutenticacao.getUsrLogado().getLogin());
        //Desativar os campos
        p1.setEnabled(false);
        p2.setEnabled(false);
        p3Texto.setEnabled(false);
        mostraTodos.setEnabled(false);
    }

}
