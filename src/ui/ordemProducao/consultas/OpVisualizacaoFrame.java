/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.ordemProducao.consultas;

import entities.sisgrafex.OrdemProducao;
import exception.EnvioExcecao;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.bean.TelaAcompanhamentoBEAN;
import ui.cadastros.produtos.ProdutoDAO;
import ui.controle.Controle;
import ui.principal.GerenteJanelas;
import ui.sproducao.contrrole.TelaAcompanhamentoDAO;

/**
 *
 * @author 1113778771
 */
public class OpVisualizacaoFrame extends javax.swing.JInternalFrame {

    private static JLabel loading;
    private final GerenteJanelas gj;
    public static boolean realTime = true;

    private static OpVisualizacaoFrame opVisualizacaoFrame;

    public static OpVisualizacaoFrame getInstancia(JLabel loading, GerenteJanelas gj) {
        return new OpVisualizacaoFrame(loading, gj);
    }

    public OpVisualizacaoFrame(JLabel loading, GerenteJanelas gj) {
        this.gj = gj;
        OpVisualizacaoFrame.loading = loading;
        initComponents();
        System.setProperty("vermelho1", "#FF0000");
        System.setProperty("vermelho2", "#FFA500");
        System.setProperty("amarelo1", "#FFD700");
        System.setProperty("amarelo2", "#FFFF00");
        System.setProperty("amarelo3", "#F0E68C");
        System.setProperty("verde1", "#00FF00");
        System.setProperty("verde2", "#00FF7F");
        System.setProperty("verde3", "#90EE90");
        System.setProperty("verde4", "#98FB98");
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        mesEmissao = new javax.swing.JRadioButton();
        anoEmissaoSelecionar = new com.toedter.calendar.JYearChooser();
        status = new javax.swing.JRadioButton();
        mesEntregaSelecionar = new com.toedter.calendar.JMonthChooser();
        codOpTexto = new javax.swing.JFormattedTextField();
        mesEntrega = new javax.swing.JRadioButton();
        dataEntregaTexto = new com.toedter.calendar.JDateChooser();
        anoEntregaSelecionar = new com.toedter.calendar.JYearChooser();
        statusTexto = new javax.swing.JComboBox<String>();
        aplicarTexto = new javax.swing.JButton();
        codOpFiltro = new javax.swing.JRadioButton();
        dataEntrega = new javax.swing.JRadioButton();
        mesEmissaoSelecionar = new com.toedter.calendar.JMonthChooser();
        tempoReal = new javax.swing.JButton();
        codOrcamento = new javax.swing.JRadioButton();
        codOrcTexto = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaConsulta = new javax.swing.JTable();

        mesEmissao.setText("MÊS DE EMISSÃO");
        mesEmissao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mesEmissaoItemStateChanged(evt);
            }
        });
        mesEmissao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mesEmissaoMouseClicked(evt);
            }
        });

        status.setText("STATUS");
        status.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statusItemStateChanged(evt);
            }
        });
        status.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                statusMouseClicked(evt);
            }
        });

        codOpTexto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        mesEntrega.setText("MÊS DE ENTREGA");
        mesEntrega.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mesEntregaItemStateChanged(evt);
            }
        });
        mesEntrega.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mesEntregaMouseClicked(evt);
            }
        });
        mesEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesEntregaActionPerformed(evt);
            }
        });

        dataEntregaTexto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataEntregaTextoMouseClicked(evt);
            }
        });

        statusTexto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EM AVALIAÇÃO PELA SEÇ TÉCNICA", "ENCAMINHADO PARA PRÉ IMP", "DIAGRAMAÇÃO", "PRODUZINDO PROVA", "AGUARDANDO APR CLIENTE", "ENCAMINHADO PARA OFFSET", "ENCAMINHADO PARA TIPOGRAFIA", "ENCAMINHADO PARA ACABAMENTO", "EM FINALIZAÇÃO", "ENCAMINHADO PARA EXPEDIÇÃO" }));

        aplicarTexto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        aplicarTexto.setText("APLICAR");
        aplicarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarTextoActionPerformed(evt);
            }
        });

        codOpFiltro.setText("CÓDIGO OP");
        codOpFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                codOpFiltroItemStateChanged(evt);
            }
        });
        codOpFiltro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                codOpFiltroMouseClicked(evt);
            }
        });

        dataEntrega.setText("DATA DE ENTREGA");
        dataEntrega.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dataEntregaItemStateChanged(evt);
            }
        });
        dataEntrega.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dataEntregaMouseClicked(evt);
            }
        });

        tempoReal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/atualizar.png"))); // NOI18N
        tempoReal.setText("TEMPO REAL (MÁXIMO 45 OP)");
        tempoReal.setToolTipText("ATUALIZA A TABELA A CADA 1 MINUTO");
        tempoReal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempoRealActionPerformed(evt);
            }
        });

        codOrcamento.setText("CÓDIGO ORÇAMENTO");
        codOrcamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                codOrcamentoItemStateChanged(evt);
            }
        });
        codOrcamento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                codOrcamentoMouseClicked(evt);
            }
        });

        codOrcTexto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(codOpFiltro)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(codOpTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 854, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status)
                    .addComponent(dataEntrega)
                    .addComponent(mesEntrega)
                    .addComponent(mesEmissao))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusTexto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mesEmissaoSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mesEntregaSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(anoEntregaSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(anoEmissaoSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(dataEntregaTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 854, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tempoReal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aplicarTexto))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(codOrcamento)
                .addGap(18, 18, 18)
                .addComponent(codOrcTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {codOpTexto, codOrcTexto, dataEntregaTexto});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codOpFiltro)
                    .addComponent(codOpTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codOrcamento)
                    .addComponent(codOrcTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dataEntrega)
                    .addComponent(dataEntregaTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mesEmissao)
                    .addComponent(mesEmissaoSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anoEmissaoSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mesEntrega)
                    .addComponent(mesEntregaSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anoEntregaSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status)
                    .addComponent(statusTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aplicarTexto)
                    .addComponent(tempoReal))
                .addContainerGap(314, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("FILTROS", jPanel1);

        tabelaConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nº", "DATA ENTREGA", "STATUS", "PRODUTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaConsultaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaConsulta);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1019, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("TABELA", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabelaConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaConsultaMouseClicked

    }//GEN-LAST:event_tabelaConsultaMouseClicked

    private void mesEmissaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mesEmissaoItemStateChanged
        codOpTexto.setEnabled(false);
        dataEntregaTexto.setEnabled(false);
        mesEmissaoSelecionar.setEnabled(true);
        anoEmissaoSelecionar.setEnabled(true);
        mesEntregaSelecionar.setEnabled(false);
        anoEntregaSelecionar.setEnabled(false);
        statusTexto.setEnabled(false);
    }//GEN-LAST:event_mesEmissaoItemStateChanged

    private void mesEmissaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mesEmissaoMouseClicked

    }//GEN-LAST:event_mesEmissaoMouseClicked

    private void statusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statusItemStateChanged
        codOpTexto.setEnabled(false);
        dataEntregaTexto.setEnabled(false);
        mesEmissaoSelecionar.setEnabled(false);
        anoEmissaoSelecionar.setEnabled(false);
        mesEntregaSelecionar.setEnabled(false);
        anoEntregaSelecionar.setEnabled(false);
        statusTexto.setEnabled(true);
    }//GEN-LAST:event_statusItemStateChanged

    private void statusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusMouseClicked
        codOpTexto.setEnabled(false);
        dataEntregaTexto.setEnabled(false);
        statusTexto.setEnabled(true);
    }//GEN-LAST:event_statusMouseClicked

    private void mesEntregaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mesEntregaItemStateChanged
        statusTexto.setEnabled(false);
        codOpTexto.setEnabled(false);
        dataEntregaTexto.setEnabled(false);
        mesEmissaoSelecionar.setEnabled(false);
        anoEmissaoSelecionar.setEnabled(false);
        mesEntregaSelecionar.setEnabled(true);
        anoEntregaSelecionar.setEnabled(true);
    }//GEN-LAST:event_mesEntregaItemStateChanged

    private void mesEntregaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mesEntregaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_mesEntregaMouseClicked

    private void mesEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mesEntregaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mesEntregaActionPerformed

    private void dataEntregaTextoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataEntregaTextoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_dataEntregaTextoMouseClicked

    private void aplicarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarTextoActionPerformed
        realTime = false;
        new Thread("Aplicar filtro op") {
            @Override
            public void run() {

                loading.setText("CARREGANDO...");
                loading.setVisible(true);

                try {
                    DefaultTableModel modeloTabela = (DefaultTableModel) tabelaConsulta.getModel();
                    modeloTabela.setNumRows(0);
                    //POR CÓDIGO DE OP -- 1
                    if (codOpFiltro.isSelected() == true) {
                        if (codOpTexto.getValue() == null) {
                            JOptionPane.showMessageDialog(null, "DIGITE O CÓDIGO DA ORDEM DE PRODUÇÃO.");
                            return;
                        } else {
                            for (OrdemProducao op : TelaAcompanhamentoDAO.retornaFiltro((int) codOpTexto.getValue(), (byte) 1)) {
                                modeloTabela.addRow(new Object[]{
                                    op.getCodigo(),
                                    Controle.dataPadrao.format(op.getDataEntrega()),
                                    op.getStatus(),
                                    ProdutoDAO.retornaDescricaoProduto(op.getCodProduto(), op.getTipoProduto())
                                });
                            }
                        }
                    //POR CÓDIGO DO ORÇAMENTO -- 2
                    } else if (codOrcamento.isSelected() == true) {
                        if (codOrcTexto.getValue() == null) {
                            JOptionPane.showMessageDialog(null, "DIGITE O CÓDIGO DO ORÇAMENTO.");
                            return;
                        } else {
                            for (OrdemProducao op : TelaAcompanhamentoDAO.retornaFiltro((int) codOrcTexto.getValue(), (byte) 1)) {
                                modeloTabela.addRow(new Object[]{
                                    op.getCodigo(),
                                    Controle.dataPadrao.format(op.getDataEntrega()),
                                    op.getStatus(),
                                    ProdutoDAO.retornaDescricaoProduto(op.getCodProduto(), op.getTipoProduto())
                                });
                            }
                        }
                    //POR DATA DE ENTREGA -- 3
                    } else if (dataEntrega.isSelected() == true) {
                        if (dataEntregaTexto.getDate() == null) {
                            JOptionPane.showMessageDialog(null, "SELECIONE A DATA DE ENTREGA.");
                            return;
                        } else {
                            for (OrdemProducao op : TelaAcompanhamentoDAO.retornaFiltro(dataEntregaTexto.getDate(), (byte) 3)) {
                                modeloTabela.addRow(new Object[]{
                                    op.getCodigo(),
                                    Controle.dataPadrao.format(op.getDataEntrega()),
                                    op.getStatus(),
                                    ProdutoDAO.retornaDescricaoProduto(op.getCodProduto(), op.getTipoProduto())
                                });
                            }
                        }
                    //POR MÊS DE EMISSÃO -- 4
                    } else if (mesEmissao.isSelected()) {
                        java.util.Date dataFiltro = null;
                        dataFiltro.setMonth(mesEmissaoSelecionar.getMonth());
                        dataFiltro.setYear(anoEmissaoSelecionar.getYear());
                        for (OrdemProducao op : TelaAcompanhamentoDAO.retornaFiltro(dataFiltro, (byte) 4)) {
                            modeloTabela.addRow(new Object[]{
                                op.getCodigo(),
                                Controle.dataPadrao.format(op.getDataEntrega()),
                                op.getStatus(),
                                ProdutoDAO.retornaDescricaoProduto(op.getCodProduto(), op.getTipoProduto())
                            });

                        }
                    //POR MÊS DE ENTREGA -- 5
                    } else if (mesEntrega.isSelected()) {
                        java.util.Date dataFiltro = null;
                        dataFiltro.setMonth(mesEntregaSelecionar.getMonth());
                        dataFiltro.setYear(anoEntregaSelecionar.getYear());
                        for (OrdemProducao op : TelaAcompanhamentoDAO.retornaFiltro(dataFiltro, (byte) 5)) {

                            modeloTabela.addRow(new Object[]{
                                op.getCodigo(),
                                Controle.dataPadrao.format(op.getDataEntrega()),
                                op.getStatus(),
                                ProdutoDAO.retornaDescricaoProduto(op.getCodProduto(), op.getTipoProduto())
                            });

                        }
                    //POR STATUS -- 6
                    } else if (dataEntrega.isSelected()) {
                        for (OrdemProducao op : TelaAcompanhamentoDAO.retornaFiltro(statusTexto.getSelectedItem().toString(), (byte) 6)) {
                            modeloTabela.addRow(new Object[]{
                                op.getCodigo(),
                                Controle.dataPadrao.format(op.getDataEntrega()),
                                op.getStatus(),
                                ProdutoDAO.retornaDescricaoProduto(op.getCodProduto(), op.getTipoProduto())
                            });
                        }
                    }
                    codOpTexto.setValue(null);
                } catch (SQLException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                }
                loading.setVisible(false);
            }
        }.start();
    }//GEN-LAST:event_aplicarTextoActionPerformed

    private void codOpFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_codOpFiltroItemStateChanged
        codOpTexto.setEnabled(true);
        dataEntregaTexto.setEnabled(false);
        mesEmissaoSelecionar.setEnabled(false);
        anoEmissaoSelecionar.setEnabled(false);
        mesEntregaSelecionar.setEnabled(false);
        anoEntregaSelecionar.setEnabled(false);
        statusTexto.setEnabled(false);
    }//GEN-LAST:event_codOpFiltroItemStateChanged

    private void codOpFiltroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_codOpFiltroMouseClicked

    }//GEN-LAST:event_codOpFiltroMouseClicked

    private void dataEntregaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dataEntregaItemStateChanged
        statusTexto.setEnabled(false);
        codOpTexto.setEnabled(false);
        dataEntregaTexto.setEnabled(true);
        mesEmissaoSelecionar.setEnabled(false);
        anoEmissaoSelecionar.setEnabled(false);
        mesEntregaSelecionar.setEnabled(false);
        anoEntregaSelecionar.setEnabled(false);
    }//GEN-LAST:event_dataEntregaItemStateChanged

    private void dataEntregaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dataEntregaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_dataEntregaMouseClicked

    private void tempoRealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempoRealActionPerformed
        realTime = true;
        refresh();
    }//GEN-LAST:event_tempoRealActionPerformed

    private void codOrcamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_codOrcamentoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_codOrcamentoItemStateChanged

    private void codOrcamentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_codOrcamentoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_codOrcamentoMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JYearChooser anoEmissaoSelecionar;
    private com.toedter.calendar.JYearChooser anoEntregaSelecionar;
    private javax.swing.JButton aplicarTexto;
    private javax.swing.JRadioButton codOpFiltro;
    private javax.swing.JFormattedTextField codOpTexto;
    private javax.swing.JFormattedTextField codOrcTexto;
    private javax.swing.JRadioButton codOrcamento;
    private javax.swing.JRadioButton dataEntrega;
    private com.toedter.calendar.JDateChooser dataEntregaTexto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton mesEmissao;
    private com.toedter.calendar.JMonthChooser mesEmissaoSelecionar;
    private javax.swing.JRadioButton mesEntrega;
    private com.toedter.calendar.JMonthChooser mesEntregaSelecionar;
    private javax.swing.JRadioButton status;
    private javax.swing.JComboBox<String> statusTexto;
    public static javax.swing.JTable tabelaConsulta;
    private javax.swing.JButton tempoReal;
    // End of variables declaration//GEN-END:variables
    public void refresh() {
        DefaultTableModel modeloAcompanhamento = (DefaultTableModel) tabelaConsulta.getModel();
        new Thread("Refresh tela acompanhamento") {
            @Override
            public void run() {
                while (realTime) {
                    try {
                        modeloAcompanhamento.setNumRows(0);
                        for (TelaAcompanhamentoBEAN telaAcompanhamentoBEAN : TelaAcompanhamentoDAO.refreshTabela(100)) {
                            modeloAcompanhamento.addRow(new Object[]{
                                telaAcompanhamentoBEAN.getNumero(),
                                Controle.dataPadrao.format(telaAcompanhamentoBEAN.getDataEntrega()),
                                telaAcompanhamentoBEAN.getStatus(),
                                telaAcompanhamentoBEAN.getDescricaoProduto()});
                        }
                        OrdemProducao.corTabela(tabelaConsulta, (byte) 1);
                        Thread.sleep(300000);
                    } catch (SQLException | InterruptedException ex) {
                        EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                        EnvioExcecao.envio();
                    }

                }
            }
        }.start();
    }
}
