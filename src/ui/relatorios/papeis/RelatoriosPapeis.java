/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.relatorios.papeis;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.text.Element;
import entities.sisgrafex.Cliente;
import entities.sisgrafex.Papel;
import entities.sisgrafex.Produto;
import exception.ConsultaSemResultadoException;
import exception.EnvioExcecao;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.Date;
import java.text.DecimalFormat;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import model.dao.PapelDAO;
import ui.controle.Controle;

/**
 *
 * @author 1113778771
 */
public class RelatoriosPapeis extends javax.swing.JInternalFrame {

    DefaultListModel model = new DefaultListModel();
    public static Cliente cliente;
    public static Produto produto;
    int quantidadeSelecionada = 0;
    private Papel papel;
    private Date textoPeriodoInicio = null;
    private Date textoPeriodoFim = null;
    private byte tipoCondicaoPeriodo = 0;

    private JLabel loading;

    private static RelatoriosPapeis relatoriosOrdemProducao;

    public static RelatoriosPapeis getInstancia(JLabel loading) {
        return new RelatoriosPapeis(loading);
    }

    /**
     * Creates new form RelatoriosOrdemProducao
     */
    public RelatoriosPapeis(JLabel loading) {
        initComponents();
        listaPesquisaPapeis.setModel(model);
        this.loading = loading;
        estado1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoOpOrcamento = new javax.swing.ButtonGroup();
        grupoPeriodo = new javax.swing.ButtonGroup();
        grupoOrdenar = new javax.swing.ButtonGroup();
        grupoOrientacao = new javax.swing.ButtonGroup();
        grupoPapel = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        listaPesquisaPapeis = new javax.swing.JList<>();
        porPapelCod = new javax.swing.JRadioButton();
        papelCod = new javax.swing.JFormattedTextField();
        porPapelDescricao = new javax.swing.JRadioButton();
        papelDescricao = new javax.swing.JTextField();
        porTodosPapeis = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        porOrdemProducao = new javax.swing.JRadioButton();
        textoOrdemProducao = new javax.swing.JFormattedTextField();
        porTodosOp = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        periodoFimEmissao = new com.toedter.calendar.JDateChooser();
        porTodosPeriodos = new javax.swing.JRadioButton();
        porDiaEmissao = new javax.swing.JRadioButton();
        diaEmissao = new com.toedter.calendar.JDateChooser();
        porPeriodoEmissao = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        periodoInicioEmissao = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        porDiaEntrega = new javax.swing.JRadioButton();
        diaEntrega = new com.toedter.calendar.JDateChooser();
        periodoFimEntrega = new com.toedter.calendar.JDateChooser();
        porPeriodoEntrega = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        periodoInicioEntrega = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        quantidadeGasta = new javax.swing.JCheckBox();
        gramatura = new javax.swing.JCheckBox();
        descricaoPapel = new javax.swing.JCheckBox();
        codPapel = new javax.swing.JCheckBox();
        precoUnit = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        porQtdGastaCresc = new javax.swing.JRadioButton();
        porQtdGastaDecresc = new javax.swing.JRadioButton();
        porDescricaoPapelOrd = new javax.swing.JRadioButton();
        porCodPapelOrd = new javax.swing.JRadioButton();
        porPrecoUnitOrd = new javax.swing.JRadioButton();
        botaoGeraRelatorio = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        orientacaoRetrato = new javax.swing.JRadioButton();
        orientacaoPaisagem = new javax.swing.JRadioButton();
        semOrdenacao = new javax.swing.JRadioButton();

        setTitle("RELATÓRIO DE CONSUMO DE PAPÉIS");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/papeis.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 340));

        listaPesquisaPapeis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaPesquisaPapeisMouseClicked(evt);
            }
        });

        grupoPapel.add(porPapelCod);
        porPapelCod.setText("POR PAPEL (CÓDIGO)");
        porPapelCod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porPapelCodItemStateChanged(evt);
            }
        });

        grupoPapel.add(porPapelDescricao);
        porPapelDescricao.setText("POR PAPEL (DESCRIÇÃO)");
        porPapelDescricao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porPapelDescricaoItemStateChanged(evt);
            }
        });

        papelDescricao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                papelDescricaoKeyReleased(evt);
            }
        });

        grupoPapel.add(porTodosPapeis);
        porTodosPapeis.setText("TODOS");
        porTodosPapeis.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosPapeisItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porPapelDescricao)
                            .addComponent(porTodosPapeis))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(papelDescricao, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                            .addComponent(listaPesquisaPapeis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(porPapelCod)
                        .addGap(5, 5, 5)
                        .addComponent(papelCod, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porPapelCod)
                    .addComponent(papelCod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(papelDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(porPapelDescricao))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(porTodosPapeis))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(listaPesquisaPapeis, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {papelCod, papelDescricao, porPapelCod, porPapelDescricao, porTodosPapeis});

        jTabbedPane1.addTab("PAPEL", new javax.swing.ImageIcon(getClass().getResource("/icones/papeis.png")), jPanel1); // NOI18N

        grupoOpOrcamento.add(porOrdemProducao);
        porOrdemProducao.setText("ORDEM DE PRODUÇÃO (CÓDIGO)");
        porOrdemProducao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porOrdemProducaoItemStateChanged(evt);
            }
        });

        textoOrdemProducao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        textoOrdemProducao.setToolTipText("CÓDIGO DA ORDEM DE PRODUÇÃO");

        grupoOpOrcamento.add(porTodosOp);
        porTodosOp.setText("TODOS");
        porTodosOp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosOpItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(porOrdemProducao)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoOrdemProducao, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(porTodosOp))
                .addContainerGap(481, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porOrdemProducao)
                    .addComponent(textoOrdemProducao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(porTodosOp)
                .addContainerGap(198, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ORDEM DE PRODUÇÃO", new javax.swing.ImageIcon(getClass().getResource("/icones/producao.png")), jPanel7); // NOI18N

        periodoFimEmissao.setToolTipText("DIA FINAL");

        grupoPeriodo.add(porTodosPeriodos);
        porTodosPeriodos.setText("TODOS");
        porTodosPeriodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosPeriodosItemStateChanged(evt);
            }
        });
        porTodosPeriodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porTodosPeriodosActionPerformed(evt);
            }
        });

        grupoPeriodo.add(porDiaEmissao);
        porDiaEmissao.setText("POR DIA EMISSÃO");
        porDiaEmissao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porDiaEmissaoItemStateChanged(evt);
            }
        });

        diaEmissao.setToolTipText("DIA EMISSÃO");

        grupoPeriodo.add(porPeriodoEmissao);
        porPeriodoEmissao.setText("POR PERÍODO DATA EMISSÃO");
        porPeriodoEmissao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porPeriodoEmissaoItemStateChanged(evt);
            }
        });

        jLabel1.setText("INICÍO");

        periodoInicioEmissao.setToolTipText("DIA INICIAL");

        jLabel2.setText("FIM");

        grupoPeriodo.add(porDiaEntrega);
        porDiaEntrega.setText("POR DIA ENTREGA");
        porDiaEntrega.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porDiaEntregaItemStateChanged(evt);
            }
        });

        diaEntrega.setToolTipText("DIA ENTREGA");

        periodoFimEntrega.setToolTipText("DIA FINAL");

        grupoPeriodo.add(porPeriodoEntrega);
        porPeriodoEntrega.setText("POR PERÍODO DATA ENTREGA");
        porPeriodoEntrega.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porPeriodoEntregaItemStateChanged(evt);
            }
        });
        porPeriodoEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porPeriodoEntregaActionPerformed(evt);
            }
        });

        jLabel3.setText("INICÍO");

        periodoInicioEntrega.setToolTipText("DIA INICIAL");

        jLabel4.setText("FIM");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(porPeriodoEmissao)
                    .addComponent(porPeriodoEntrega)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periodoInicioEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periodoFimEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(periodoInicioEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(porTodosPeriodos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periodoFimEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porDiaEmissao)
                            .addComponent(porDiaEntrega))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(diaEmissao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(diaEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {diaEmissao, diaEntrega, periodoFimEmissao, periodoFimEntrega, periodoInicioEmissao, periodoInicioEntrega});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(diaEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(porDiaEmissao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porDiaEntrega)
                    .addComponent(diaEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(porPeriodoEmissao)
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(periodoFimEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(periodoInicioEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(9, 9, 9)
                .addComponent(porPeriodoEntrega)
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(periodoFimEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(periodoInicioEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(porTodosPeriodos)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, periodoFimEmissao, periodoInicioEmissao});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, jLabel4, periodoFimEntrega, periodoInicioEntrega});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {diaEmissao, diaEntrega, porDiaEmissao, porDiaEntrega});

        jTabbedPane1.addTab("PERÍODO", new javax.swing.ImageIcon(getClass().getResource("/icones/periodo.png")), jPanel3); // NOI18N

        quantidadeGasta.setText("QUANTIDADE GASTA");
        quantidadeGasta.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                quantidadeGastaItemStateChanged(evt);
            }
        });

        gramatura.setText("GRAMATURA");
        gramatura.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gramaturaItemStateChanged(evt);
            }
        });

        descricaoPapel.setText("DESCRIÇÃO DO PAPEL");
        descricaoPapel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                descricaoPapelItemStateChanged(evt);
            }
        });

        codPapel.setText("CÓDIGO DO PAPEL");
        codPapel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                codPapelItemStateChanged(evt);
            }
        });

        precoUnit.setText("PREÇO UNITÁRIO");
        precoUnit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                precoUnitItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quantidadeGasta)
                    .addComponent(codPapel)
                    .addComponent(descricaoPapel)
                    .addComponent(precoUnit)
                    .addComponent(gramatura))
                .addContainerGap(677, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(quantidadeGasta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descricaoPapel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codPapel)
                .addGap(0, 0, 0)
                .addComponent(precoUnit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gramatura)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CAMPOS", new javax.swing.ImageIcon(getClass().getResource("/icones/campos.png")), jPanel6); // NOI18N

        grupoOrdenar.add(porQtdGastaCresc);
        porQtdGastaCresc.setText("POR QUANTIDADE GASTA CRESCENTE");

        grupoOrdenar.add(porQtdGastaDecresc);
        porQtdGastaDecresc.setText("POR QUANTIDADE GASTA DECRESCENTE");

        grupoOrdenar.add(porDescricaoPapelOrd);
        porDescricaoPapelOrd.setText("POR DESCRIÇÃO DO PAPEL");
        porDescricaoPapelOrd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porDescricaoPapelOrdActionPerformed(evt);
            }
        });

        grupoOrdenar.add(porCodPapelOrd);
        porCodPapelOrd.setText("POR CÓDIGO DO PAPEL");
        porCodPapelOrd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porCodPapelOrdActionPerformed(evt);
            }
        });

        grupoOrdenar.add(porPrecoUnitOrd);
        porPrecoUnitOrd.setText("POR PREÇO UNITÁRIO");

        botaoGeraRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        botaoGeraRelatorio.setText("GERAR RELATÓRIO");
        botaoGeraRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGeraRelatorioActionPerformed(evt);
            }
        });

        jLabel6.setText("ORIENTAÇÃO:");

        grupoOrientacao.add(orientacaoRetrato);
        orientacaoRetrato.setText("RETRATO");

        grupoOrientacao.add(orientacaoPaisagem);
        orientacaoPaisagem.setText("PAISAGEM");

        grupoOrdenar.add(semOrdenacao);
        semOrdenacao.setText("SEM ORDENAÇÃO");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(semOrdenacao)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porPrecoUnitOrd)
                            .addComponent(porQtdGastaDecresc)
                            .addComponent(porDescricaoPapelOrd)
                            .addComponent(porCodPapelOrd)
                            .addComponent(porQtdGastaCresc))
                        .addGap(111, 571, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoGeraRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orientacaoRetrato)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orientacaoPaisagem)
                                .addGap(0, 558, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(porQtdGastaCresc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porQtdGastaDecresc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porDescricaoPapelOrd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porCodPapelOrd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porPrecoUnitOrd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(semOrdenacao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(orientacaoRetrato)
                    .addComponent(orientacaoPaisagem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoGeraRelatorio)
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel6, orientacaoPaisagem, orientacaoRetrato});

        jTabbedPane1.addTab("ORDENAR", new javax.swing.ImageIcon(getClass().getResource("/icones/ordenar.png")), jPanel5); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoGeraRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGeraRelatorioActionPerformed
        new Thread() {
            @Override
            public void run() {
                if (verificaCondicoes()) {
                    geraRelatorio();
                }
            }
        }.start();
    }//GEN-LAST:event_botaoGeraRelatorioActionPerformed

    private void porCodPapelOrdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porCodPapelOrdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porCodPapelOrdActionPerformed

    private void porDescricaoPapelOrdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porDescricaoPapelOrdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porDescricaoPapelOrdActionPerformed

    private void precoUnitItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_precoUnitItemStateChanged
        if (precoUnit.isSelected() == true) {
            porPrecoUnitOrd.setEnabled(true);
        } else {
            porPrecoUnitOrd.setEnabled(false);
        }
    }//GEN-LAST:event_precoUnitItemStateChanged

    private void codPapelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_codPapelItemStateChanged
        if (codPapel.isSelected() == true) {
            porCodPapelOrd.setEnabled(true);
        } else {
            porCodPapelOrd.setEnabled(false);
        }
    }//GEN-LAST:event_codPapelItemStateChanged

    private void descricaoPapelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_descricaoPapelItemStateChanged
        if (descricaoPapel.isSelected() == true) {
            porDescricaoPapelOrd.setEnabled(true);
        } else {
            porDescricaoPapelOrd.setEnabled(false);
        }
    }//GEN-LAST:event_descricaoPapelItemStateChanged

    private void gramaturaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gramaturaItemStateChanged

    }//GEN-LAST:event_gramaturaItemStateChanged

    private void quantidadeGastaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_quantidadeGastaItemStateChanged
        if (quantidadeGasta.isSelected() == true) {
            porQtdGastaCresc.setEnabled(true);
            porQtdGastaDecresc.setEnabled(true);
        } else {
            porQtdGastaCresc.setEnabled(false);
            porQtdGastaDecresc.setEnabled(false);
        }
    }//GEN-LAST:event_quantidadeGastaItemStateChanged

    private void porPeriodoEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porPeriodoEntregaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porPeriodoEntregaActionPerformed

    private void porPeriodoEntregaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porPeriodoEntregaItemStateChanged
        if (porPeriodoEntrega.isSelected() == true) {
            diaEmissao.setEnabled(false);
            diaEntrega.setEnabled(false);
            periodoInicioEmissao.setEnabled(false);
            periodoFimEmissao.setEnabled(false);
            periodoInicioEntrega.setEnabled(true);
            periodoFimEntrega.setEnabled(true);

        }
    }//GEN-LAST:event_porPeriodoEntregaItemStateChanged

    private void porDiaEntregaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porDiaEntregaItemStateChanged
        if (porDiaEntrega.isSelected() == true) {
            diaEmissao.setEnabled(false);
            diaEntrega.setEnabled(true);
            periodoInicioEmissao.setEnabled(false);
            periodoFimEmissao.setEnabled(false);
            periodoInicioEntrega.setEnabled(false);
            periodoFimEntrega.setEnabled(false);

        }
    }//GEN-LAST:event_porDiaEntregaItemStateChanged

    private void porPeriodoEmissaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porPeriodoEmissaoItemStateChanged
        if (porPeriodoEmissao.isSelected() == true) {
            diaEmissao.setEnabled(false);
            diaEntrega.setEnabled(false);
            periodoInicioEmissao.setEnabled(true);
            periodoFimEmissao.setEnabled(true);
            periodoInicioEntrega.setEnabled(false);
            periodoFimEntrega.setEnabled(false);

        }
    }//GEN-LAST:event_porPeriodoEmissaoItemStateChanged

    private void porDiaEmissaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porDiaEmissaoItemStateChanged
        if (porDiaEmissao.isSelected() == true) {
            diaEmissao.setEnabled(true);
            diaEntrega.setEnabled(false);
            periodoInicioEmissao.setEnabled(false);
            periodoFimEmissao.setEnabled(false);
            periodoInicioEntrega.setEnabled(false);
            periodoFimEntrega.setEnabled(false);

        }
    }//GEN-LAST:event_porDiaEmissaoItemStateChanged

    private void porTodosPeriodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porTodosPeriodosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porTodosPeriodosActionPerformed

    private void porTodosPeriodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosPeriodosItemStateChanged
        if (porTodosPeriodos.isSelected() == true) {
            diaEmissao.setEnabled(false);
            diaEntrega.setEnabled(false);
            periodoInicioEmissao.setEnabled(false);
            periodoFimEmissao.setEnabled(false);
            periodoInicioEntrega.setEnabled(false);
            periodoFimEntrega.setEnabled(false);

        }
    }//GEN-LAST:event_porTodosPeriodosItemStateChanged

    private void porTodosOpItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosOpItemStateChanged
        if (porTodosOp.isSelected()) {
            textoOrdemProducao.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosOpItemStateChanged

    private void porOrdemProducaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porOrdemProducaoItemStateChanged
        if (porOrdemProducao.isSelected()) {
            textoOrdemProducao.setEnabled(true);
        }
    }//GEN-LAST:event_porOrdemProducaoItemStateChanged

    private void porPapelCodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porPapelCodItemStateChanged
        if (porPapelCod.isSelected()) {
            papelCod.setEnabled(true);
            papelDescricao.setEnabled(false);
        }
    }//GEN-LAST:event_porPapelCodItemStateChanged

    private void porPapelDescricaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porPapelDescricaoItemStateChanged
        if (porPapelDescricao.isSelected()) {
            papelCod.setEnabled(false);
            papelDescricao.setEnabled(true);
        }
    }//GEN-LAST:event_porPapelDescricaoItemStateChanged

    private void porTodosPapeisItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosPapeisItemStateChanged
        if (porTodosPapeis.isSelected()) {
            papelCod.setEnabled(false);
            papelDescricao.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosPapeisItemStateChanged

    private void papelDescricaoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_papelDescricaoKeyReleased
        try {
            model.clear();
            for (Papel papel : PapelDAO.retornaPesqRel(papelDescricao.getText(), (byte) 1)) {
                model.addElement(papel.getCod() + " - " + papel.getDescricao());
            }

            if (model.isEmpty()) {
                listaPesquisaPapeis.setVisible(false);
            } else {
                listaPesquisaPapeis.setVisible(true);
            }

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_papelDescricaoKeyReleased

    private void listaPesquisaPapeisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisaPapeisMouseClicked
        try {
            for (Papel papel : PapelDAO.retornaPesqRel(listaPesquisaPapeis.getSelectedValue(), (byte) 2)) {
                papel = (Papel) PapelDAO.retornaPesqRel(listaPesquisaPapeis.getSelectedValue(), (byte) 2);
            }
            listaPesquisaPapeis.setVisible(false);
            papelDescricao.setText(listaPesquisaPapeis.getSelectedValue());
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_listaPesquisaPapeisMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGeraRelatorio;
    private javax.swing.JCheckBox codPapel;
    private javax.swing.JCheckBox descricaoPapel;
    private com.toedter.calendar.JDateChooser diaEmissao;
    private com.toedter.calendar.JDateChooser diaEntrega;
    private javax.swing.JCheckBox gramatura;
    private javax.swing.ButtonGroup grupoOpOrcamento;
    private javax.swing.ButtonGroup grupoOrdenar;
    private javax.swing.ButtonGroup grupoOrientacao;
    private javax.swing.ButtonGroup grupoPapel;
    private javax.swing.ButtonGroup grupoPeriodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> listaPesquisaPapeis;
    private javax.swing.JRadioButton orientacaoPaisagem;
    private javax.swing.JRadioButton orientacaoRetrato;
    private javax.swing.JFormattedTextField papelCod;
    private javax.swing.JTextField papelDescricao;
    private com.toedter.calendar.JDateChooser periodoFimEmissao;
    private com.toedter.calendar.JDateChooser periodoFimEntrega;
    private com.toedter.calendar.JDateChooser periodoInicioEmissao;
    private com.toedter.calendar.JDateChooser periodoInicioEntrega;
    private javax.swing.JRadioButton porCodPapelOrd;
    private javax.swing.JRadioButton porDescricaoPapelOrd;
    private javax.swing.JRadioButton porDiaEmissao;
    private javax.swing.JRadioButton porDiaEntrega;
    private javax.swing.JRadioButton porOrdemProducao;
    private javax.swing.JRadioButton porPapelCod;
    private javax.swing.JRadioButton porPapelDescricao;
    private javax.swing.JRadioButton porPeriodoEmissao;
    private javax.swing.JRadioButton porPeriodoEntrega;
    private javax.swing.JRadioButton porPrecoUnitOrd;
    private javax.swing.JRadioButton porQtdGastaCresc;
    private javax.swing.JRadioButton porQtdGastaDecresc;
    private javax.swing.JRadioButton porTodosOp;
    private javax.swing.JRadioButton porTodosPapeis;
    private javax.swing.JRadioButton porTodosPeriodos;
    private javax.swing.JCheckBox precoUnit;
    private javax.swing.JCheckBox quantidadeGasta;
    private javax.swing.JRadioButton semOrdenacao;
    private javax.swing.JFormattedTextField textoOrdemProducao;
    // End of variables declaration//GEN-END:variables

    //GERA RELATÓRIO
    public int retornaQtdSelecionada() {
        quantidadeSelecionada = 0;

        if (quantidadeGasta.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (descricaoPapel.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (codPapel.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (precoUnit.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (gramatura.isSelected()) {
            quantidadeSelecionada += 1;
        }

        return quantidadeSelecionada;
    }

    public PdfPTable retornaTabela() {
        int qtdSelecionada = retornaQtdSelecionada();
        System.out.println(qtdSelecionada);
        PdfPTable retorno = null;
        PdfPCell celula = null;

        switch (qtdSelecionada) {
            case 1:
                retorno = new PdfPTable(new float[]{5f});
                retorno.setWidthPercentage(100);

                if (codPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PAPEL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (descricaoPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (gramatura.isSelected()) {
                    celula = new PdfPCell(new Phrase("GRAMATURA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (quantidadeGasta.isSelected()) {
                    celula = new PdfPCell(new Phrase("QTD GASTA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (precoUnit.isSelected()) {
                    celula = new PdfPCell(new Phrase("PREÇO UNITÁRIO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 2:
                retorno = new PdfPTable(new float[]{5f, 5f});
                retorno.setWidthPercentage(100);

                if (codPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PAPEL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (descricaoPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (gramatura.isSelected()) {
                    celula = new PdfPCell(new Phrase("GRAMATURA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (quantidadeGasta.isSelected()) {
                    celula = new PdfPCell(new Phrase("QTD GASTA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (precoUnit.isSelected()) {
                    celula = new PdfPCell(new Phrase("PREÇO UNITÁRIO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 3:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (codPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PAPEL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (descricaoPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (gramatura.isSelected()) {
                    celula = new PdfPCell(new Phrase("GRAMATURA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (quantidadeGasta.isSelected()) {
                    celula = new PdfPCell(new Phrase("QTD GASTA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (precoUnit.isSelected()) {
                    celula = new PdfPCell(new Phrase("PREÇO UNITÁRIO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 4:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (codPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PAPEL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (descricaoPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (gramatura.isSelected()) {
                    celula = new PdfPCell(new Phrase("GRAMATURA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (quantidadeGasta.isSelected()) {
                    celula = new PdfPCell(new Phrase("QTD GASTA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (precoUnit.isSelected()) {
                    celula = new PdfPCell(new Phrase("PREÇO UNITÁRIO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 5:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (codPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PAPEL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (descricaoPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (gramatura.isSelected()) {
                    celula = new PdfPCell(new Phrase("GRAMATURA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (quantidadeGasta.isSelected()) {
                    celula = new PdfPCell(new Phrase("QTD GASTA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (precoUnit.isSelected()) {
                    celula = new PdfPCell(new Phrase("PREÇO UNITÁRIO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
        }
        return retorno;
    }

    public PdfPTable retornaTabelaComConteudo() {
        try {
            PdfPTable retorno = retornaTabela();
            PdfPCell celula = null;

            /*
            @param tipoCondicaoPapel
            1 - papel código
            2 - papel descrição
            3 - todos
             */
            byte tipoCondicaoPapel = 0;
            if (porPapelCod.isSelected()) {
                tipoCondicaoPapel = 1;
                papel = new Papel(Integer.valueOf(papelCod.getText()));
            } else if (porPapelDescricao.isSelected()) {
                tipoCondicaoPapel = 2;
            } else {
                tipoCondicaoPapel = 3;
            }

            /*
            @param tipoCondicaoOp
            1 - codigo op
            2 - todos
             */
            int codOp = 0;
            byte tipoCondOp = 0;
            if (porOrdemProducao.isSelected()) {
                tipoCondOp = 1;
                codOp = Integer.valueOf(textoOrdemProducao.getText());
            } else {
                tipoCondOp = 2;
            }

            /*
            @param tipoCondicaoOrdenar
            1 - codigo op crescente
            2 - codigo op decrescente
            3 - quantidade crescente
            4 - quantidade decrescente
            5 - emissor
            6 - tipoPessoa
            7 - valor crescente
            8 - valor decrescente
            9 - data emissao mais atual
            10 - data emissao mais antiga
            11 - data entrega mais atual
            12 - data entrega mais antiga
            13 - sem ordenacao
             */
            byte tipoCondicaoOrdenar = 0;
            if (porQtdGastaCresc.isSelected()) {
                tipoCondicaoOrdenar = 1;
            } else if (porQtdGastaDecresc.isSelected()) {
                tipoCondicaoOrdenar = 2;
            } else if (porDescricaoPapelOrd.isSelected()) {
                tipoCondicaoOrdenar = 3;
            } else if (porCodPapelOrd.isSelected()) {
                tipoCondicaoOrdenar = 4;
            } else if (porPrecoUnitOrd.isSelected()) {
                tipoCondicaoOrdenar = 5;
            } else if (semOrdenacao.isSelected()) {
                tipoCondicaoOrdenar = 13;
            }

            DecimalFormat df = new DecimalFormat("###,##0.00");
            for (Papel papel : RelatoriosPapeisDAO.retornaConteudoRelatorioPapeis(quantidadeGasta.isSelected(),
                    descricaoPapel.isSelected(),
                    codPapel.isSelected(),
                    precoUnit.isSelected(),
                    gramatura.isSelected(),
                    tipoCondicaoPapel,
                    tipoCondOp,
                    tipoCondicaoPeriodo,
                    tipoCondicaoOrdenar,
                    papel,
                    codOp,
                    textoPeriodoInicio,
                    textoPeriodoFim)) {

                if (codPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(papel.getCod()), FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (descricaoPapel.isSelected()) {
                    celula = new PdfPCell(new Phrase(papel.getDescricao(), FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (gramatura.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(papel.getGramatura()), FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (quantidadeGasta.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(papel.getQtdGasta()), FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (precoUnit.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(papel.getUnitario()), FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
            }
            return retorno;
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
            return null;
        } catch (ConsultaSemResultadoException ex) {
            throw new ConsultaSemResultadoException();
        }
    }

    /*
    1 - ORCAMENTO
     */
    public void geraRelatorio() {

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4, 30, 20, 20, 30);

        new Thread() {
            @Override
            public void run() {

                loading.setText("GERANDO RELATÓRIO...");
                loading.setVisible(true);

                String hora = Controle.horaPadraoDiretorio.format(new java.util.Date());
                String data = Controle.dataPadraoDiretorio.format(new java.util.Date());

                try {
                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempUnix + data + hora + ".pdf"));
                    }

                    document.setMargins(20, 20, 20, 20);
                    if (orientacaoRetrato.isSelected()) {
                        document.setPageSize(PageSize.A4);
                    } else {
                        document.setPageSize(PageSize.A4.rotate());
                    }

                    document.open();

                    Image imagem = Image.getInstance(getClass().getResource("/ui/orcamentos/operacoes/cabecalhoPropostaPng.png"));
                    imagem.setAlignment(1);
                    imagem.scaleToFit(500, 1000);
                    document.add(imagem);

                    document.add(new Paragraph("\n"));

                    Paragraph p = new Paragraph("RELATÓRIO DE CONSUMO DE PAPÉIS", FontFactory.getFont("arial.ttf", 12, Font.BOLD));
                    p.setAlignment(1);
                    document.add(p);

                    /*
                    @param tipoCondicaoPeriodo
                    1 - por dia emissao
                    2 - por dia entrega
                    3 - por periodo data emissao
                    4 - por periodo data entrega
                    5 - todos
                     */
                    if (porDiaEmissao.isSelected()) {
                        tipoCondicaoPeriodo = 1;
                        textoPeriodoInicio = new java.sql.Date(diaEmissao.getDate().getTime());
                    } else if (porDiaEntrega.isSelected()) {
                        tipoCondicaoPeriodo = 2;
                        textoPeriodoInicio = new java.sql.Date(diaEntrega.getDate().getTime());
                    } else if (porPeriodoEmissao.isSelected()) {
                        tipoCondicaoPeriodo = 3;
                        textoPeriodoInicio = new java.sql.Date(periodoInicioEmissao.getDate().getTime());
                        textoPeriodoFim = new java.sql.Date(periodoFimEmissao.getDate().getTime());
                    } else if (porPeriodoEntrega.isSelected()) {
                        tipoCondicaoPeriodo = 4;
                        textoPeriodoInicio = new java.sql.Date(periodoInicioEntrega.getDate().getTime());
                        textoPeriodoFim = new java.sql.Date(periodoFimEntrega.getDate().getTime());
                    } else if (porTodosPeriodos.isSelected()) {
                        tipoCondicaoPeriodo = 5;
                    }
                    switch (tipoCondicaoPeriodo) {
                        case 1:
                            p = new Paragraph("DIA EMISSÃO OP: " + Controle.dataPadrao.format(textoPeriodoInicio),
                                    FontFactory.getFont("arial.ttf", 9, Font.BOLD));
                            p.setAlignment(1);
                            document.add(p);
                            break;
                        case 2:
                            p = new Paragraph("DIA ENTREGA OP: " + Controle.dataPadrao.format(textoPeriodoInicio),
                                    FontFactory.getFont("arial.ttf", 9, Font.BOLD));
                            p.setAlignment(1);
                            document.add(p);
                            break;
                        case 3:
                            p = new Paragraph("PERÍODO DATA EMISSÃO OP: "
                                    + Controle.dataPadrao.format(textoPeriodoInicio) + " ATÉ "
                                    + Controle.dataPadrao.format(textoPeriodoFim),
                                    FontFactory.getFont("arial.ttf", 9, Font.BOLD));
                            p.setAlignment(1);
                            document.add(p);
                            break;
                        case 4:
                            p = new Paragraph("PERÍODO DATA ENTREGA OP: "
                                    + Controle.dataPadrao.format(textoPeriodoInicio) + " ATÉ "
                                    + Controle.dataPadrao.format(textoPeriodoFim),
                                    FontFactory.getFont("arial.ttf", 9, Font.BOLD));
                            p.setAlignment(1);
                            document.add(p);
                            break;
                        case 5:
                            p = new Paragraph("TEMPO DE EXECUÇÃO DO PROGRAMA",
                                    FontFactory.getFont("arial.ttf", 9, Font.BOLD));
                            p.setAlignment(1);
                            document.add(p);
                            break;
                    }

                    document.add(new Paragraph("\n"));

                    PdfPTable tabelaPrincipal = retornaTabelaComConteudo();
                    document.add(tabelaPrincipal);

                    document.close();

                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempUnix + data + hora + ".pdf"));
                    }
                    
                    loading.setVisible(false);
                } catch (IOException | ConsultaSemResultadoException | DocumentException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio(loading);
                }
            }
        }.start();
    }

    //ESTADOS
    public void estado1() {
        //papel
        porTodosPapeis.setSelected(true);
        listaPesquisaPapeis.setVisible(false);
        //op orcamento
        porTodosOp.setSelected(true);
        //periodo
        porTodosPeriodos.setSelected(true);
        //ordenar
        semOrdenacao.setSelected(true);
        porQtdGastaCresc.setEnabled(false);
        porQtdGastaDecresc.setEnabled(false);
        porDescricaoPapelOrd.setEnabled(false);
        porCodPapelOrd.setEnabled(false);
        porPrecoUnitOrd.setEnabled(false);
        //orientacao
        orientacaoRetrato.setSelected(true);
    }

    //CONDIÇÕES
    public Boolean verificaCondicoes() {
        if (retornaQtdSelecionada() == 0) {
            JOptionPane.showMessageDialog(null, "NENHUM CAMPO SELECIONADO.\nSELECIONE UM OU MAIS CAMPOS E TENTE NOVAMENTE.", "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //OP/ORÇAMENTO
        if (porOrdemProducao.isSelected()) {
            if (textoOrdemProducao.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA CÓDIGO DA ORDEM DE PRODUÇÃO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        //PERÍODO
        if (porDiaEmissao.isSelected()) {
            if (diaEmissao.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA EMISSÃO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porDiaEntrega.isSelected()) {
            if (diaEntrega.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA ENTREGA", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porPeriodoEmissao.isSelected()) {
            if (periodoInicioEmissao.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA INÍCIO DATA EMISSÃO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (periodoFimEmissao.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA FIM DATA EMISSÃO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porPeriodoEntrega.isSelected()) {
            if (periodoInicioEntrega.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA INÍCIO DATA ENTREGA", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (periodoFimEntrega.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA FIM DATA ENTREGA", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }
}
