/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.relatorios.ordemProducao;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.text.Element;
import entities.sisgrafex.Cliente;
import entities.sisgrafex.OrdemProducao;
import entities.sisgrafex.Produto;
import exception.ConsultaSemResultadoException;
import exception.EnvioExcecao;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.Date;
import java.text.DecimalFormat;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import ui.administrador.UsuarioBEAN;
import ui.administrador.UsuarioDAO;
import ui.cadastros.clientes.ClienteDAO;
import ui.cadastros.produtos.ProdutoDAO;
import ui.controle.Controle;
import ui.login.TelaAutenticacao;

/**
 *
 * @author 1113778771
 */
public class RelatoriosOrdemProducao extends javax.swing.JInternalFrame {

    DefaultListModel model = new DefaultListModel();
    public static Cliente cliente;
    public static Produto produto;
    int quantidadeSelecionada = 0;

    private JLabel loading;

    private static RelatoriosOrdemProducao relatoriosOrdemProducao;

    public static RelatoriosOrdemProducao getInstancia(JLabel loading) {
        return new RelatoriosOrdemProducao(loading);
    }

    /**
     * Creates new form RelatoriosOrdemProducao
     */
    public RelatoriosOrdemProducao(JLabel loading) {
        try {
            initComponents();
            this.loading = loading;
            estado1();

            comboEmissores.removeAllItems();
            for (UsuarioBEAN cadastroFuncionariosBEAN
                    : UsuarioDAO.retornaAtendentes((byte) 2)) {
                comboEmissores.addItem(cadastroFuncionariosBEAN.getCodigo() + " - "
                        + cadastroFuncionariosBEAN.getNome());
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoCliente = new javax.swing.ButtonGroup();
        grupoOpOrcamento = new javax.swing.ButtonGroup();
        grupoProduto = new javax.swing.ButtonGroup();
        grupoEmissor = new javax.swing.ButtonGroup();
        grupoPeriodo = new javax.swing.ButtonGroup();
        grupoOrdenar = new javax.swing.ButtonGroup();
        grupoTipoPessoa = new javax.swing.ButtonGroup();
        grupoOrientacao = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        listaPesquisaCliente = new javax.swing.JList<String>();
        porCodigoCliente = new javax.swing.JRadioButton();
        codigoCliente = new javax.swing.JFormattedTextField();
        porNomeCliente = new javax.swing.JRadioButton();
        nomeCliente = new javax.swing.JTextField();
        porTipoPessoaCliente = new javax.swing.JRadioButton();
        pessoaJuridica = new javax.swing.JRadioButton();
        pessoaFisica = new javax.swing.JRadioButton();
        porTodosClientes = new javax.swing.JRadioButton();
        comboTipoPessoa = new javax.swing.JComboBox<String>();
        jPanel7 = new javax.swing.JPanel();
        porOrdemProducao = new javax.swing.JRadioButton();
        textoOrdemProducao = new javax.swing.JFormattedTextField();
        porOrcamento = new javax.swing.JRadioButton();
        textoOrcamento = new javax.swing.JFormattedTextField();
        porTodosOpOrcamento = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        porCodigoProduto = new javax.swing.JRadioButton();
        porDescricaoProduto = new javax.swing.JRadioButton();
        porTipoProduto = new javax.swing.JRadioButton();
        codigoProduto = new javax.swing.JFormattedTextField();
        descricaoProduto = new javax.swing.JTextField();
        porTodosProdutos = new javax.swing.JRadioButton();
        listaPesquisaProdutos = new javax.swing.JList<String>();
        tipoProduto = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        porEmissor = new javax.swing.JRadioButton();
        comboEmissores = new javax.swing.JComboBox<String>();
        porTodosEmissores = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        periodoFimEmissao = new com.toedter.calendar.JDateChooser();
        porTodosPeriodos = new javax.swing.JRadioButton();
        porDiaEmissao = new javax.swing.JRadioButton();
        diaEmissao = new com.toedter.calendar.JDateChooser();
        porPeriodoEmissao = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        periodoInicioEmissao = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        porDiaEntrega = new javax.swing.JRadioButton();
        diaEntrega = new com.toedter.calendar.JDateChooser();
        periodoFimEntrega = new com.toedter.calendar.JDateChooser();
        porPeriodoEntrega = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        periodoInicioEntrega = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        campoCodigoOp = new javax.swing.JCheckBox();
        campoCodigoOrcamento = new javax.swing.JCheckBox();
        campoEmissor = new javax.swing.JCheckBox();
        campoCodigoCliente = new javax.swing.JCheckBox();
        campoNomeCliente = new javax.swing.JCheckBox();
        campoTipoPessoa = new javax.swing.JCheckBox();
        campoQuantidade = new javax.swing.JCheckBox();
        campoValorParcial = new javax.swing.JCheckBox();
        campoDataEmissao = new javax.swing.JCheckBox();
        campoCodigoProduto = new javax.swing.JCheckBox();
        campoDescricaoProduto = new javax.swing.JCheckBox();
        campoDataEntrega = new javax.swing.JCheckBox();
        campoStatus = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        porCodigoOpCrescente = new javax.swing.JRadioButton();
        porCodigoOpDecrescente = new javax.swing.JRadioButton();
        porQuantidadeCrescente = new javax.swing.JRadioButton();
        porQuantidadeDecrescente = new javax.swing.JRadioButton();
        porEmissorOrdenar = new javax.swing.JRadioButton();
        porTipoPessoaOrdenar = new javax.swing.JRadioButton();
        porValorCrescente = new javax.swing.JRadioButton();
        porValorDecrescente = new javax.swing.JRadioButton();
        porDataEmissaoMaisAtual = new javax.swing.JRadioButton();
        porDataEmissaoMaisAntiga = new javax.swing.JRadioButton();
        semOrdenacao = new javax.swing.JRadioButton();
        porDataEntregaMaisAntiga = new javax.swing.JRadioButton();
        porDataEntregaMaisAtual = new javax.swing.JRadioButton();
        botaoGeraRelatorio = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        orientacaoRetrato = new javax.swing.JRadioButton();
        orientacaoPaisagem = new javax.swing.JRadioButton();

        setTitle("RELATÓRIO DE ORDEM DE PRODUÇÃO");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/producao.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 340));

        jPanel1.setPreferredSize(new java.awt.Dimension(526, 220));

        listaPesquisaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaPesquisaClienteMouseClicked(evt);
            }
        });

        grupoCliente.add(porCodigoCliente);
        porCodigoCliente.setText("POR CÓDIGO:");
        porCodigoCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porCodigoClienteItemStateChanged(evt);
            }
        });

        codigoCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        codigoCliente.setToolTipText("CÓDIGO DO CLIENTE");

        grupoCliente.add(porNomeCliente);
        porNomeCliente.setText("POR NOME:");
        porNomeCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porNomeClienteItemStateChanged(evt);
            }
        });
        porNomeCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porNomeClienteActionPerformed(evt);
            }
        });

        nomeCliente.setToolTipText("NOME DO CLIENTE");
        nomeCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeClienteActionPerformed(evt);
            }
        });
        nomeCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomeClienteKeyReleased(evt);
            }
        });

        grupoCliente.add(porTipoPessoaCliente);
        porTipoPessoaCliente.setText("POR TIPO DE PESSOA:");
        porTipoPessoaCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTipoPessoaClienteItemStateChanged(evt);
            }
        });

        grupoTipoPessoa.add(pessoaJuridica);
        pessoaJuridica.setText("PESSOA JURÍDICA (2/PJ)");

        grupoTipoPessoa.add(pessoaFisica);
        pessoaFisica.setText("PESSOA FÍSICA (1/PF)");

        grupoCliente.add(porTodosClientes);
        porTodosClientes.setText("TODOS");
        porTodosClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosClientesItemStateChanged(evt);
            }
        });

        comboTipoPessoa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 - PESSOA FÍSICA (PF)", "2 - PESSOA JURÍDICA (PJ)" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(porCodigoCliente)
                        .addGap(39, 39, 39)
                        .addComponent(comboTipoPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(codigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porNomeCliente)
                            .addComponent(porTodosClientes))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(180, 180, 180)
                                .addComponent(pessoaJuridica))
                            .addComponent(listaPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(pessoaFisica))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(porTipoPessoaCliente)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboTipoPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(porCodigoCliente)
                    .addComponent(codigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(porNomeCliente)
                        .addGap(76, 76, 76)
                        .addComponent(porTodosClientes))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listaPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pessoaJuridica)
                                    .addComponent(pessoaFisica)))))
                    .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(porTipoPessoaCliente))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {codigoCliente, comboTipoPessoa, porCodigoCliente});

        jTabbedPane1.addTab("CLIENTE", new javax.swing.ImageIcon(getClass().getResource("/icones/cliente.png")), jPanel1); // NOI18N

        grupoOpOrcamento.add(porOrdemProducao);
        porOrdemProducao.setText("ORDEM DE PRODUÇÃO (CÓDIGO)");
        porOrdemProducao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porOrdemProducaoItemStateChanged(evt);
            }
        });

        textoOrdemProducao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        textoOrdemProducao.setToolTipText("CÓDIGO DA ORDEM DE PRODUÇÃO");

        grupoOpOrcamento.add(porOrcamento);
        porOrcamento.setText("ORÇAMENTO BASE (CÓDIGO)");
        porOrcamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porOrcamentoItemStateChanged(evt);
            }
        });

        textoOrcamento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        textoOrcamento.setToolTipText("CÓDIGO DO ORÇAMENTO BASE");

        grupoOpOrcamento.add(porTodosOpOrcamento);
        porTodosOpOrcamento.setText("TODOS");
        porTodosOpOrcamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosOpOrcamentoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porTodosOpOrcamento)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                            .addComponent(porOrcamento)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textoOrcamento, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                            .addComponent(porOrdemProducao)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(textoOrdemProducao, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(395, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {textoOrcamento, textoOrdemProducao});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porOrdemProducao)
                    .addComponent(textoOrdemProducao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porOrcamento)
                    .addComponent(textoOrcamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(porTodosOpOrcamento)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("OP/ORÇAMENTO", new javax.swing.ImageIcon(getClass().getResource("/icones/orçamento.png")), jPanel7); // NOI18N

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        grupoProduto.add(porCodigoProduto);
        porCodigoProduto.setText("POR CÓDIGO");
        porCodigoProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porCodigoProdutoItemStateChanged(evt);
            }
        });
        porCodigoProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                porCodigoProdutoMouseClicked(evt);
            }
        });
        jPanel4.add(porCodigoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 10, -1, -1));

        grupoProduto.add(porDescricaoProduto);
        porDescricaoProduto.setText("POR DESCRIÇÃO");
        porDescricaoProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porDescricaoProdutoItemStateChanged(evt);
            }
        });
        jPanel4.add(porDescricaoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 41, -1, -1));

        grupoProduto.add(porTipoProduto);
        porTipoProduto.setText("POR TIPO");
        porTipoProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTipoProdutoItemStateChanged(evt);
            }
        });
        jPanel4.add(porTipoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 72, -1, -1));

        codigoProduto.setToolTipText("CÓDIGO DO PRODUTO");
        codigoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigoProdutoActionPerformed(evt);
            }
        });
        jPanel4.add(codigoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(133, 11, 137, -1));

        descricaoProduto.setToolTipText("DESCRIÇÃO DO PRODUTO");
        descricaoProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                descricaoProdutoKeyReleased(evt);
            }
        });
        jPanel4.add(descricaoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(133, 42, 360, -1));

        grupoProduto.add(porTodosProdutos);
        porTodosProdutos.setText("TODOS");
        porTodosProdutos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosProdutosItemStateChanged(evt);
            }
        });
        jPanel4.add(porTodosProdutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 100, -1, -1));

        listaPesquisaProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaPesquisaProdutosMouseClicked(evt);
            }
        });
        jPanel4.add(listaPesquisaProdutos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 370, 120));

        tipoProduto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SELECIONE...", "FOLHA", "BLOCO", "LIVRO" }));
        jPanel4.add(tipoProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(133, 73, -1, -1));

        jTabbedPane1.addTab("PRODUTO", new javax.swing.ImageIcon(getClass().getResource("/icones/produto.png")), jPanel4); // NOI18N

        grupoEmissor.add(porEmissor);
        porEmissor.setText("POR EMISSOR");
        porEmissor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porEmissorItemStateChanged(evt);
            }
        });

        grupoEmissor.add(porTodosEmissores);
        porTodosEmissores.setText("TODOS");
        porTodosEmissores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosEmissoresItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(porEmissor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboEmissores, 0, 624, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(porTodosEmissores)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porEmissor)
                    .addComponent(comboEmissores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(porTodosEmissores)
                .addContainerGap(196, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("EMISSOR", new javax.swing.ImageIcon(getClass().getResource("/icones/atendentes.png")), jPanel2); // NOI18N

        periodoFimEmissao.setToolTipText("DIA FINAL");

        grupoPeriodo.add(porTodosPeriodos);
        porTodosPeriodos.setText("TODOS");
        porTodosPeriodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosPeriodosItemStateChanged(evt);
            }
        });
        porTodosPeriodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porTodosPeriodosActionPerformed(evt);
            }
        });

        grupoPeriodo.add(porDiaEmissao);
        porDiaEmissao.setText("POR DIA EMISSÃO");
        porDiaEmissao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porDiaEmissaoItemStateChanged(evt);
            }
        });

        diaEmissao.setToolTipText("DIA EMISSÃO");

        grupoPeriodo.add(porPeriodoEmissao);
        porPeriodoEmissao.setText("POR PERÍODO DATA EMISSÃO");
        porPeriodoEmissao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porPeriodoEmissaoItemStateChanged(evt);
            }
        });

        jLabel1.setText("INICÍO");

        periodoInicioEmissao.setToolTipText("DIA INICIAL");

        jLabel2.setText("FIM");

        grupoPeriodo.add(porDiaEntrega);
        porDiaEntrega.setText("POR DIA ENTREGA");
        porDiaEntrega.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porDiaEntregaItemStateChanged(evt);
            }
        });

        diaEntrega.setToolTipText("DIA ENTREGA");

        periodoFimEntrega.setToolTipText("DIA FINAL");

        grupoPeriodo.add(porPeriodoEntrega);
        porPeriodoEntrega.setText("POR PERÍODO DATA ENTREGA");
        porPeriodoEntrega.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porPeriodoEntregaItemStateChanged(evt);
            }
        });
        porPeriodoEntrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porPeriodoEntregaActionPerformed(evt);
            }
        });

        jLabel3.setText("INICÍO");

        periodoInicioEntrega.setToolTipText("DIA INICIAL");

        jLabel4.setText("FIM");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(porPeriodoEmissao)
                    .addComponent(porPeriodoEntrega)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periodoInicioEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periodoFimEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(periodoInicioEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(porTodosPeriodos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periodoFimEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porDiaEntrega)
                            .addComponent(porDiaEmissao))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(diaEntrega, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diaEmissao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {diaEmissao, diaEntrega, periodoFimEmissao, periodoFimEntrega, periodoInicioEmissao, periodoInicioEntrega});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porDiaEmissao)
                    .addComponent(diaEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porDiaEntrega)
                    .addComponent(diaEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(porPeriodoEmissao)
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(periodoFimEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(periodoInicioEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(9, 9, 9)
                .addComponent(porPeriodoEntrega)
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(periodoFimEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(periodoInicioEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(porTodosPeriodos)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, periodoFimEmissao, periodoInicioEmissao});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, jLabel4, periodoFimEntrega, periodoInicioEntrega});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {diaEmissao, diaEntrega, porDiaEmissao, porDiaEntrega});

        jTabbedPane1.addTab("PERÍODO", new javax.swing.ImageIcon(getClass().getResource("/icones/periodo.png")), jPanel3); // NOI18N

        campoCodigoOp.setText("CÓDIGO OP");
        campoCodigoOp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCodigoOpItemStateChanged(evt);
            }
        });

        campoCodigoOrcamento.setText("CÓDIGO ORÇAMENTO");
        campoCodigoOrcamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCodigoOrcamentoItemStateChanged(evt);
            }
        });

        campoEmissor.setText("EMISSOR");
        campoEmissor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoEmissorItemStateChanged(evt);
            }
        });

        campoCodigoCliente.setText("CÓDIGO DO CLIENTE");

        campoNomeCliente.setText("NOME DO CLIENTE");
        campoNomeCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoNomeClienteItemStateChanged(evt);
            }
        });

        campoTipoPessoa.setText("TIPO DE PESSOA");
        campoTipoPessoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoTipoPessoaItemStateChanged(evt);
            }
        });

        campoQuantidade.setText("QUANTIDADE");
        campoQuantidade.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoQuantidadeItemStateChanged(evt);
            }
        });

        campoValorParcial.setText("VALOR PARCIAL");
        campoValorParcial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoValorParcialItemStateChanged(evt);
            }
        });

        campoDataEmissao.setText("DATA EMISSÃO");
        campoDataEmissao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoDataEmissaoItemStateChanged(evt);
            }
        });

        campoCodigoProduto.setText("CÓDIGO PRODUTO");

        campoDescricaoProduto.setText("DESCRIÇÃO DO PRODUTO");

        campoDataEntrega.setText("DATA ENTREGA");
        campoDataEntrega.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoDataEntregaItemStateChanged(evt);
            }
        });

        campoStatus.setText("STATUS");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoQuantidade)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoCodigoOp)
                            .addComponent(campoCodigoCliente)
                            .addComponent(campoCodigoProduto)
                            .addComponent(campoDescricaoProduto)
                            .addComponent(campoCodigoOrcamento)
                            .addComponent(campoTipoPessoa))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoStatus)
                            .addComponent(campoDataEmissao)
                            .addComponent(campoValorParcial)
                            .addComponent(campoNomeCliente)
                            .addComponent(campoDataEntrega)
                            .addComponent(campoEmissor))))
                .addContainerGap(425, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(campoCodigoOp)
                        .addGap(0, 0, 0)
                        .addComponent(campoCodigoOrcamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoCodigoCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoCodigoProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoDescricaoProduto))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(campoValorParcial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoDataEmissao)
                        .addGap(0, 0, 0)
                        .addComponent(campoDataEntrega)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoEmissor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoNomeCliente)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoTipoPessoa)
                    .addComponent(campoStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoQuantidade)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CAMPOS", new javax.swing.ImageIcon(getClass().getResource("/icones/campos.png")), jPanel6); // NOI18N

        grupoOrdenar.add(porCodigoOpCrescente);
        porCodigoOpCrescente.setText("POR CÓDIGO OP CRESCENTE");

        grupoOrdenar.add(porCodigoOpDecrescente);
        porCodigoOpDecrescente.setText("POR CÓDIGO OP DECRESCENTE");

        grupoOrdenar.add(porQuantidadeCrescente);
        porQuantidadeCrescente.setText("POR QUANTIDADE CRESCENTE");
        porQuantidadeCrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porQuantidadeCrescenteActionPerformed(evt);
            }
        });

        grupoOrdenar.add(porQuantidadeDecrescente);
        porQuantidadeDecrescente.setText("POR QUANTIDADE DECRESCENTE");
        porQuantidadeDecrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porQuantidadeDecrescenteActionPerformed(evt);
            }
        });

        grupoOrdenar.add(porEmissorOrdenar);
        porEmissorOrdenar.setText("POR EMISSOR");

        grupoOrdenar.add(porTipoPessoaOrdenar);
        porTipoPessoaOrdenar.setText("POR TIPO DE PESSOA");

        grupoOrdenar.add(porValorCrescente);
        porValorCrescente.setText("POR VALOR CRESCENTE");

        grupoOrdenar.add(porValorDecrescente);
        porValorDecrescente.setText("POR VALOR DECRESCENTE");

        grupoOrdenar.add(porDataEmissaoMaisAtual);
        porDataEmissaoMaisAtual.setText("POR DATA EMISSÃO MAIS ATUAL");

        grupoOrdenar.add(porDataEmissaoMaisAntiga);
        porDataEmissaoMaisAntiga.setText("POR DATA EMISSÃO MAIS ANTIGA");
        porDataEmissaoMaisAntiga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porDataEmissaoMaisAntigaActionPerformed(evt);
            }
        });

        grupoOrdenar.add(semOrdenacao);
        semOrdenacao.setText("SEM ORDENAÇÃO");

        grupoOrdenar.add(porDataEntregaMaisAntiga);
        porDataEntregaMaisAntiga.setText("POR DATA ENTREGA MAIS ANTIGA");

        grupoOrdenar.add(porDataEntregaMaisAtual);
        porDataEntregaMaisAtual.setText("POR DATA ENTREGA MAIS ATUAL");

        botaoGeraRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        botaoGeraRelatorio.setText("GERAR RELATÓRIO");
        botaoGeraRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGeraRelatorioActionPerformed(evt);
            }
        });

        jLabel6.setText("ORIENTAÇÃO:");

        grupoOrientacao.add(orientacaoRetrato);
        orientacaoRetrato.setText("RETRATO");

        grupoOrientacao.add(orientacaoPaisagem);
        orientacaoPaisagem.setText("PAISAGEM");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porValorCrescente)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(porEmissorOrdenar)
                                    .addComponent(porTipoPessoaOrdenar)
                                    .addComponent(porCodigoOpDecrescente)
                                    .addComponent(porQuantidadeCrescente)
                                    .addComponent(porQuantidadeDecrescente)
                                    .addComponent(porCodigoOpCrescente))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(semOrdenacao)
                                    .addComponent(porDataEmissaoMaisAntiga)
                                    .addComponent(porDataEmissaoMaisAtual)
                                    .addComponent(porDataEntregaMaisAntiga)
                                    .addComponent(porDataEntregaMaisAtual)
                                    .addComponent(porValorDecrescente))))
                        .addGap(111, 292, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botaoGeraRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orientacaoRetrato)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orientacaoPaisagem)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porCodigoOpCrescente)
                    .addComponent(porValorDecrescente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(porCodigoOpDecrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porQuantidadeCrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porQuantidadeDecrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porEmissorOrdenar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porTipoPessoaOrdenar))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(porDataEmissaoMaisAtual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porDataEmissaoMaisAntiga)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porDataEntregaMaisAtual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porDataEntregaMaisAntiga)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(semOrdenacao)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porValorCrescente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(orientacaoRetrato)
                    .addComponent(orientacaoPaisagem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoGeraRelatorio)
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel6, orientacaoPaisagem, orientacaoRetrato});

        jTabbedPane1.addTab("ORDENAR", new javax.swing.ImageIcon(getClass().getResource("/icones/ordenar.png")), jPanel5); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void porCodigoClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porCodigoClienteItemStateChanged
        if (porCodigoCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNomeCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoaCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porCodigoClienteItemStateChanged

    private void porNomeClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porNomeClienteItemStateChanged
        if (porCodigoCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNomeCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoaCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porNomeClienteItemStateChanged

    private void porNomeClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porNomeClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porNomeClienteActionPerformed

    private void nomeClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomeClienteKeyReleased
        new Thread() {
            @Override
            public void run() {
                try {
                    listaPesquisaCliente.setModel(model);
                    model.removeAllElements();

                    for (String cliente : ClienteDAO.retornaPesquisaClientesAproximada(nomeCliente.getText())) {
                        model.addElement(cliente);
                    }

                    if (model.isEmpty()) {
                        listaPesquisaCliente.setVisible(false);
                    } else {
                        listaPesquisaCliente.setVisible(true);
                    }
                } catch (SQLException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                }
            }
        }.start();
    }//GEN-LAST:event_nomeClienteKeyReleased

    private void listaPesquisaClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisaClienteMouseClicked
        nomeCliente.setText(listaPesquisaCliente.getSelectedValue().toString());
        new Thread() {
            @Override
            public void run() {
                try {
                    cliente = ClienteDAO.retornaTipoCodClienteRelatorio(listaPesquisaCliente.getSelectedValue().toString());
                    listaPesquisaCliente.setVisible(false);
                } catch (SQLException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                }
            }
        }.start();
    }//GEN-LAST:event_listaPesquisaClienteMouseClicked

    private void porTipoPessoaClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTipoPessoaClienteItemStateChanged
        if (porCodigoCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNomeCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoaCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
            pessoaFisica.setSelected(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porTipoPessoaClienteItemStateChanged

    private void porTodosClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosClientesItemStateChanged
        if (porCodigoCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNomeCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoaCliente.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosClientesItemStateChanged

    private void porOrdemProducaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porOrdemProducaoItemStateChanged
        if (porOrdemProducao.isSelected() == true) {
            textoOrdemProducao.setEnabled(true);
            textoOrcamento.setEnabled(false);
        } else if (porOrcamento.isSelected() == true) {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(true);
        } else {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(false);
        }
    }//GEN-LAST:event_porOrdemProducaoItemStateChanged

    private void porOrcamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porOrcamentoItemStateChanged
        if (porOrdemProducao.isSelected() == true) {
            textoOrdemProducao.setEnabled(true);
            textoOrcamento.setEnabled(false);
        } else if (porOrcamento.isSelected() == true) {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(true);
        } else {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(false);
        }
    }//GEN-LAST:event_porOrcamentoItemStateChanged

    private void porTodosOpOrcamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosOpOrcamentoItemStateChanged
        if (porOrdemProducao.isSelected() == true) {
            textoOrdemProducao.setEnabled(true);
            textoOrcamento.setEnabled(false);
        } else if (porOrcamento.isSelected() == true) {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(true);
        } else {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosOpOrcamentoItemStateChanged

    private void porEmissorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porEmissorItemStateChanged
        if (porEmissor.isSelected() == true) {
            comboEmissores.setEnabled(true);
        } else {
            comboEmissores.setEnabled(false);
        }
    }//GEN-LAST:event_porEmissorItemStateChanged

    private void porTodosEmissoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosEmissoresItemStateChanged
        if (porEmissor.isSelected() == true) {
            comboEmissores.setEnabled(true);
        } else {
            comboEmissores.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosEmissoresItemStateChanged

    private void porTodosPeriodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosPeriodosItemStateChanged
        if (porTodosPeriodos.isSelected() == true) {
            diaEmissao.setEnabled(false);
            diaEntrega.setEnabled(false);
            periodoInicioEmissao.setEnabled(false);
            periodoFimEmissao.setEnabled(false);
            periodoInicioEntrega.setEnabled(false);
            periodoFimEntrega.setEnabled(false);

        }
    }//GEN-LAST:event_porTodosPeriodosItemStateChanged

    private void porDiaEmissaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porDiaEmissaoItemStateChanged
        if (porDiaEmissao.isSelected() == true) {
            diaEmissao.setEnabled(true);
            diaEntrega.setEnabled(false);
            periodoInicioEmissao.setEnabled(false);
            periodoFimEmissao.setEnabled(false);
            periodoInicioEntrega.setEnabled(false);
            periodoFimEntrega.setEnabled(false);

        }
    }//GEN-LAST:event_porDiaEmissaoItemStateChanged

    private void porPeriodoEmissaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porPeriodoEmissaoItemStateChanged
        if (porPeriodoEmissao.isSelected() == true) {
            diaEmissao.setEnabled(false);
            diaEntrega.setEnabled(false);
            periodoInicioEmissao.setEnabled(true);
            periodoFimEmissao.setEnabled(true);
            periodoInicioEntrega.setEnabled(false);
            periodoFimEntrega.setEnabled(false);

        }
    }//GEN-LAST:event_porPeriodoEmissaoItemStateChanged

    private void porQuantidadeCrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porQuantidadeCrescenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porQuantidadeCrescenteActionPerformed

    private void porQuantidadeDecrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porQuantidadeDecrescenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porQuantidadeDecrescenteActionPerformed

    private void campoCodigoOpItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCodigoOpItemStateChanged
        if (campoCodigoOp.isSelected() == true) {
            porCodigoOpCrescente.setEnabled(true);
            porCodigoOpDecrescente.setEnabled(true);
        } else {
            porCodigoOpCrescente.setEnabled(false);
            porCodigoOpDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoCodigoOpItemStateChanged

    private void campoCodigoOrcamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCodigoOrcamentoItemStateChanged

    }//GEN-LAST:event_campoCodigoOrcamentoItemStateChanged

    private void campoEmissorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoEmissorItemStateChanged
        if (campoEmissor.isSelected() == true) {
            porEmissorOrdenar.setEnabled(true);
        } else {
            porEmissorOrdenar.setEnabled(false);
        }
    }//GEN-LAST:event_campoEmissorItemStateChanged

    private void campoTipoPessoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoTipoPessoaItemStateChanged
        if (campoTipoPessoa.isSelected() == true) {
            porTipoPessoaOrdenar.setEnabled(true);
        } else {
            porTipoPessoaOrdenar.setEnabled(false);
        }
    }//GEN-LAST:event_campoTipoPessoaItemStateChanged

    private void campoQuantidadeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoQuantidadeItemStateChanged
        if (campoQuantidade.isSelected() == true) {
            porQuantidadeCrescente.setEnabled(true);
            porQuantidadeDecrescente.setEnabled(true);
        } else {
            porQuantidadeCrescente.setEnabled(false);
            porQuantidadeDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoQuantidadeItemStateChanged

    private void campoValorParcialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoValorParcialItemStateChanged
        if (campoValorParcial.isSelected() == true) {
            porValorCrescente.setEnabled(true);
            porValorDecrescente.setEnabled(true);
        } else {
            porValorCrescente.setEnabled(false);
            porValorDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoValorParcialItemStateChanged

    private void campoDataEmissaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoDataEmissaoItemStateChanged
        if (campoDataEmissao.isSelected() == true) {
            porDataEmissaoMaisAntiga.setEnabled(true);
            porDataEmissaoMaisAtual.setEnabled(true);
        } else {
            porDataEmissaoMaisAntiga.setEnabled(false);
            porDataEmissaoMaisAtual.setEnabled(false);
        }
    }//GEN-LAST:event_campoDataEmissaoItemStateChanged

    private void codigoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigoProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codigoProdutoActionPerformed

    private void campoDataEntregaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoDataEntregaItemStateChanged
        if (campoDataEntrega.isSelected() == true) {
            porDataEntregaMaisAntiga.setEnabled(true);
            porDataEntregaMaisAtual.setEnabled(true);
        } else {
            porDataEntregaMaisAntiga.setEnabled(false);
            porDataEntregaMaisAtual.setEnabled(false);
        }
    }//GEN-LAST:event_campoDataEntregaItemStateChanged

    private void nomeClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeClienteActionPerformed

    private void listaPesquisaProdutosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisaProdutosMouseClicked
        descricaoProduto.setText(listaPesquisaProdutos.getSelectedValue().toString());
        new Thread() {
            @Override
            public void run() {
                try {
                    produto = ProdutoDAO.retornaProdutoRelatorio(listaPesquisaProdutos.getSelectedValue().toString());
                    listaPesquisaProdutos.setVisible(false);
                } catch (SQLException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                }
            }
        }.start();
    }//GEN-LAST:event_listaPesquisaProdutosMouseClicked

    private void porTodosPeriodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porTodosPeriodosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porTodosPeriodosActionPerformed

    private void porDiaEntregaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porDiaEntregaItemStateChanged
        if (porDiaEntrega.isSelected() == true) {
            diaEmissao.setEnabled(false);
            diaEntrega.setEnabled(true);
            periodoInicioEmissao.setEnabled(false);
            periodoFimEmissao.setEnabled(false);
            periodoInicioEntrega.setEnabled(false);
            periodoFimEntrega.setEnabled(false);

        }
    }//GEN-LAST:event_porDiaEntregaItemStateChanged

    private void porPeriodoEntregaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porPeriodoEntregaItemStateChanged
        if (porPeriodoEntrega.isSelected() == true) {
            diaEmissao.setEnabled(false);
            diaEntrega.setEnabled(false);
            periodoInicioEmissao.setEnabled(false);
            periodoFimEmissao.setEnabled(false);
            periodoInicioEntrega.setEnabled(true);
            periodoFimEntrega.setEnabled(true);

        }
    }//GEN-LAST:event_porPeriodoEntregaItemStateChanged

    private void porPeriodoEntregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porPeriodoEntregaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porPeriodoEntregaActionPerformed

    private void porDataEmissaoMaisAntigaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porDataEmissaoMaisAntigaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porDataEmissaoMaisAntigaActionPerformed

    private void descricaoProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descricaoProdutoKeyReleased
        new Thread() {
            @Override
            public void run() {
                try {
                    listaPesquisaProdutos.setModel(model);
                    model.removeAllElements();

                    for (String descricao : ProdutoDAO.retornaPesquisaProdutosAproximada(descricaoProduto.getText())) {
                        model.addElement(descricao);
                    }

                    if (model.isEmpty()) {
                        listaPesquisaProdutos.setVisible(false);
                    } else {
                        listaPesquisaProdutos.setVisible(true);
                    }
                } catch (SQLException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                }
            }
        }.start();
    }//GEN-LAST:event_descricaoProdutoKeyReleased

    private void porCodigoProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_porCodigoProdutoMouseClicked

    }//GEN-LAST:event_porCodigoProdutoMouseClicked

    private void porCodigoProdutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porCodigoProdutoItemStateChanged
        if (porCodigoProduto.isSelected()) {
            codigoProduto.setEnabled(true);
            descricaoProduto.setEnabled(false);
            listaPesquisaProdutos.setVisible(false);
            tipoProduto.setEnabled(false);
        }
    }//GEN-LAST:event_porCodigoProdutoItemStateChanged

    private void porDescricaoProdutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porDescricaoProdutoItemStateChanged
        if (porDescricaoProduto.isSelected()) {
            codigoProduto.setEnabled(false);
            descricaoProduto.setEnabled(true);
            listaPesquisaProdutos.setVisible(false);
            tipoProduto.setEnabled(false);
        }
    }//GEN-LAST:event_porDescricaoProdutoItemStateChanged

    private void porTipoProdutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTipoProdutoItemStateChanged
        if (porTipoProduto.isSelected()) {
            codigoProduto.setEnabled(false);
            descricaoProduto.setEnabled(false);
            listaPesquisaProdutos.setVisible(false);
            tipoProduto.setEnabled(true);
        }
    }//GEN-LAST:event_porTipoProdutoItemStateChanged

    private void porTodosProdutosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosProdutosItemStateChanged
        if (porTodosProdutos.isSelected()) {
            codigoProduto.setEnabled(false);
            descricaoProduto.setEnabled(false);
            listaPesquisaProdutos.setVisible(false);
            tipoProduto.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosProdutosItemStateChanged

    private void campoNomeClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoNomeClienteItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNomeClienteItemStateChanged

    private void botaoGeraRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGeraRelatorioActionPerformed
        new Thread() {
            @Override
            public void run() {
                if (verificaCondicoes()) {
                    geraRelatorio();
                }
            }
        }.start();
    }//GEN-LAST:event_botaoGeraRelatorioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGeraRelatorio;
    private javax.swing.JCheckBox campoCodigoCliente;
    private javax.swing.JCheckBox campoCodigoOp;
    private javax.swing.JCheckBox campoCodigoOrcamento;
    private javax.swing.JCheckBox campoCodigoProduto;
    private javax.swing.JCheckBox campoDataEmissao;
    private javax.swing.JCheckBox campoDataEntrega;
    private javax.swing.JCheckBox campoDescricaoProduto;
    private javax.swing.JCheckBox campoEmissor;
    private javax.swing.JCheckBox campoNomeCliente;
    private javax.swing.JCheckBox campoQuantidade;
    private javax.swing.JCheckBox campoStatus;
    private javax.swing.JCheckBox campoTipoPessoa;
    private javax.swing.JCheckBox campoValorParcial;
    private javax.swing.JFormattedTextField codigoCliente;
    private javax.swing.JFormattedTextField codigoProduto;
    private javax.swing.JComboBox<String> comboEmissores;
    private javax.swing.JComboBox<String> comboTipoPessoa;
    private javax.swing.JTextField descricaoProduto;
    private com.toedter.calendar.JDateChooser diaEmissao;
    private com.toedter.calendar.JDateChooser diaEntrega;
    private javax.swing.ButtonGroup grupoCliente;
    private javax.swing.ButtonGroup grupoEmissor;
    private javax.swing.ButtonGroup grupoOpOrcamento;
    private javax.swing.ButtonGroup grupoOrdenar;
    private javax.swing.ButtonGroup grupoOrientacao;
    private javax.swing.ButtonGroup grupoPeriodo;
    private javax.swing.ButtonGroup grupoProduto;
    private javax.swing.ButtonGroup grupoTipoPessoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> listaPesquisaCliente;
    private javax.swing.JList<String> listaPesquisaProdutos;
    private javax.swing.JTextField nomeCliente;
    private javax.swing.JRadioButton orientacaoPaisagem;
    private javax.swing.JRadioButton orientacaoRetrato;
    private com.toedter.calendar.JDateChooser periodoFimEmissao;
    private com.toedter.calendar.JDateChooser periodoFimEntrega;
    private com.toedter.calendar.JDateChooser periodoInicioEmissao;
    private com.toedter.calendar.JDateChooser periodoInicioEntrega;
    private javax.swing.JRadioButton pessoaFisica;
    private javax.swing.JRadioButton pessoaJuridica;
    private javax.swing.JRadioButton porCodigoCliente;
    private javax.swing.JRadioButton porCodigoOpCrescente;
    private javax.swing.JRadioButton porCodigoOpDecrescente;
    private javax.swing.JRadioButton porCodigoProduto;
    private javax.swing.JRadioButton porDataEmissaoMaisAntiga;
    private javax.swing.JRadioButton porDataEmissaoMaisAtual;
    private javax.swing.JRadioButton porDataEntregaMaisAntiga;
    private javax.swing.JRadioButton porDataEntregaMaisAtual;
    private javax.swing.JRadioButton porDescricaoProduto;
    private javax.swing.JRadioButton porDiaEmissao;
    private javax.swing.JRadioButton porDiaEntrega;
    private javax.swing.JRadioButton porEmissor;
    private javax.swing.JRadioButton porEmissorOrdenar;
    private javax.swing.JRadioButton porNomeCliente;
    private javax.swing.JRadioButton porOrcamento;
    private javax.swing.JRadioButton porOrdemProducao;
    private javax.swing.JRadioButton porPeriodoEmissao;
    private javax.swing.JRadioButton porPeriodoEntrega;
    private javax.swing.JRadioButton porQuantidadeCrescente;
    private javax.swing.JRadioButton porQuantidadeDecrescente;
    private javax.swing.JRadioButton porTipoPessoaCliente;
    private javax.swing.JRadioButton porTipoPessoaOrdenar;
    private javax.swing.JRadioButton porTipoProduto;
    private javax.swing.JRadioButton porTodosClientes;
    private javax.swing.JRadioButton porTodosEmissores;
    private javax.swing.JRadioButton porTodosOpOrcamento;
    private javax.swing.JRadioButton porTodosPeriodos;
    private javax.swing.JRadioButton porTodosProdutos;
    private javax.swing.JRadioButton porValorCrescente;
    private javax.swing.JRadioButton porValorDecrescente;
    private javax.swing.JRadioButton semOrdenacao;
    private javax.swing.JFormattedTextField textoOrcamento;
    private javax.swing.JFormattedTextField textoOrdemProducao;
    private javax.swing.JComboBox tipoProduto;
    // End of variables declaration//GEN-END:variables

    //GERA RELATÓRIO
    public int retornaQtdSelecionada() {
        quantidadeSelecionada = 0;

        if (campoCodigoOp.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoCodigoOrcamento.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoCodigoCliente.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoCodigoProduto.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoDescricaoProduto.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoTipoPessoa.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoQuantidade.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoValorParcial.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoDataEmissao.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoDataEntrega.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoEmissor.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if (campoNomeCliente.isSelected()) {
            quantidadeSelecionada += 1;
        }
        if(campoStatus.isSelected()){
            quantidadeSelecionada += 1;
        }

        return quantidadeSelecionada;
    }

    public PdfPTable retornaTabela() {
        int qtdSelecionada = retornaQtdSelecionada();
        PdfPTable retorno = null;
        PdfPCell celula = null;

        switch (qtdSelecionada) {
            case 1:
                retorno = new PdfPTable(new float[]{5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 2:
                retorno = new PdfPTable(new float[]{5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 3:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 4:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 5:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 6:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 7:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 8:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 9:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 10:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 11:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 12:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 13:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
                retorno.setWidthPercentage(100);

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("CÓDIGO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase("DESCRIÇÃO PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase("QUANTIDADE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("VALOR PARCIAL", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA EMISSÃO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase("DATA ENTREGA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoStatus.isSelected()) {
                    celula = new PdfPCell(new Phrase("STATUS", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
        }
        return retorno;
    }

    public PdfPTable retornaTabelaComConteudo() {
        try {
            PdfPTable retorno = retornaTabela();
            PdfPCell celula = null;

            /*
             @param tipoCondicaoCliente
             1 - codigo
             2 - nome
             3 - tipoPessoa
             4 - todos
             */
            byte tipoCondicaoCliente = 0;
            if (porCodigoCliente.isSelected()) {
                tipoCondicaoCliente = 1;
                cliente = new Cliente();
                cliente.setTipoPessoa((byte) Byte.valueOf(comboTipoPessoa.getSelectedItem().toString().substring(0, 1)));
                cliente.setCodigo(Integer.valueOf(codigoCliente.getText()));
            } else if (porNomeCliente.isSelected()) {
                tipoCondicaoCliente = 2;
            } else if (porTipoPessoaCliente.isSelected()) {
                cliente = new Cliente();
                tipoCondicaoCliente = 3;
                if (pessoaFisica.isSelected()) {
                    cliente.setTipoPessoa((byte) 1);
                } else {
                    cliente.setTipoPessoa((byte) 2);
                }
            } else if (porTodosClientes.isSelected()) {
                tipoCondicaoCliente = 4;
            }

            /*
             @param tipoCondicaoOpOrcamento
             1 - codigo op
             2 - codigo orcamento base
             3 - todos
             */
            int textoOpOrcamento = 0;
            byte tipoCondicaoOpOrcamento = 0;
            if (porOrdemProducao.isSelected()) {
                tipoCondicaoOpOrcamento = 1;
                textoOpOrcamento = Integer.valueOf(textoOrdemProducao.getText());
            } else if (porOrcamento.isSelected()) {
                tipoCondicaoOpOrcamento = 2;
                textoOpOrcamento = Integer.valueOf(textoOrcamento.getText());
            } else if (porTodosOpOrcamento.isSelected()) {
                tipoCondicaoOpOrcamento = 3;
            }
            /*
             @param tipoCondicaoProduto
             1 - codigo
             2 - descricao
             3 - tipo
             4 - todos
             */
            byte tipoCondicaoProduto = 0;
            if (porCodigoProduto.isSelected()) {
                tipoCondicaoProduto = 1;
                produto = new Produto();
                produto.setCodigo(Integer.valueOf(codigoProduto.getText()));
            } else if (porDescricaoProduto.isSelected()) {
                tipoCondicaoProduto = 2;
                produto.setDescricao(descricaoProduto.getText());
            } else if (porTipoProduto.isSelected()) {
                tipoCondicaoProduto = 3;
                produto = new Produto();
                produto.setTipo(tipoProduto.getSelectedItem().toString());
            } else if (porTodosProdutos.isSelected()) {
                tipoCondicaoProduto = 4;
            }
            /*
             @param tipoCondicaoEmissor
             1 - por emissor
             2 - todos
             */
            String textoEmissor = null;
            byte tipoCondicaoEmissor = 0;
            if (porEmissor.isSelected()) {
                tipoCondicaoEmissor = 1;
                textoEmissor = comboEmissores.getSelectedItem().toString().substring(0, 3);
            } else if (porTodosEmissores.isSelected()) {
                tipoCondicaoEmissor = 2;
            }
            /*
             @param tipoCondicaoPeriodo
             1 - por dia emissao
             2 - por dia entrega
             3 - por periodo data emissao
             4 - por periodo data entrega
             5 - todos
             */
            Date textoPeriodoInicio = null;
            Date textoPeriodoFim = null;
            byte tipoCondicaoPeriodo = 0;
            if (porDiaEmissao.isSelected()) {
                tipoCondicaoPeriodo = 1;
                textoPeriodoInicio = new java.sql.Date(diaEmissao.getDate().getTime());
            } else if (porDiaEntrega.isSelected()) {
                tipoCondicaoPeriodo = 2;
                textoPeriodoInicio = new java.sql.Date(diaEntrega.getDate().getTime());
            } else if (porPeriodoEmissao.isSelected()) {
                tipoCondicaoPeriodo = 3;
                textoPeriodoInicio = new java.sql.Date(periodoInicioEmissao.getDate().getTime());
                textoPeriodoFim = new java.sql.Date(periodoFimEmissao.getDate().getTime());
            } else if (porPeriodoEntrega.isSelected()) {
                tipoCondicaoPeriodo = 4;
                textoPeriodoInicio = new java.sql.Date(periodoInicioEntrega.getDate().getTime());
                textoPeriodoFim = new java.sql.Date(periodoFimEntrega.getDate().getTime());
            } else if (porTodosPeriodos.isSelected()) {
                tipoCondicaoPeriodo = 5;
            }
            /*
             @param tipoCondicaoOrdenar
             1 - codigo op crescente
             2 - codigo op decrescente
             3 - quantidade crescente
             4 - quantidade decrescente
             5 - emissor
             6 - tipoPessoa
             7 - valor crescente
             8 - valor decrescente
             9 - data emissao mais atual
             10 - data emissao mais antiga
             11 - data entrega mais atual
             12 - data entrega mais antiga
             13 - sem ordenacao
             */
            byte tipoCondicaoOrdenar = 0;
            if (porCodigoOpCrescente.isSelected()) {
                tipoCondicaoOrdenar = 1;
            } else if (porCodigoOpDecrescente.isSelected()) {
                tipoCondicaoOrdenar = 2;
            } else if (porQuantidadeCrescente.isSelected()) {
                tipoCondicaoOrdenar = 3;
            } else if (porQuantidadeDecrescente.isSelected()) {
                tipoCondicaoOrdenar = 4;
            } else if (porEmissorOrdenar.isSelected()) {
                tipoCondicaoOrdenar = 5;
            } else if (porTipoPessoaOrdenar.isSelected()) {
                tipoCondicaoOrdenar = 6;
            } else if (porValorCrescente.isSelected()) {
                tipoCondicaoOrdenar = 7;
            } else if (porValorDecrescente.isSelected()) {
                tipoCondicaoOrdenar = 8;
            } else if (porDataEmissaoMaisAtual.isSelected()) {
                tipoCondicaoOrdenar = 9;
            } else if (porDataEmissaoMaisAntiga.isSelected()) {
                tipoCondicaoOrdenar = 10;
            } else if (porDataEntregaMaisAtual.isSelected()) {
                tipoCondicaoOrdenar = 11;
            } else if (porDataEntregaMaisAntiga.isSelected()) {
                tipoCondicaoOrdenar = 12;
            } else if (semOrdenacao.isSelected()) {
                tipoCondicaoOrdenar = 13;
            }

            DecimalFormat df = new DecimalFormat("###,##0.00");
            for (OrdemProducao op : RelatoriosOrdemProducaoDAO.retornaConteudoRelatorioOrdemProducao(campoCodigoOp.isSelected(),
                    campoCodigoOrcamento.isSelected(),
                    campoCodigoCliente.isSelected(),
                    campoCodigoProduto.isSelected(),
                    campoDescricaoProduto.isSelected(),
                    campoTipoPessoa.isSelected(),
                    campoQuantidade.isSelected(),
                    campoValorParcial.isSelected(),
                    campoDataEmissao.isSelected(),
                    campoDataEntrega.isSelected(),
                    campoEmissor.isSelected(),
                    campoNomeCliente.isSelected(),
                    campoStatus.isSelected(),
                    tipoCondicaoCliente,
                    tipoCondicaoOpOrcamento,
                    tipoCondicaoProduto,
                    tipoCondicaoEmissor,
                    tipoCondicaoPeriodo,
                    tipoCondicaoOrdenar,
                    textoOpOrcamento,
                    textoEmissor,
                    textoPeriodoInicio,
                    textoPeriodoFim,
                    cliente,
                    produto)) {

                if (campoCodigoOp.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(op.getCodigo()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(op.getOrcBase()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(op.getCodCliente()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }

                if (campoCodigoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(op.getCodProduto()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDescricaoProduto.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(ProdutoDAO.retornaDescricaoProduto(op.getCodProduto(), op.getTipoProduto())), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    celula = new PdfPCell(new Phrase(op.getTipoPessoa() == 1 ? "PF" : "PJ", FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidade.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(op.getQuantidade()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValorParcial.isSelected()) {
                    celula = new PdfPCell(new Phrase("R$ " + df.format(op.getValorParcial()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEmissao.isSelected()) {
                    celula = new PdfPCell(new Phrase(Controle.dataPadrao.format(op.getDataEmissao()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoDataEntrega.isSelected()) {
                    celula = new PdfPCell(new Phrase(Controle.dataPadrao.format(op.getDataEntrega()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected()) {
                    celula = new PdfPCell(new Phrase(op.getCodEmissor(), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase(ClienteDAO.retornaNomeCliente(op.getCodCliente(), op.getTipoPessoa()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if(campoStatus.isSelected()){
                    celula = new PdfPCell(new Phrase(op.getStatus(), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
            }
            return retorno;
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
            return null;
        } catch (ConsultaSemResultadoException ex) {
            throw new ConsultaSemResultadoException();
        }
    }

    /*
     1 - ORCAMENTO
     */
    public void geraRelatorio() {

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4, 30, 20, 20, 30);

        new Thread() {
            @Override
            public void run() {

                loading.setText("GERANDO RELATÓRIO...");
                loading.setVisible(true);

                String hora = Controle.horaPadraoDiretorio.format(new java.util.Date());
                String data = Controle.dataPadraoDiretorio.format(new java.util.Date());

                try {
                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempUnix + data + hora + ".pdf"));
                    }

                    document.setMargins(20, 20, 20, 20);
                    if (orientacaoRetrato.isSelected()) {
                        document.setPageSize(PageSize.A4);
                    } else {
                        document.setPageSize(PageSize.A4.rotate());
                    }

                    document.open();
                    document.addAuthor(TelaAutenticacao.getUsrLogado().getNome());
                    document.addCreator(TelaAutenticacao.getUsrLogado().getNome());

                    document.add(new Paragraph(new Phrase("RELATÓRIO DE ORDEM DE PRODUÇÃO - "
                            + "DATA E HORA DE EMISSÃO: "
                            + data
                            + " "
                            + hora
                            + " - SISGRAFEX\n\n", FontFactory.getFont("arial.ttf", 9))));

                    PdfPTable tabelaPrincipal = retornaTabelaComConteudo();
                    document.add(tabelaPrincipal);

                    document.close();

                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempUnix + data + hora + ".pdf"));
                    }

                } catch (FileNotFoundException | ConsultaSemResultadoException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                } catch (DocumentException | IOException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                    return;
                }

                loading.setVisible(false);

            }
        }.start();
    }

    //ESTADOS
    public void estado1() {
        //cliente
        porTodosClientes.setSelected(true);
        listaPesquisaCliente.setVisible(false);
        //op orcamento
        porTodosOpOrcamento.setSelected(true);
        //produtos
        porTodosProdutos.setSelected(true);
        listaPesquisaProdutos.setVisible(false);
        //emissor
        porTodosEmissores.setSelected(true);
        //periodo
        porTodosPeriodos.setSelected(true);
        //ordenar
        semOrdenacao.setSelected(true);
        porCodigoOpCrescente.setEnabled(false);
        porCodigoOpDecrescente.setEnabled(false);
        porTipoPessoaOrdenar.setEnabled(false);
        porQuantidadeCrescente.setEnabled(false);
        porQuantidadeDecrescente.setEnabled(false);
        porEmissorOrdenar.setEnabled(false);
        porValorCrescente.setEnabled(false);
        porValorDecrescente.setEnabled(false);
        porDataEmissaoMaisAtual.setEnabled(false);
        porDataEmissaoMaisAntiga.setEnabled(false);
        porDataEntregaMaisAtual.setEnabled(false);
        porDataEntregaMaisAntiga.setEnabled(false);
        //orientacao
        orientacaoRetrato.setSelected(true);
    }

    //CONDIÇÕES
    public Boolean verificaCondicoes() {
        if (retornaQtdSelecionada() == 0) {
            JOptionPane.showMessageDialog(null, "NENHUM CAMPO SELECIONADO.\nSELECIONE UM OU MAIS CAMPOS E TENTE NOVAMENTE.", "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //CLIENTE
        if (porCodigoCliente.isSelected()) {
            if (codigoCliente.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA CÓDIGO DO CLIENTE", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porNomeCliente.isSelected()) {
            if (nomeCliente.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA NOME DO CLIENTE", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        //OP/ORÇAMENTO
        if (porOrdemProducao.isSelected()) {
            if (textoOrdemProducao.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA CÓDIGO DA ORDEM DE PRODUÇÃO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porOrcamento.isSelected()) {
            JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA CÓDIGO DO ORÇAMENTO BASE", "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //PRODUTO
        if (porCodigoProduto.isSelected()) {
            if (codigoProduto.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA CÓDIGO DO PRODUTO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porDescricaoProduto.isSelected()) {
            if (descricaoProduto.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DESCRIÇÃO DO PRODUTO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        //PERÍODO
        if (porDiaEmissao.isSelected()) {
            if (diaEmissao.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA EMISSÃO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porDiaEntrega.isSelected()) {
            if (diaEntrega.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA ENTREGA", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porPeriodoEmissao.isSelected()) {
            if (periodoInicioEmissao.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA INÍCIO DATA EMISSÃO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (periodoFimEmissao.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA FIM DATA EMISSÃO", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if (porPeriodoEntrega.isSelected()) {
            if (periodoInicioEntrega.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA INÍCIO DATA ENTREGA", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            if (periodoFimEntrega.getDate().toString().isEmpty()) {
                JOptionPane.showMessageDialog(null, "INSIRA UM VALOR PARA DIA FIM DATA ENTREGA", "ERRO", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }
}
