/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.relatorios.financeiro;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.text.Element;
import entities.sisgrafex.Cliente;
import exception.EnvioExcecao;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import ui.administrador.UsuarioBEAN;
import ui.administrador.UsuarioDAO;
import model.dao.ClienteDAO;
import ui.controle.Controle;

/**
 *
 * @author spd3
 */
public class RelatorioFat extends javax.swing.JInternalFrame {

    DefaultListModel model = new DefaultListModel();
    int qtdSelecionada = 0;
    public static Cliente cliente;

    JLabel loading;

    private static RelatorioFat relatoriosNotaVenda;

    public static RelatorioFat getInstancia(JLabel loading) {
        return new RelatorioFat(loading);
    }

    public RelatorioFat(JLabel loading) {
        try {
            initComponents();
            this.loading = loading;
            listaPesquisaCliente.setModel(model);

            comboEmissores.removeAllItems();
            for (UsuarioBEAN cadastroFuncionariosBEAN
                    : UsuarioDAO.retornaAtendentes((byte) 3)) {
                comboEmissores.addItem(cadastroFuncionariosBEAN.getCodigo() + " - "
                        + cadastroFuncionariosBEAN.getNome());
            }

            estadoInicial();
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoCliente = new javax.swing.ButtonGroup();
        grupoOpOrcamento = new javax.swing.ButtonGroup();
        grupoEmissor = new javax.swing.ButtonGroup();
        grupoPeriodo = new javax.swing.ButtonGroup();
        grupoTransporte = new javax.swing.ButtonGroup();
        grupoOrdenar = new javax.swing.ButtonGroup();
        grupoTipoPessoa = new javax.swing.ButtonGroup();
        grupoOrientacao = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        porCodigo = new javax.swing.JRadioButton();
        codigoCliente = new javax.swing.JFormattedTextField();
        porNome = new javax.swing.JRadioButton();
        nomeCliente = new javax.swing.JTextField();
        listaPesquisaCliente = new javax.swing.JList<String>();
        porTipoPessoa = new javax.swing.JRadioButton();
        pessoaJuridica = new javax.swing.JRadioButton();
        pessoaFisica = new javax.swing.JRadioButton();
        porTodosClientes = new javax.swing.JRadioButton();
        comboTipoPessoa = new javax.swing.JComboBox<String>();
        jPanel7 = new javax.swing.JPanel();
        porOrdemProducao = new javax.swing.JRadioButton();
        textoOrdemProducao = new javax.swing.JFormattedTextField();
        porOrcamento = new javax.swing.JRadioButton();
        textoOrcamento = new javax.swing.JFormattedTextField();
        porTodosOpOrcamento = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        porEmissor = new javax.swing.JRadioButton();
        comboEmissores = new javax.swing.JComboBox<String>();
        porTodosEmissores = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        periodoFim = new com.toedter.calendar.JDateChooser();
        porTodosPeriodos = new javax.swing.JRadioButton();
        porDiaRadio = new javax.swing.JRadioButton();
        dia = new com.toedter.calendar.JDateChooser();
        porPeriodoRadio = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        periodoInicio = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        porModalidadeFrete = new javax.swing.JRadioButton();
        comboModalidadeFrete = new javax.swing.JComboBox<String>();
        porNomeTransportador = new javax.swing.JRadioButton();
        textoTransportador = new javax.swing.JTextField();
        porTodosTransporte = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        campoCodigo = new javax.swing.JCheckBox();
        campoCodigoOp = new javax.swing.JCheckBox();
        campoCodigoOrcamento = new javax.swing.JCheckBox();
        campoEmissor = new javax.swing.JCheckBox();
        campoCodigoCliente = new javax.swing.JCheckBox();
        campoNomeCliente = new javax.swing.JCheckBox();
        campoTipoPessoa = new javax.swing.JCheckBox();
        campoQuantidadeEntregue = new javax.swing.JCheckBox();
        campoValor = new javax.swing.JCheckBox();
        campoData = new javax.swing.JCheckBox();
        campoNomeTransportador = new javax.swing.JCheckBox();
        campoModalidadeFrete = new javax.swing.JCheckBox();
        campoProduto = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        porCodigoCrescente = new javax.swing.JRadioButton();
        porCodigoDecrescente = new javax.swing.JRadioButton();
        porCodigoOpCrescente = new javax.swing.JRadioButton();
        porCodigoOpDecrescente = new javax.swing.JRadioButton();
        porQuantidadeCrescente = new javax.swing.JRadioButton();
        porQuantidadeDecrescente = new javax.swing.JRadioButton();
        porEmissorOrdenar = new javax.swing.JRadioButton();
        porTipoPessoaOrdenar = new javax.swing.JRadioButton();
        porValorCrescente = new javax.swing.JRadioButton();
        porValorDecrescente = new javax.swing.JRadioButton();
        porDataMaisAtual = new javax.swing.JRadioButton();
        porDataMaisAntiga = new javax.swing.JRadioButton();
        semOrdenacao = new javax.swing.JRadioButton();
        botaoGeraRelatorio1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rBtnRetrato = new javax.swing.JRadioButton();
        rBtnPaisagem = new javax.swing.JRadioButton();

        setTitle("RELATÓRIOS - FATURAMENTOS");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/faturamento.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 340));

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        grupoCliente.add(porCodigo);
        porCodigo.setText("POR CÓDIGO");
        porCodigo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porCodigoItemStateChanged(evt);
            }
        });

        codigoCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        grupoCliente.add(porNome);
        porNome.setText("POR NOME");
        porNome.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porNomeItemStateChanged(evt);
            }
        });
        porNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porNomeActionPerformed(evt);
            }
        });

        nomeCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomeClienteKeyReleased(evt);
            }
        });

        listaPesquisaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaPesquisaClienteMouseClicked(evt);
            }
        });

        grupoCliente.add(porTipoPessoa);
        porTipoPessoa.setText("POR TIPO DE PESSOA");
        porTipoPessoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTipoPessoaItemStateChanged(evt);
            }
        });

        grupoTipoPessoa.add(pessoaJuridica);
        pessoaJuridica.setText("PESSOA JURÍDICA (2/PJ)");

        grupoTipoPessoa.add(pessoaFisica);
        pessoaFisica.setText("PESSOA FÍSICA (1/PF)");

        grupoCliente.add(porTodosClientes);
        porTodosClientes.setText("TODOS");
        porTodosClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosClientesItemStateChanged(evt);
            }
        });

        comboTipoPessoa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 - PESSOA FÍSICA (PF)", "2 - PESSOA JURÍDICA (PJ)" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listaPesquisaCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(porCodigo)
                            .addGap(29, 29, 29)
                            .addComponent(comboTipoPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(codigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(porNome)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(290, 290, 290)
                            .addComponent(pessoaJuridica))
                        .addComponent(porTodosClientes)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(150, 150, 150)
                            .addComponent(pessoaFisica))
                        .addComponent(porTipoPessoa))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboTipoPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(porCodigo)
                            .addComponent(codigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(porNome)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(porTipoPessoa))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(pessoaFisica))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(porTodosClientes))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(pessoaJuridica))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(listaPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(59, 59, 59))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {codigoCliente, comboTipoPessoa, porCodigo});

        jTabbedPane1.addTab("CLIENTE", new javax.swing.ImageIcon(getClass().getResource("/icones/cliente.png")), jPanel1); // NOI18N

        grupoOpOrcamento.add(porOrdemProducao);
        porOrdemProducao.setText("ORDEM DE PRODUÇÃO (CÓDIGO)");
        porOrdemProducao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porOrdemProducaoItemStateChanged(evt);
            }
        });

        textoOrdemProducao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        grupoOpOrcamento.add(porOrcamento);
        porOrcamento.setText("ORÇAMENTO (CÓDIGO)");
        porOrcamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porOrcamentoItemStateChanged(evt);
            }
        });

        textoOrcamento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        grupoOpOrcamento.add(porTodosOpOrcamento);
        porTodosOpOrcamento.setText("TODOS");
        porTodosOpOrcamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosOpOrcamentoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porTodosOpOrcamento)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porOrdemProducao)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(porOrcamento)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoOrdemProducao, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoOrcamento, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(429, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {textoOrcamento, textoOrdemProducao});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porOrdemProducao)
                    .addComponent(textoOrdemProducao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoOrcamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(porOrcamento))
                .addGap(18, 18, 18)
                .addComponent(porTodosOpOrcamento)
                .addContainerGap(157, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {porOrcamento, porOrdemProducao, porTodosOpOrcamento, textoOrcamento, textoOrdemProducao});

        jTabbedPane1.addTab("OP/ORÇAMENTO", new javax.swing.ImageIcon(getClass().getResource("/icones/orçamento.png")), jPanel7); // NOI18N

        grupoEmissor.add(porEmissor);
        porEmissor.setText("POR EMISSOR");
        porEmissor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porEmissorItemStateChanged(evt);
            }
        });

        grupoEmissor.add(porTodosEmissores);
        porTodosEmissores.setText("TODOS");
        porTodosEmissores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosEmissoresItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(porEmissor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboEmissores, 0, 658, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(porTodosEmissores)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porEmissor)
                    .addComponent(comboEmissores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(porTodosEmissores)
                .addContainerGap(208, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("EMISSOR", new javax.swing.ImageIcon(getClass().getResource("/icones/atendentes.png")), jPanel2); // NOI18N

        grupoPeriodo.add(porTodosPeriodos);
        porTodosPeriodos.setText("TODOS");
        porTodosPeriodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosPeriodosItemStateChanged(evt);
            }
        });

        grupoPeriodo.add(porDiaRadio);
        porDiaRadio.setText("POR DIA");
        porDiaRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porDiaRadioItemStateChanged(evt);
            }
        });

        grupoPeriodo.add(porPeriodoRadio);
        porPeriodoRadio.setText("POR PERÍODO");
        porPeriodoRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porPeriodoRadioItemStateChanged(evt);
            }
        });

        jLabel1.setText("INICÍO");

        jLabel2.setText("FIM");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(porTodosPeriodos)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(periodoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(periodoFim, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(porDiaRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dia, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(porPeriodoRadio))
                        .addGap(394, 394, Short.MAX_VALUE))))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dia, periodoFim, periodoInicio});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porDiaRadio)
                            .addComponent(dia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(porPeriodoRadio)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(periodoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(periodoFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(porTodosPeriodos)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dia, jLabel1, jLabel2, periodoFim, periodoInicio, porDiaRadio, porPeriodoRadio});

        jTabbedPane1.addTab("PERÍODO", new javax.swing.ImageIcon(getClass().getResource("/icones/periodo.png")), jPanel3); // NOI18N

        grupoTransporte.add(porModalidadeFrete);
        porModalidadeFrete.setText("POR MODALIDADE DE FRETE");
        porModalidadeFrete.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porModalidadeFreteItemStateChanged(evt);
            }
        });

        comboModalidadeFrete.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EMC - ENTREGUE EM MÃOS AO CLIENTE", "COR - CORREIOS" }));

        grupoTransporte.add(porNomeTransportador);
        porNomeTransportador.setText("POR NOME DO TRANSPORTADOR");
        porNomeTransportador.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porNomeTransportadorItemStateChanged(evt);
            }
        });

        grupoTransporte.add(porTodosTransporte);
        porTodosTransporte.setText("TODOS");
        porTodosTransporte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosTransporteItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porNomeTransportador)
                            .addComponent(porModalidadeFrete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoTransportador, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                            .addComponent(comboModalidadeFrete, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(144, 144, 144))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(porTodosTransporte)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porModalidadeFrete)
                    .addComponent(comboModalidadeFrete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porNomeTransportador)
                    .addComponent(textoTransportador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(porTodosTransporte)
                .addContainerGap(154, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboModalidadeFrete, porModalidadeFrete, porNomeTransportador, porTodosTransporte, textoTransportador});

        jTabbedPane1.addTab("TRANSPORTE", new javax.swing.ImageIcon(getClass().getResource("/icones/transporte.png")), jPanel4); // NOI18N

        campoCodigo.setText("CÓDIGO");
        campoCodigo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCodigoItemStateChanged(evt);
            }
        });

        campoCodigoOp.setText("CÓDIGO OP");
        campoCodigoOp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCodigoOpItemStateChanged(evt);
            }
        });

        campoCodigoOrcamento.setText("CÓDIGO ORÇAMENTO");
        campoCodigoOrcamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCodigoOrcamentoItemStateChanged(evt);
            }
        });

        campoEmissor.setText("EMISSOR");
        campoEmissor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoEmissorItemStateChanged(evt);
            }
        });

        campoCodigoCliente.setText("CÓDIGO DO CLIENTE");

        campoNomeCliente.setText("NOME DO CLIENTE");

        campoTipoPessoa.setText("TIPO DE PESSOA");
        campoTipoPessoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoTipoPessoaItemStateChanged(evt);
            }
        });

        campoQuantidadeEntregue.setText("QUANTIDADE ENTREGUE");
        campoQuantidadeEntregue.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoQuantidadeEntregueItemStateChanged(evt);
            }
        });

        campoValor.setText("VALOR");
        campoValor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoValorItemStateChanged(evt);
            }
        });

        campoData.setText("DATA");
        campoData.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoDataItemStateChanged(evt);
            }
        });

        campoNomeTransportador.setText("NOME DO TRANSPORTADOR");

        campoModalidadeFrete.setText("MODALIDADE DE FRETE");

        campoProduto.setText("PRODUTO");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoQuantidadeEntregue)
                    .addComponent(campoTipoPessoa)
                    .addComponent(campoNomeCliente)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoCodigo)
                            .addComponent(campoCodigoOp)
                            .addComponent(campoCodigoOrcamento)
                            .addComponent(campoEmissor)
                            .addComponent(campoCodigoCliente))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoData)
                            .addComponent(campoValor)
                            .addComponent(campoNomeTransportador)
                            .addComponent(campoModalidadeFrete)
                            .addComponent(campoProduto))))
                .addContainerGap(403, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoCodigo)
                    .addComponent(campoValor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoData)
                    .addComponent(campoCodigoOp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoCodigoOrcamento)
                    .addComponent(campoNomeTransportador))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoEmissor)
                    .addComponent(campoModalidadeFrete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoCodigoCliente)
                    .addComponent(campoProduto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNomeCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoTipoPessoa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoQuantidadeEntregue)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CAMPOS", new javax.swing.ImageIcon(getClass().getResource("/icones/campos.png")), jPanel6); // NOI18N

        grupoOrdenar.add(porCodigoCrescente);
        porCodigoCrescente.setText("POR CÓDIGO CRESCENTE");

        grupoOrdenar.add(porCodigoDecrescente);
        porCodigoDecrescente.setText("POR CÓDIGO DECRESCENTE");

        grupoOrdenar.add(porCodigoOpCrescente);
        porCodigoOpCrescente.setText("POR CÓDIGO OP CRESCENTE");

        grupoOrdenar.add(porCodigoOpDecrescente);
        porCodigoOpDecrescente.setText("POR CÓDIGO OP DECRESCENTE");

        grupoOrdenar.add(porQuantidadeCrescente);
        porQuantidadeCrescente.setText("POR QUANTIDADE CRESCENTE");
        porQuantidadeCrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porQuantidadeCrescenteActionPerformed(evt);
            }
        });

        grupoOrdenar.add(porQuantidadeDecrescente);
        porQuantidadeDecrescente.setText("POR QUANTIDADE DECRESCENTE");
        porQuantidadeDecrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porQuantidadeDecrescenteActionPerformed(evt);
            }
        });

        grupoOrdenar.add(porEmissorOrdenar);
        porEmissorOrdenar.setText("POR EMISSOR");

        grupoOrdenar.add(porTipoPessoaOrdenar);
        porTipoPessoaOrdenar.setText("POR TIPO DE PESSOA");

        grupoOrdenar.add(porValorCrescente);
        porValorCrescente.setText("POR VALOR CRESCENTE");

        grupoOrdenar.add(porValorDecrescente);
        porValorDecrescente.setText("POR VALOR DECRESCENTE");

        grupoOrdenar.add(porDataMaisAtual);
        porDataMaisAtual.setText("POR DATA MAIS ATUAL");

        grupoOrdenar.add(porDataMaisAntiga);
        porDataMaisAntiga.setText("POR DATA MAIS ANTIGA");

        grupoOrdenar.add(semOrdenacao);
        semOrdenacao.setText("SEM ORDENAÇÃO");

        botaoGeraRelatorio1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        botaoGeraRelatorio1.setText("GERAR RELATÓRIO");
        botaoGeraRelatorio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGeraRelatorio1ActionPerformed(evt);
            }
        });

        jLabel3.setText("ORIENTAÇÃO:");

        grupoOrientacao.add(rBtnRetrato);
        rBtnRetrato.setText("RETRATO");

        grupoOrientacao.add(rBtnPaisagem);
        rBtnPaisagem.setText("PAISAGEM");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoGeraRelatorio1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(porCodigoOpDecrescente)
                                    .addComponent(porQuantidadeCrescente)
                                    .addComponent(porQuantidadeDecrescente)
                                    .addComponent(porCodigoCrescente)
                                    .addComponent(porCodigoDecrescente)
                                    .addComponent(porCodigoOpCrescente))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(semOrdenacao)
                                    .addComponent(porDataMaisAntiga)
                                    .addComponent(porDataMaisAtual)
                                    .addComponent(porEmissorOrdenar)
                                    .addComponent(porTipoPessoaOrdenar)
                                    .addComponent(porValorCrescente)
                                    .addComponent(porValorDecrescente)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rBtnRetrato)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rBtnPaisagem)))
                        .addGap(0, 352, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(porCodigoCrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porCodigoDecrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porCodigoOpCrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porCodigoOpDecrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porQuantidadeCrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porQuantidadeDecrescente))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(porEmissorOrdenar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porTipoPessoaOrdenar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porValorCrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porValorDecrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(porDataMaisAtual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(porDataMaisAntiga)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(semOrdenacao)))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(rBtnRetrato)
                    .addComponent(rBtnPaisagem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGeraRelatorio1)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, rBtnPaisagem, rBtnRetrato});

        jTabbedPane1.addTab("ORDENAR", new javax.swing.ImageIcon(getClass().getResource("/icones/ordenar.png")), jPanel5); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void porCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porCodigoItemStateChanged
        if (porCodigo.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNome.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoa.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porCodigoItemStateChanged

    private void porNomeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porNomeItemStateChanged
        if (porCodigo.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNome.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoa.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porNomeItemStateChanged

    private void porNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porNomeActionPerformed

    private void nomeClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomeClienteKeyReleased
        try {
            model.removeAllElements();

            for (String nome : ClienteDAO.retornaPesquisaClientesAproximada(nomeCliente.getText())) {
                model.addElement(nome);
            }

            if (model.isEmpty()) {
                listaPesquisaCliente.setVisible(false);
            } else {
                listaPesquisaCliente.setVisible(true);
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_nomeClienteKeyReleased

    private void listaPesquisaClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisaClienteMouseClicked
        try {
            nomeCliente.setText(listaPesquisaCliente.getSelectedValue());
            cliente = ClienteDAO.retornaTipoCodClienteRelatorio(nomeCliente.getText());
            listaPesquisaCliente.setVisible(false);
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_listaPesquisaClienteMouseClicked

    private void porTipoPessoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTipoPessoaItemStateChanged
        if (porCodigo.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNome.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoa.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porTipoPessoaItemStateChanged

    private void porTodosClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosClientesItemStateChanged
        if (porCodigo.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNome.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoa.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosClientesItemStateChanged

    private void porEmissorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porEmissorItemStateChanged
        if (porEmissor.isSelected() == true) {
            comboEmissores.setEnabled(true);
        } else {
            comboEmissores.setEnabled(false);
        }
    }//GEN-LAST:event_porEmissorItemStateChanged

    private void porTodosEmissoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosEmissoresItemStateChanged
        if (porEmissor.isSelected() == true) {
            comboEmissores.setEnabled(true);
        } else {
            comboEmissores.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosEmissoresItemStateChanged

    private void porDiaRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porDiaRadioItemStateChanged
        if (porDiaRadio.isSelected() == true) {
            dia.setEnabled(true);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        } else if (porPeriodoRadio.isSelected() == true) {
            dia.setEnabled(false);
            periodoInicio.setEnabled(true);
            periodoFim.setEnabled(true);
        } else {
            dia.setEnabled(false);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        }
    }//GEN-LAST:event_porDiaRadioItemStateChanged

    private void porPeriodoRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porPeriodoRadioItemStateChanged
        if (porDiaRadio.isSelected() == true) {
            dia.setEnabled(true);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        } else if (porPeriodoRadio.isSelected() == true) {
            dia.setEnabled(false);
            periodoInicio.setEnabled(true);
            periodoFim.setEnabled(true);
        } else {
            dia.setEnabled(false);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        }
    }//GEN-LAST:event_porPeriodoRadioItemStateChanged

    private void porQuantidadeCrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porQuantidadeCrescenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porQuantidadeCrescenteActionPerformed

    private void porQuantidadeDecrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porQuantidadeDecrescenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porQuantidadeDecrescenteActionPerformed

    private void campoEmissorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoEmissorItemStateChanged
        if (campoEmissor.isSelected() == true) {
            porEmissorOrdenar.setEnabled(true);
        } else {
            porEmissorOrdenar.setEnabled(false);
        }
    }//GEN-LAST:event_campoEmissorItemStateChanged

    private void campoTipoPessoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoTipoPessoaItemStateChanged
        if (campoTipoPessoa.isSelected() == true) {
            porTipoPessoaOrdenar.setEnabled(true);
        } else {
            porTipoPessoaOrdenar.setEnabled(false);
        }
    }//GEN-LAST:event_campoTipoPessoaItemStateChanged

    private void campoValorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoValorItemStateChanged
        if (campoValor.isSelected() == true) {
            porValorCrescente.setEnabled(true);
            porValorDecrescente.setEnabled(true);
        } else {
            porValorCrescente.setEnabled(false);
            porValorDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoValorItemStateChanged

    private void campoDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoDataItemStateChanged
        if (campoData.isSelected() == true) {
            porDataMaisAntiga.setEnabled(true);
            porDataMaisAtual.setEnabled(true);
        } else {
            porDataMaisAntiga.setEnabled(false);
            porDataMaisAtual.setEnabled(false);
        }
    }//GEN-LAST:event_campoDataItemStateChanged

    private void campoCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCodigoItemStateChanged
        if (campoCodigo.isSelected() == true) {
            porCodigoCrescente.setEnabled(true);
            porCodigoDecrescente.setEnabled(true);
        } else {
            porCodigoCrescente.setEnabled(false);
            porCodigoDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoCodigoItemStateChanged

    private void porOrdemProducaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porOrdemProducaoItemStateChanged
        if (porOrdemProducao.isSelected() == true) {
            textoOrdemProducao.setEnabled(true);
            textoOrcamento.setEnabled(false);
        } else if (porOrcamento.isSelected() == true) {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(true);
        } else {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(false);
        }
    }//GEN-LAST:event_porOrdemProducaoItemStateChanged

    private void porOrcamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porOrcamentoItemStateChanged
        if (porOrdemProducao.isSelected() == true) {
            textoOrdemProducao.setEnabled(true);
            textoOrcamento.setEnabled(false);
        } else if (porOrcamento.isSelected() == true) {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(true);
        } else {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(false);
        }
    }//GEN-LAST:event_porOrcamentoItemStateChanged

    private void porTodosOpOrcamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosOpOrcamentoItemStateChanged
        if (porOrdemProducao.isSelected() == true) {
            textoOrdemProducao.setEnabled(true);
            textoOrcamento.setEnabled(false);
        } else if (porOrcamento.isSelected() == true) {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(true);
        } else {
            textoOrdemProducao.setEnabled(false);
            textoOrcamento.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosOpOrcamentoItemStateChanged

    private void porModalidadeFreteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porModalidadeFreteItemStateChanged
        if (porModalidadeFrete.isSelected() == true) {
            comboModalidadeFrete.setEnabled(true);
            textoTransportador.setEnabled(false);
        } else if (porNomeTransportador.isSelected() == true) {
            comboModalidadeFrete.setEnabled(false);
            textoTransportador.setEnabled(true);
        } else {
            comboModalidadeFrete.setEnabled(false);
            textoTransportador.setEnabled(false);
        }
    }//GEN-LAST:event_porModalidadeFreteItemStateChanged

    private void porTodosPeriodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosPeriodosItemStateChanged
        if (porDiaRadio.isSelected() == true) {
            dia.setEnabled(true);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        } else if (porPeriodoRadio.isSelected() == true) {
            dia.setEnabled(false);
            periodoInicio.setEnabled(true);
            periodoFim.setEnabled(true);
        } else {
            dia.setEnabled(false);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosPeriodosItemStateChanged

    private void porNomeTransportadorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porNomeTransportadorItemStateChanged
        if (porModalidadeFrete.isSelected() == true) {
            comboModalidadeFrete.setEnabled(true);
            textoTransportador.setEnabled(false);
        } else if (porNomeTransportador.isSelected() == true) {
            comboModalidadeFrete.setEnabled(false);
            textoTransportador.setEnabled(true);
        } else {
            comboModalidadeFrete.setEnabled(false);
            textoTransportador.setEnabled(false);
        }
    }//GEN-LAST:event_porNomeTransportadorItemStateChanged

    private void porTodosTransporteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosTransporteItemStateChanged
        if (porModalidadeFrete.isSelected() == true) {
            comboModalidadeFrete.setEnabled(true);
            textoTransportador.setEnabled(false);
        } else if (porNomeTransportador.isSelected() == true) {
            comboModalidadeFrete.setEnabled(false);
            textoTransportador.setEnabled(true);
        } else {
            comboModalidadeFrete.setEnabled(false);
            textoTransportador.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosTransporteItemStateChanged

    private void campoCodigoOpItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCodigoOpItemStateChanged
        if (campoCodigoOp.isSelected() == true) {
            porCodigoOpCrescente.setEnabled(true);
            porCodigoOpDecrescente.setEnabled(true);
        } else {
            porCodigoOpCrescente.setEnabled(false);
            porCodigoOpDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoCodigoOpItemStateChanged

    private void campoCodigoOrcamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCodigoOrcamentoItemStateChanged

    }//GEN-LAST:event_campoCodigoOrcamentoItemStateChanged

    private void campoQuantidadeEntregueItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoQuantidadeEntregueItemStateChanged
        if (campoQuantidadeEntregue.isSelected() == true) {
            porQuantidadeCrescente.setEnabled(true);
            porQuantidadeDecrescente.setEnabled(true);
        } else {
            porQuantidadeCrescente.setEnabled(false);
            porQuantidadeDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoQuantidadeEntregueItemStateChanged

    private void botaoGeraRelatorio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGeraRelatorio1ActionPerformed
        geraRelatorio();
    }//GEN-LAST:event_botaoGeraRelatorio1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGeraRelatorio1;
    private javax.swing.JCheckBox campoCodigo;
    private javax.swing.JCheckBox campoCodigoCliente;
    private javax.swing.JCheckBox campoCodigoOp;
    private javax.swing.JCheckBox campoCodigoOrcamento;
    private javax.swing.JCheckBox campoData;
    private javax.swing.JCheckBox campoEmissor;
    private javax.swing.JCheckBox campoModalidadeFrete;
    private javax.swing.JCheckBox campoNomeCliente;
    private javax.swing.JCheckBox campoNomeTransportador;
    private javax.swing.JCheckBox campoProduto;
    private javax.swing.JCheckBox campoQuantidadeEntregue;
    private javax.swing.JCheckBox campoTipoPessoa;
    private javax.swing.JCheckBox campoValor;
    private javax.swing.JFormattedTextField codigoCliente;
    private javax.swing.JComboBox<String> comboEmissores;
    private javax.swing.JComboBox<String> comboModalidadeFrete;
    private javax.swing.JComboBox<String> comboTipoPessoa;
    private com.toedter.calendar.JDateChooser dia;
    private javax.swing.ButtonGroup grupoCliente;
    private javax.swing.ButtonGroup grupoEmissor;
    private javax.swing.ButtonGroup grupoOpOrcamento;
    private javax.swing.ButtonGroup grupoOrdenar;
    private javax.swing.ButtonGroup grupoOrientacao;
    private javax.swing.ButtonGroup grupoPeriodo;
    private javax.swing.ButtonGroup grupoTipoPessoa;
    private javax.swing.ButtonGroup grupoTransporte;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> listaPesquisaCliente;
    private javax.swing.JTextField nomeCliente;
    private com.toedter.calendar.JDateChooser periodoFim;
    private com.toedter.calendar.JDateChooser periodoInicio;
    private javax.swing.JRadioButton pessoaFisica;
    private javax.swing.JRadioButton pessoaJuridica;
    private javax.swing.JRadioButton porCodigo;
    private javax.swing.JRadioButton porCodigoCrescente;
    private javax.swing.JRadioButton porCodigoDecrescente;
    private javax.swing.JRadioButton porCodigoOpCrescente;
    private javax.swing.JRadioButton porCodigoOpDecrescente;
    private javax.swing.JRadioButton porDataMaisAntiga;
    private javax.swing.JRadioButton porDataMaisAtual;
    private javax.swing.JRadioButton porDiaRadio;
    private javax.swing.JRadioButton porEmissor;
    private javax.swing.JRadioButton porEmissorOrdenar;
    private javax.swing.JRadioButton porModalidadeFrete;
    private javax.swing.JRadioButton porNome;
    private javax.swing.JRadioButton porNomeTransportador;
    private javax.swing.JRadioButton porOrcamento;
    private javax.swing.JRadioButton porOrdemProducao;
    private javax.swing.JRadioButton porPeriodoRadio;
    private javax.swing.JRadioButton porQuantidadeCrescente;
    private javax.swing.JRadioButton porQuantidadeDecrescente;
    private javax.swing.JRadioButton porTipoPessoa;
    private javax.swing.JRadioButton porTipoPessoaOrdenar;
    private javax.swing.JRadioButton porTodosClientes;
    private javax.swing.JRadioButton porTodosEmissores;
    private javax.swing.JRadioButton porTodosOpOrcamento;
    private javax.swing.JRadioButton porTodosPeriodos;
    private javax.swing.JRadioButton porTodosTransporte;
    private javax.swing.JRadioButton porValorCrescente;
    private javax.swing.JRadioButton porValorDecrescente;
    private javax.swing.JRadioButton rBtnPaisagem;
    private javax.swing.JRadioButton rBtnRetrato;
    private javax.swing.JRadioButton semOrdenacao;
    private javax.swing.JFormattedTextField textoOrcamento;
    private javax.swing.JFormattedTextField textoOrdemProducao;
    private javax.swing.JTextField textoTransportador;
    // End of variables declaration//GEN-END:variables
    //ESTADOS DA UI-------------------------------------------------------------

    public void estadoInicial() {
        //CLIENTES
        porTodosClientes.setSelected(true);
        listaPesquisaCliente.setVisible(false);
        //OP-ORCAMENTO----------------------------------------------------------
        porTodosOpOrcamento.setSelected(true);
        //EMISSOR---------------------------------------------------------------
        porTodosEmissores.setSelected(true);
        //PERIODO---------------------------------------------------------------
        porTodosPeriodos.setSelected(true);
        //TRANSPORTE------------------------------------------------------------
        porTodosTransporte.setSelected(true);
        //ORDENAR---------------------------------------------------------------
        porCodigoCrescente.setEnabled(false);
        porCodigoDecrescente.setEnabled(false);
        porCodigoOpCrescente.setEnabled(false);
        porCodigoOpDecrescente.setEnabled(false);
        porQuantidadeCrescente.setEnabled(false);
        porQuantidadeDecrescente.setEnabled(false);
        porEmissorOrdenar.setEnabled(false);
        porTipoPessoaOrdenar.setEnabled(false);
        porValorCrescente.setEnabled(false);
        porValorDecrescente.setEnabled(false);
        porDataMaisAtual.setEnabled(false);
        porDataMaisAntiga.setEnabled(false);
        semOrdenacao.setEnabled(true);
        semOrdenacao.setSelected(true);
        //ORIENTAÇÃO
        rBtnRetrato.setSelected(true);
    }

    //GERA RELATÓRIO------------------------------------------------------------
    public void geraRelatorio() {

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4, 30, 20, 20, 30);

        String valor = null;

        new Thread() {
            @Override
            public void run() {

                loading.setVisible(true);
                loading.setText("GERANDO RELATÓRIO...");

                String hora = Controle.horaPadraoDiretorio.format(new Date());
                String data = Controle.dataPadraoDiretorio.format(new Date());

                try {
                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempUnix + data + hora + ".pdf"));
                    }

                    document.setMargins(20, 20, 20, 20);

                    if (rBtnPaisagem.isSelected()) {
                        document.setPageSize(PageSize.A4.rotate());
                    } else {
                        document.setPageSize(PageSize.A4);
                    }

                    document.open();

                    document.add(new Paragraph(new Phrase("RELATÓRIO DE FATURAMENTOS - "
                            + "DATA E HORA DE EMISSÃO: "
                            + data
                            + " "
                            + hora
                            + " - SISGRAFEX\n\n", FontFactory.getFont("arial.ttf", 9))));

                    Paragraph p = new Paragraph("RELATÓRIO DE FATURAMENTOS", FontFactory.getFont("arial.ttf", 12, Font.BOLD));
                    p.setAlignment(1);
                    document.add(p);

                    document.add(new Paragraph("\n"));

                    PdfPTable tabelaPrincipal = retornaTabelaComConteudo();
                    document.add(tabelaPrincipal);

                    document.close();
                    
                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempUnix + data + hora + ".pdf"));
                    }
                    loading.setVisible(false);
                } catch (IOException | DocumentException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio(loading);
                }
                
            }
        }.start();
    }

    public int retornaQtdSelecionada() {
        qtdSelecionada = 0;

        if (campoCodigo.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoCodigoOp.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoCodigoOrcamento.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoEmissor.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoCodigoCliente.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoNomeCliente.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoTipoPessoa.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoQuantidadeEntregue.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoValor.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoData.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoNomeTransportador.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoModalidadeFrete.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoProduto.isSelected() == true) {
            qtdSelecionada += 1;
        }

        return qtdSelecionada;
    }

    public PdfPTable retornaTabela() {
        int qtdSelecionada = retornaQtdSelecionada();
        PdfPTable retorno = null;
        PdfPCell celula = null;

        if (qtdSelecionada == 1) {
            retorno = new PdfPTable(new float[]{5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 2) {
            retorno = new PdfPTable(new float[]{5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 3) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 4) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 5) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 6) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 7) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 8) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 9) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 10) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 11) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 12) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 13) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOp.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO OP", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoOrcamento.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO ORÇAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoEmissor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCodigoCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("CÓDIGO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected() == true) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoQuantidadeEntregue.isSelected() == true) {
                celula = new PdfPCell(new Phrase("QUANTIDADE ENTREGUE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoData.isSelected() == true) {
                celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeTransportador.isSelected() == true) {
                celula = new PdfPCell(new Phrase("NOME TRANSPORTADOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoModalidadeFrete.isSelected() == true) {
                celula = new PdfPCell(new Phrase("MODALIDADE DO FRETE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoProduto.isSelected() == true) {
                celula = new PdfPCell(new Phrase("PRODUTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        return retorno;
    }

    public PdfPTable retornaTabelaComConteudo() {
        try {
            RelatoriosFinanceiroDAO dao = new RelatoriosFinanceiroDAO();
            PdfPTable retorno = retornaTabela();
            PdfPCell celula = null;

            String tipoCondicaoCliente;
            String tipoCondicaoOpOrcamento;
            String tipoCondicaoEmissor;
            String tipoCondicaoPeriodo;
            String tipoCondicaoTransporte;
            String tipoCondicaoOrdenar = null;
            String emissorAux = null;
            java.sql.Date periodoInicioAux;
            java.sql.Date periodoFimAux;
            String textoOpAux = null;
            String textoTransporteAux = null;
            Double valorTotal = 0.0;
            DecimalFormat df = new DecimalFormat("###,##0.00");

            if (porCodigo.isSelected() == true) {
                cliente = new Cliente();
                tipoCondicaoCliente = "POR CÓDIGO";
                cliente.setTipoPessoa((byte) Byte.valueOf(comboTipoPessoa.getSelectedItem().toString().substring(0, 1)));
                cliente.setCodigo(Integer.valueOf(codigoCliente.getText()));
            } else if (porNome.isSelected() == true) {
                tipoCondicaoCliente = "POR NOME";
            } else if (porTipoPessoa.isSelected() == true) {
                cliente = new Cliente();
                tipoCondicaoCliente = "POR TIPO PESSOA";
                cliente.setTipoPessoa(pessoaFisica.isSelected() ? (byte) 1 : (byte) 2);
            } else {
                tipoCondicaoCliente = "TODOS";
            }

            if (porOrdemProducao.isSelected() == true) {
                tipoCondicaoOpOrcamento = "ORDEM DE PRODUÇÃO (CÓDIGO)";
                textoOpAux = textoOrdemProducao.getText();
            } else if (porOrcamento.isSelected() == true) {
                tipoCondicaoOpOrcamento = "ORÇAMENTO (CÓDIGO)";
                textoOpAux = textoOrcamento.getText();
            } else {
                tipoCondicaoOpOrcamento = "TODOS";
            }

            if (porEmissor.isSelected() == true) {
                tipoCondicaoEmissor = "POR EMISSOR";
                emissorAux = comboEmissores.getSelectedItem().toString().substring(0, 3);
            } else {
                tipoCondicaoEmissor = "TODOS";
            }

            if (porDiaRadio.isSelected() == true) {
                tipoCondicaoPeriodo = "POR DIA";
                periodoInicioAux = new java.sql.Date(dia.getDate().getTime());
                periodoFimAux = null;
            } else if (porPeriodoRadio.isSelected() == true) {
                tipoCondicaoPeriodo = "POR PERIODO";
                periodoInicioAux = new java.sql.Date(periodoInicio.getDate().getTime());
                periodoFimAux = new java.sql.Date(periodoFim.getDate().getTime());
            } else {
                tipoCondicaoPeriodo = "TODOS";
                periodoInicioAux = null;
                periodoFimAux = null;
            }

            if (porModalidadeFrete.isSelected() == true) {
                tipoCondicaoTransporte = "POR MODALIDADE DE FRETE";
                textoTransporteAux = comboModalidadeFrete.getSelectedItem().toString().substring(0, 3);
            } else if (porNomeTransportador.isSelected() == true) {
                tipoCondicaoTransporte = "POR NOME DO TRANSPORTADOR";
                textoTransporteAux = textoTransportador.getText();
            } else {
                tipoCondicaoTransporte = "POR TODOS";
            }

            if (porCodigoCrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR CÓDIGO CRESCENTE";
            } else if (porCodigoDecrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR CÓDIGO DECRESCENTE";
            } else if (porCodigoOpCrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR CÓDIGO OP CRESCENTE";
            } else if (porCodigoOpDecrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR CÓDIGO OP DECRESCENTE";
            } else if (porQuantidadeCrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR QUANTIDADE CRESCENTE";
            } else if (porQuantidadeDecrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR QUANTIDADE DECRESCENTE";
            } else if (porEmissorOrdenar.isSelected() == true) {
                tipoCondicaoOrdenar = "POR EMISSOR";
            } else if (porTipoPessoaOrdenar.isSelected() == true) {
                tipoCondicaoOrdenar = "POR TIPO DE PESSOA";
            } else if (porValorCrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR VALOR CRESCENTE";
            } else if (porValorDecrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR VALOR DECRESCENTE";
            } else if (porDataMaisAtual.isSelected() == true) {
                tipoCondicaoOrdenar = "POR DATA MAIS ATUAL";
            } else if (porDataMaisAntiga.isSelected() == true) {
                tipoCondicaoOrdenar = "POR DATA MAIS ANTIGA";
            }

            for (RelatoriosFatBEAN bean : dao.retornaContRelFat(true,
                    campoCodigoOp.isSelected(),
                    campoCodigoOrcamento.isSelected(),
                    campoEmissor.isSelected(),
                    campoCodigoCliente.isSelected(),
                    campoNomeCliente.isSelected(),
                    campoTipoPessoa.isSelected(),
                    campoQuantidadeEntregue.isSelected(),
                    campoValor.isSelected(),
                    campoData.isSelected(),
                    campoNomeTransportador.isSelected(),
                    campoModalidadeFrete.isSelected(),
                    campoProduto.isSelected(),
                    tipoCondicaoCliente,
                    tipoCondicaoOpOrcamento,
                    tipoCondicaoEmissor,
                    tipoCondicaoPeriodo,
                    tipoCondicaoTransporte,
                    tipoCondicaoOrdenar,
                    cliente,
                    textoOpAux,
                    emissorAux,
                    periodoInicioAux,
                    periodoFimAux,
                    textoTransporteAux)) {
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getCod()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOp.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getCodOp()).equals("0")
                            ? "PE" : String.valueOf(bean.getCodOp()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoOrcamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getCodOrcamento()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getCodEmissor()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getCodCliente()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getNomeCliente()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    if (bean.getTipo_pessoa() == 1) {
                        celula = new PdfPCell(new Phrase("PF", FontFactory.getFont("arial.ttf", 6)));
                    } else if (bean.getTipo_pessoa() == 2) {
                        celula = new PdfPCell(new Phrase("PJ", FontFactory.getFont("arial.ttf", 6)));
                    }
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoQuantidadeEntregue.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getQuantidadeEntregue()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    valorTotal = valorTotal + bean.getValor();
                    celula = new PdfPCell(new Phrase("R$" + df.format(bean.getValor()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(bean.getData(), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeTransportador.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(bean.getNomeTransportador(), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoModalidadeFrete.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(bean.getModalidadeFrete(), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoProduto.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(bean.getDescricaoProduto(), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
            }

            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR TOTAL: R$ " + df.format(valorTotal), FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setColspan(qtdSelecionada);
                celula.setHorizontalAlignment(Element.ALIGN_RIGHT);
                retorno.addCell(celula);
            }

            return retorno;
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
            return null;
        }
    }
}
