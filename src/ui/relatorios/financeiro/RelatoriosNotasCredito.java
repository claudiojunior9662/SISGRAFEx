/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.relatorios.financeiro;

import entities.sisgrafex.NotaCredito;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.text.Element;
import entities.sisgrafex.Cliente;
import exception.EnvioExcecao;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import entities.sisgrafex.Usuario;
import model.dao.UsuarioDAO;
import model.dao.ClienteDAO;
import ui.controle.Controle;

/**
 *
 * @author claudio
 */
public class RelatoriosNotasCredito extends javax.swing.JInternalFrame {

    DefaultListModel model = new DefaultListModel();
    public static Cliente cliente;
    int qtdSelecionada = 0;

    private JLabel loading;

    private static RelatoriosNotasCredito relatoriosNotasCredito;

    public static RelatoriosNotasCredito getInstancia(JLabel loading) {
        return new RelatoriosNotasCredito(loading);
    }

    public RelatoriosNotasCredito(JLabel loading) {
        try {
            initComponents();
            this.loading = loading;
            estadoInicial();
            listaPesquisaCliente.setModel(model);

            comboEmissores.removeAllItems();
            for (Usuario cadastroFuncionariosBEAN
                    : UsuarioDAO.retornaAtendentes((byte) 4)) {
                comboEmissores.addItem(cadastroFuncionariosBEAN.getCodigo() + " - "
                        + cadastroFuncionariosBEAN.getNome());
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoCliente = new javax.swing.ButtonGroup();
        grupoEmissor = new javax.swing.ButtonGroup();
        grupoPeriodo = new javax.swing.ButtonGroup();
        grupoFormaPagamento = new javax.swing.ButtonGroup();
        grupoOrdenar = new javax.swing.ButtonGroup();
        grupoOrientacao = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        porCodigo = new javax.swing.JRadioButton();
        codigoCliente = new javax.swing.JFormattedTextField();
        porNome = new javax.swing.JRadioButton();
        nomeCliente = new javax.swing.JTextField();
        listaPesquisaCliente = new javax.swing.JList<>();
        porTipoPessoa = new javax.swing.JRadioButton();
        pessoaJuridica = new javax.swing.JRadioButton();
        pessoaFisica = new javax.swing.JRadioButton();
        porTodosClientes = new javax.swing.JRadioButton();
        comboTipoPessoa = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        porEmissor = new javax.swing.JRadioButton();
        comboEmissores = new javax.swing.JComboBox<>();
        porTodosEmissores = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        porDiaRadio = new javax.swing.JRadioButton();
        dia = new com.toedter.calendar.JDateChooser();
        porPeriodoRadio = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        periodoInicio = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        periodoFim = new com.toedter.calendar.JDateChooser();
        porTodosPeriodos = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        porFormaPagamento = new javax.swing.JRadioButton();
        comboFormaPagamento = new javax.swing.JComboBox<>();
        porTodosFormaDePagamento = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        campoEmissor = new javax.swing.JCheckBox();
        campoCodigoCliente = new javax.swing.JCheckBox();
        campoNomeCliente = new javax.swing.JCheckBox();
        campoTipoPessoa = new javax.swing.JCheckBox();
        campoValor = new javax.swing.JCheckBox();
        campoData = new javax.swing.JCheckBox();
        campoCodigo = new javax.swing.JCheckBox();
        campoFormaPagamento = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        porCodigoCrescente = new javax.swing.JRadioButton();
        porCodigoDecrescente = new javax.swing.JRadioButton();
        porFormaPagamentoOrdenar = new javax.swing.JRadioButton();
        porEmissorOrdenar = new javax.swing.JRadioButton();
        porTipoPessoaOrdenar = new javax.swing.JRadioButton();
        porValorCrescente = new javax.swing.JRadioButton();
        porValorDecrescente = new javax.swing.JRadioButton();
        porDataMaisAtual = new javax.swing.JRadioButton();
        porDataMaisAntiga = new javax.swing.JRadioButton();
        semOrdenacao = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        rBtnRetrato = new javax.swing.JRadioButton();
        botaoGeraRelatorio = new javax.swing.JButton();
        rBtnPaisagem = new javax.swing.JRadioButton();

        setTitle("RELATÓRIO DE NOTAS DE CRÉDITO");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/notaCredito.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 340));

        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        grupoCliente.add(porCodigo);
        porCodigo.setText("POR CÓDIGO");
        porCodigo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porCodigoItemStateChanged(evt);
            }
        });

        codigoCliente.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        grupoCliente.add(porNome);
        porNome.setText("POR NOME");
        porNome.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porNomeItemStateChanged(evt);
            }
        });
        porNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porNomeActionPerformed(evt);
            }
        });

        nomeCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomeClienteKeyReleased(evt);
            }
        });

        listaPesquisaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaPesquisaClienteMouseClicked(evt);
            }
        });

        grupoCliente.add(porTipoPessoa);
        porTipoPessoa.setText("POR TIPO DE PESSOA");
        porTipoPessoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTipoPessoaItemStateChanged(evt);
            }
        });

        pessoaJuridica.setText("PESSOA JURÍDICA (2/PJ)");

        pessoaFisica.setText("PESSOA FÍSICA (1/PF)");

        grupoCliente.add(porTodosClientes);
        porTodosClientes.setText("TODOS");
        porTodosClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosClientesItemStateChanged(evt);
            }
        });

        comboTipoPessoa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 - PESSOA FÍSICA (PF)", "2 - PESSOA JURÍDICA (PJ)" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(pessoaFisica)
                        .addGap(13, 13, 13)
                        .addComponent(pessoaJuridica))
                    .addComponent(porTodosClientes)
                    .addComponent(porNome)
                    .addComponent(porTipoPessoa)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(porCodigo)
                            .addGap(32, 32, 32)
                            .addComponent(comboTipoPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(codigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(listaPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porCodigo)
                    .addComponent(comboTipoPessoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(pessoaFisica))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(pessoaJuridica))
                            .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(porTodosClientes))
                            .addComponent(porNome)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(porTipoPessoa))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(listaPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {codigoCliente, comboTipoPessoa, porCodigo});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nomeCliente, porNome});

        jTabbedPane1.addTab("CLIENTE", new javax.swing.ImageIcon(getClass().getResource("/icones/cliente.png")), jPanel1); // NOI18N

        grupoEmissor.add(porEmissor);
        porEmissor.setText("POR EMISSOR");
        porEmissor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porEmissorItemStateChanged(evt);
            }
        });

        grupoEmissor.add(porTodosEmissores);
        porTodosEmissores.setText("TODOS");
        porTodosEmissores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosEmissoresItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(porEmissor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboEmissores, 0, 657, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(porTodosEmissores)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porEmissor)
                    .addComponent(comboEmissores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(porTodosEmissores)
                .addContainerGap(229, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("EMISSOR", new javax.swing.ImageIcon(getClass().getResource("/icones/atendentes.png")), jPanel2); // NOI18N

        grupoPeriodo.add(porDiaRadio);
        porDiaRadio.setText("POR DIA");
        porDiaRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porDiaRadioItemStateChanged(evt);
            }
        });

        grupoPeriodo.add(porPeriodoRadio);
        porPeriodoRadio.setText("POR PERÍODO");
        porPeriodoRadio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porPeriodoRadioItemStateChanged(evt);
            }
        });

        jLabel1.setText("INICÍO");

        jLabel2.setText("FIM");

        grupoPeriodo.add(porTodosPeriodos);
        porTodosPeriodos.setText("TODOS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(porTodosPeriodos)
                    .addComponent(porPeriodoRadio)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(porDiaRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(periodoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(periodoFim, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(336, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dia, periodoFim, periodoInicio});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(porDiaRadio)
                    .addComponent(dia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(porPeriodoRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(periodoInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(periodoFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(porTodosPeriodos)
                .addContainerGap(154, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dia, jLabel1, jLabel2, periodoFim, periodoInicio, porDiaRadio, porPeriodoRadio});

        jTabbedPane1.addTab("PERÍODO", new javax.swing.ImageIcon(getClass().getResource("/icones/periodo.png")), jPanel3); // NOI18N

        grupoFormaPagamento.add(porFormaPagamento);
        porFormaPagamento.setText("POR FORMA DE PAGAMENTO");
        porFormaPagamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porFormaPagamentoItemStateChanged(evt);
            }
        });

        comboFormaPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 - PRÉ-EMPENHO", "2 - TRANSFERÊNCIA ENTRE CONTAS", "3 - NOTA DE CRÉDITO", "4 - GRU" }));

        grupoFormaPagamento.add(porTodosFormaDePagamento);
        porTodosFormaDePagamento.setText("TODOS");
        porTodosFormaDePagamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                porTodosFormaDePagamentoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(porFormaPagamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboFormaPagamento, 0, 575, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(porTodosFormaDePagamento)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porFormaPagamento)
                    .addComponent(comboFormaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(porTodosFormaDePagamento)
                .addContainerGap(229, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("FORMA DE PAGAMENTO", new javax.swing.ImageIcon(getClass().getResource("/icones/pagamento.png")), jPanel5); // NOI18N

        campoEmissor.setText("EMISSOR");
        campoEmissor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoEmissorItemStateChanged(evt);
            }
        });

        campoCodigoCliente.setText("CÓDIGO DO CLIENTE");

        campoNomeCliente.setText("NOME DO CLIENTE");

        campoTipoPessoa.setText("TIPO DE PESSOA");
        campoTipoPessoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoTipoPessoaItemStateChanged(evt);
            }
        });

        campoValor.setText("VALOR");
        campoValor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoValorItemStateChanged(evt);
            }
        });

        campoData.setText("DATA");
        campoData.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoDataItemStateChanged(evt);
            }
        });

        campoCodigo.setText("CÓDIGO");
        campoCodigo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCodigoItemStateChanged(evt);
            }
        });

        campoFormaPagamento.setText("FORMA DE PAGAMENTO");
        campoFormaPagamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoFormaPagamentoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoNomeCliente)
                    .addComponent(campoTipoPessoa)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoCodigo)
                            .addComponent(campoFormaPagamento))
                        .addGap(62, 62, 62)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoData)
                            .addComponent(campoValor)))
                    .addComponent(campoEmissor)
                    .addComponent(campoCodigoCliente))
                .addContainerGap(490, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoCodigo)
                    .addComponent(campoValor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoFormaPagamento)
                    .addComponent(campoData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoEmissor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoCodigoCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNomeCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoTipoPessoa)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CAMPOS", new javax.swing.ImageIcon(getClass().getResource("/icones/campos.png")), jPanel4); // NOI18N

        grupoOrdenar.add(porCodigoCrescente);
        porCodigoCrescente.setText("POR CÓDIGO CRESCENTE");

        grupoOrdenar.add(porCodigoDecrescente);
        porCodigoDecrescente.setText("POR CÓDIGO DECRESCENTE");

        grupoOrdenar.add(porFormaPagamentoOrdenar);
        porFormaPagamentoOrdenar.setText("POR FORMA DE PAGAMENTO");

        grupoOrdenar.add(porEmissorOrdenar);
        porEmissorOrdenar.setText("POR EMISSOR");

        grupoOrdenar.add(porTipoPessoaOrdenar);
        porTipoPessoaOrdenar.setText("POR TIPO DE PESSOA");

        grupoOrdenar.add(porValorCrescente);
        porValorCrescente.setText("POR VALOR CRESCENTE");

        grupoOrdenar.add(porValorDecrescente);
        porValorDecrescente.setText("POR VALOR DECRESCENTE");

        grupoOrdenar.add(porDataMaisAtual);
        porDataMaisAtual.setText("POR DATA MAIS ATUAL");

        grupoOrdenar.add(porDataMaisAntiga);
        porDataMaisAntiga.setText("POR DATA MAIS ANTIGA");

        grupoOrdenar.add(semOrdenacao);
        semOrdenacao.setText("SEM ORDENAÇÃO");

        jLabel4.setText("ORIENTAÇÃO:");

        grupoOrientacao.add(rBtnRetrato);
        rBtnRetrato.setText("RETRATO");

        botaoGeraRelatorio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        botaoGeraRelatorio.setText("GERAR RELATÓRIO");
        botaoGeraRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGeraRelatorioActionPerformed(evt);
            }
        });

        grupoOrientacao.add(rBtnPaisagem);
        rBtnPaisagem.setText("PAISAGEM");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoGeraRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(porEmissorOrdenar)
                            .addComponent(porTipoPessoaOrdenar)
                            .addComponent(porValorCrescente)
                            .addComponent(porValorDecrescente)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(porCodigoCrescente)
                                    .addComponent(porCodigoDecrescente)
                                    .addComponent(porFormaPagamentoOrdenar))
                                .addGap(63, 63, 63)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(semOrdenacao)
                                    .addComponent(porDataMaisAntiga)
                                    .addComponent(porDataMaisAtual)))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rBtnRetrato)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rBtnPaisagem)))
                        .addGap(0, 349, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porCodigoCrescente)
                    .addComponent(porDataMaisAtual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porCodigoDecrescente)
                    .addComponent(porDataMaisAntiga))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(porFormaPagamentoOrdenar)
                    .addComponent(semOrdenacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porEmissorOrdenar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porTipoPessoaOrdenar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porValorCrescente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(porValorDecrescente)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(rBtnRetrato)
                    .addComponent(rBtnPaisagem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoGeraRelatorio)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel4, rBtnPaisagem, rBtnRetrato});

        jTabbedPane1.addTab("ORDENAR", new javax.swing.ImageIcon(getClass().getResource("/icones/ordenar.png")), jPanel6); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaPesquisaClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaPesquisaClienteMouseClicked
        try {
            nomeCliente.setText(listaPesquisaCliente.getSelectedValue());
            cliente = ClienteDAO.retornaTipoCodClienteRelatorio(nomeCliente.getText());
            listaPesquisaCliente.setVisible(false);
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_listaPesquisaClienteMouseClicked

    private void porNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_porNomeActionPerformed

    private void porDiaRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porDiaRadioItemStateChanged
        if (porDiaRadio.isSelected() == true) {
            dia.setEnabled(true);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        } else if (porPeriodoRadio.isSelected() == true) {
            dia.setEnabled(false);
            periodoInicio.setEnabled(true);
            periodoFim.setEnabled(true);
        } else {
            dia.setEnabled(false);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        }
    }//GEN-LAST:event_porDiaRadioItemStateChanged

    private void porPeriodoRadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porPeriodoRadioItemStateChanged
        if (porDiaRadio.isSelected() == true) {
            dia.setEnabled(true);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        } else if (porPeriodoRadio.isSelected() == true) {
            dia.setEnabled(false);
            periodoInicio.setEnabled(true);
            periodoFim.setEnabled(true);
        } else {
            dia.setEnabled(false);
            periodoInicio.setEnabled(false);
            periodoFim.setEnabled(false);
        }
    }//GEN-LAST:event_porPeriodoRadioItemStateChanged

    private void nomeClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomeClienteKeyReleased
        try {
            model.removeAllElements();

            for (String nome : ClienteDAO.retornaPesquisaClientesAproximada(nomeCliente.getText())) {
                model.addElement(nome);
            }

            if (model.isEmpty()) {
                listaPesquisaCliente.setVisible(false);
            } else {
                listaPesquisaCliente.setVisible(true);
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_nomeClienteKeyReleased

    private void porCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porCodigoItemStateChanged
        if (porCodigo.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNome.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoa.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porCodigoItemStateChanged

    private void porNomeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porNomeItemStateChanged
        if (porCodigo.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNome.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoa.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porNomeItemStateChanged

    private void porTipoPessoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTipoPessoaItemStateChanged
        if (porCodigo.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNome.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoa.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porTipoPessoaItemStateChanged

    private void porTodosClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosClientesItemStateChanged
        if (porCodigo.isSelected() == true) {
            comboTipoPessoa.setEnabled(true);
            codigoCliente.setEnabled(true);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porNome.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(true);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        } else if (porTipoPessoa.isSelected() == true) {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(true);
            pessoaJuridica.setEnabled(true);
        } else {
            comboTipoPessoa.setEnabled(false);
            codigoCliente.setEnabled(false);
            nomeCliente.setEnabled(false);
            listaPesquisaCliente.setVisible(false);
            pessoaFisica.setEnabled(false);
            pessoaJuridica.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosClientesItemStateChanged

    private void porEmissorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porEmissorItemStateChanged
        if (porEmissor.isSelected() == true) {
            comboEmissores.setEnabled(true);
        } else {
            comboEmissores.setEnabled(false);
        }
    }//GEN-LAST:event_porEmissorItemStateChanged

    private void porTodosEmissoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosEmissoresItemStateChanged
        if (porEmissor.isSelected() == true) {
            comboEmissores.setEnabled(true);
        } else {
            comboEmissores.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosEmissoresItemStateChanged

    private void porFormaPagamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porFormaPagamentoItemStateChanged
        if (porFormaPagamento.isSelected() == true) {
            comboFormaPagamento.setEnabled(true);
        } else {
            comboFormaPagamento.setEnabled(false);
        }
    }//GEN-LAST:event_porFormaPagamentoItemStateChanged

    private void porTodosFormaDePagamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_porTodosFormaDePagamentoItemStateChanged
        if (porFormaPagamento.isSelected() == true) {
            comboFormaPagamento.setEnabled(true);
        } else {
            comboFormaPagamento.setEnabled(false);
        }
    }//GEN-LAST:event_porTodosFormaDePagamentoItemStateChanged

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        listaPesquisaCliente.setVisible(false);
    }//GEN-LAST:event_jPanel1MouseClicked

    private void campoCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCodigoItemStateChanged
        if (campoCodigo.isSelected() == true) {
            porCodigoCrescente.setEnabled(true);
            porCodigoDecrescente.setEnabled(true);
        } else {
            porCodigoCrescente.setEnabled(false);
            porCodigoDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoCodigoItemStateChanged

    private void campoEmissorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoEmissorItemStateChanged
        if (campoEmissor.isSelected() == true) {
            porEmissorOrdenar.setEnabled(true);
        } else {
            porEmissorOrdenar.setEnabled(false);
        }
    }//GEN-LAST:event_campoEmissorItemStateChanged

    private void campoTipoPessoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoTipoPessoaItemStateChanged
        if (campoTipoPessoa.isSelected() == true) {
            porTipoPessoaOrdenar.setEnabled(true);
        } else {
            porTipoPessoaOrdenar.setEnabled(false);
        }
    }//GEN-LAST:event_campoTipoPessoaItemStateChanged

    private void campoValorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoValorItemStateChanged
        if (campoValor.isSelected() == true) {
            porValorCrescente.setEnabled(true);
            porValorDecrescente.setEnabled(true);
        } else {
            porValorCrescente.setEnabled(false);
            porValorDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoValorItemStateChanged

    private void campoDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoDataItemStateChanged
        if (campoData.isSelected() == true) {
            porDataMaisAntiga.setEnabled(true);
            porDataMaisAtual.setEnabled(true);
        } else {
            porDataMaisAntiga.setEnabled(false);
            porDataMaisAtual.setEnabled(false);
        }
    }//GEN-LAST:event_campoDataItemStateChanged

    private void campoFormaPagamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoFormaPagamentoItemStateChanged
        if (campoFormaPagamento.isSelected() == true) {
            porFormaPagamentoOrdenar.setEnabled(true);
        } else {
            porFormaPagamentoOrdenar.setEnabled(false);
        }
    }//GEN-LAST:event_campoFormaPagamentoItemStateChanged

    private void botaoGeraRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGeraRelatorioActionPerformed
        geraRelatorio();
    }//GEN-LAST:event_botaoGeraRelatorioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGeraRelatorio;
    private javax.swing.JCheckBox campoCodigo;
    private javax.swing.JCheckBox campoCodigoCliente;
    private javax.swing.JCheckBox campoData;
    private javax.swing.JCheckBox campoEmissor;
    private javax.swing.JCheckBox campoFormaPagamento;
    private javax.swing.JCheckBox campoNomeCliente;
    private javax.swing.JCheckBox campoTipoPessoa;
    private javax.swing.JCheckBox campoValor;
    private javax.swing.JFormattedTextField codigoCliente;
    private javax.swing.JComboBox<String> comboEmissores;
    private javax.swing.JComboBox<String> comboFormaPagamento;
    private javax.swing.JComboBox<String> comboTipoPessoa;
    private com.toedter.calendar.JDateChooser dia;
    private javax.swing.ButtonGroup grupoCliente;
    private javax.swing.ButtonGroup grupoEmissor;
    private javax.swing.ButtonGroup grupoFormaPagamento;
    private javax.swing.ButtonGroup grupoOrdenar;
    private javax.swing.ButtonGroup grupoOrientacao;
    private javax.swing.ButtonGroup grupoPeriodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> listaPesquisaCliente;
    private javax.swing.JTextField nomeCliente;
    private com.toedter.calendar.JDateChooser periodoFim;
    private com.toedter.calendar.JDateChooser periodoInicio;
    private javax.swing.JRadioButton pessoaFisica;
    private javax.swing.JRadioButton pessoaJuridica;
    private javax.swing.JRadioButton porCodigo;
    private javax.swing.JRadioButton porCodigoCrescente;
    private javax.swing.JRadioButton porCodigoDecrescente;
    private javax.swing.JRadioButton porDataMaisAntiga;
    private javax.swing.JRadioButton porDataMaisAtual;
    private javax.swing.JRadioButton porDiaRadio;
    private javax.swing.JRadioButton porEmissor;
    private javax.swing.JRadioButton porEmissorOrdenar;
    private javax.swing.JRadioButton porFormaPagamento;
    private javax.swing.JRadioButton porFormaPagamentoOrdenar;
    private javax.swing.JRadioButton porNome;
    private javax.swing.JRadioButton porPeriodoRadio;
    private javax.swing.JRadioButton porTipoPessoa;
    private javax.swing.JRadioButton porTipoPessoaOrdenar;
    private javax.swing.JRadioButton porTodosClientes;
    private javax.swing.JRadioButton porTodosEmissores;
    private javax.swing.JRadioButton porTodosFormaDePagamento;
    private javax.swing.JRadioButton porTodosPeriodos;
    private javax.swing.JRadioButton porValorCrescente;
    private javax.swing.JRadioButton porValorDecrescente;
    private javax.swing.JRadioButton rBtnPaisagem;
    private javax.swing.JRadioButton rBtnRetrato;
    private javax.swing.JRadioButton semOrdenacao;
    // End of variables declaration//GEN-END:variables
    //ESTADOS DA UI
    public void estadoInicial() {
        //CLIENTE
        porTodosClientes.setSelected(true);
        comboTipoPessoa.setEnabled(false);
        codigoCliente.setEnabled(false);
        nomeCliente.setEnabled(false);
        pessoaFisica.setEnabled(false);
        pessoaJuridica.setEnabled(false);
        listaPesquisaCliente.setVisible(false);
        //EMISSOR
        porTodosEmissores.setSelected(true);
        comboEmissores.setEnabled(false);
        //PERIODO
        porTodosPeriodos.setSelected(true);
        dia.setEnabled(false);
        periodoInicio.setEnabled(false);
        periodoFim.setEnabled(false);
        //FORMA DE PAGAMENTO
        porTodosFormaDePagamento.setSelected(true);
        comboFormaPagamento.setEnabled(false);
        //ORDENAR
        semOrdenacao.setSelected(true);
        porCodigoCrescente.setEnabled(false);
        porCodigoDecrescente.setEnabled(false);
        porFormaPagamentoOrdenar.setEnabled(false);
        porEmissorOrdenar.setEnabled(false);
        porTipoPessoaOrdenar.setEnabled(false);
        porValorCrescente.setEnabled(false);
        porValorDecrescente.setEnabled(false);
        porDataMaisAtual.setEnabled(false);
        porDataMaisAntiga.setEnabled(false);
        rBtnRetrato.setSelected(true);
    }

    //GERA RELATÓRIO------------------------------------------------------------
    public void geraRelatorio() {

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4, 30, 20, 20, 30);

        String valor = null;

        new Thread() {
            @Override
            public void run() {

                loading.setVisible(true);
                loading.setText("GERANDO RELATÓRIO...");

                String hora = Controle.horaPadraoDiretorio.format(new Date());
                String data = Controle.dataPadraoDiretorio.format(new Date());

                try {
                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempUnix + data + hora + ".pdf"));
                    }

                    document.setMargins(20, 20, 20, 20);
                    if (rBtnPaisagem.isSelected()) {
                        document.setPageSize(PageSize.A4.rotate());
                    } else {
                        document.setPageSize(PageSize.A4);
                    }

                    document.open();

                    document.add(new Paragraph(new Phrase("RELATÓRIO DE NOTAS DE CRÉDITO - "
                            + "DATA E HORA DE EMISSÃO: "
                            + data
                            + " "
                            + hora
                            + " - SISGRAFEX\n\n", FontFactory.getFont("arial.ttf", 9))));

                    document.add(new Paragraph("\n"));

                    PdfPTable tabelaPrincipal = retornaTabelaComConteudo();
                    document.add(tabelaPrincipal);

                    document.close();

                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempUnix + data + hora + ".pdf"));
                    }
                    loading.setVisible(false);
                } catch (IOException | DocumentException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio(loading);
                }
            }
        }.start();
    }

    public int retornaQtdSelecionada() {
        qtdSelecionada = 0;

        if (campoCodigo.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoFormaPagamento.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoEmissor.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoCodigoCliente.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoNomeCliente.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoTipoPessoa.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoValor.isSelected() == true) {
            qtdSelecionada += 1;
        }
        if (campoData.isSelected() == true) {
            qtdSelecionada += 1;
        }

        return qtdSelecionada;
    }

    public PdfPTable retornaTabela() {
        int qtdSelecionada = retornaQtdSelecionada();
        PdfPTable retorno = null;
        PdfPCell celula = null;

        switch (qtdSelecionada) {
            case 1:
                retorno = new PdfPTable(new float[]{5f});
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("NOME DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("FORMA DE PAGAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 2:
                retorno = new PdfPTable(new float[]{5f, 5f});
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("NOME DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("FORMA DE PAGAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 3:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f});
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("NOME DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("FORMA DE PAGAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 4:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f});
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("NOME DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("FORMA DE PAGAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 5:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f});
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("NOME DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("FORMA DE PAGAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 6:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f});
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("NOME DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("FORMA DE PAGAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 7:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f});
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("NOME DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("FORMA DE PAGAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            case 8:
                retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f});
                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("EMISSOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("CÓDIGO DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("NOME DO CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("VALOR", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("DATA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    celula = new PdfPCell(new Phrase("FORMA DE PAGAMENTO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                break;
            default:
                break;
        }

        retorno.setWidthPercentage(100);
        return retorno;
    }

    public PdfPTable retornaTabelaComConteudo() {
        try {
            RelatoriosFinanceiroDAO dao = new RelatoriosFinanceiroDAO();
            PdfPTable retorno = retornaTabela();
            PdfPCell celula = null;

            String tipoCondicaoCliente = null;
            String tipoCondicaoEmissor = null;
            String tipoCondicaoPeriodo = null;
            String tipoCondicaoFormaPagamento = null;
            String tipoCondicaoOrdenar = null;
            String emissorAux = null;
            String periodoInicioAux = null;
            String periodoFimAux = null;
            String formaPagamentoAux = null;
            Double valorTotal = 0.0;
            DecimalFormat df = new DecimalFormat("###,##0.00");

            if (porCodigo.isSelected() == true) {
                cliente = new Cliente();
                tipoCondicaoCliente = "POR CÓDIGO";
                cliente.setTipoPessoa((byte) Byte.valueOf(comboTipoPessoa.getSelectedItem().toString().substring(0, 1)));
                cliente.setCodigo(Integer.valueOf(codigoCliente.getText()));
            } else if (porNome.isSelected() == true) {
                tipoCondicaoCliente = "POR NOME";
            } else if (porTipoPessoa.isSelected() == true) {
                cliente = new Cliente();
                tipoCondicaoCliente = "POR TIPO PESSOA";
                cliente.setTipoPessoa(pessoaFisica.isSelected() ? (byte) 1 : (byte) 2);
            } else {
                cliente = new Cliente();
                tipoCondicaoCliente = "";
                cliente.setTipoPessoa((byte) 0);
            }

            if (porEmissor.isSelected() == true) {
                tipoCondicaoEmissor = "POR EMISSOR";
                emissorAux = comboEmissores.getSelectedItem().toString().substring(0, 3);
            } else {
                tipoCondicaoEmissor = "";
            }

            if (porDiaRadio.isSelected() == true) {
                tipoCondicaoPeriodo = "POR DIA";
                periodoInicioAux = Controle.dataPadrao.format(dia.getDate());
                periodoFimAux = "";
            } else if (porPeriodoRadio.isSelected() == true) {
                tipoCondicaoPeriodo = "POR PERIODO";
                periodoInicioAux = Controle.dataPadrao.format(periodoInicio.getDate());
                periodoFimAux = Controle.dataPadrao.format(periodoFim.getDate());
            } else {
                tipoCondicaoPeriodo = "";
                periodoInicioAux = "";
                periodoFimAux = "";
            }

            if (porFormaPagamento.isSelected() == true) {
                tipoCondicaoFormaPagamento = "POR FORMA DE PAGAMENTO";
                formaPagamentoAux = comboFormaPagamento.getSelectedItem().toString().substring(0, 1);
            } else {
                tipoCondicaoFormaPagamento = "";
                formaPagamentoAux = "";
            }

            if (porCodigoCrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR CÓDIGO CRESCENTE";
            } else if (porCodigoDecrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR CÓDIGO DECRESCENTE";
            } else if (porFormaPagamentoOrdenar.isSelected() == true) {
                tipoCondicaoOrdenar = "POR FORMA DE PAGAMENTO";
            } else if (porEmissorOrdenar.isSelected() == true) {
                tipoCondicaoOrdenar = "POR EMISSOR";
            } else if (porTipoPessoaOrdenar.isSelected() == true) {
                tipoCondicaoOrdenar = "POR TIPO DE PESSOA";
            } else if (porValorCrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR VALOR CRESCENTE";
            } else if (porValorDecrescente.isSelected() == true) {
                tipoCondicaoOrdenar = "POR VALOR DECRESCENTE";
            } else if (porDataMaisAtual.isSelected() == true) {
                tipoCondicaoOrdenar = "POR DATA MAIS ATUAL";
            } else if (porDataMaisAntiga.isSelected() == true) {
                tipoCondicaoOrdenar = "POR DATA MAIS ANTIGA";
            } else {
                tipoCondicaoOrdenar = "";
            }

            for (NotaCredito bean : dao.retornaConteudoRelatorioCredito(campoCodigo.isSelected(),
                    campoFormaPagamento.isSelected(),
                    campoEmissor.isSelected(),
                    campoCodigoCliente.isSelected(),
                    campoNomeCliente.isSelected(),
                    campoTipoPessoa.isSelected(),
                    campoValor.isSelected(),
                    campoData.isSelected(),
                    tipoCondicaoCliente,
                    tipoCondicaoEmissor,
                    tipoCondicaoPeriodo,
                    tipoCondicaoFormaPagamento,
                    tipoCondicaoOrdenar,
                    cliente.getTipoPessoa(),
                    String.valueOf(cliente.getCodigo()),
                    emissorAux,
                    periodoInicioAux,
                    periodoFimAux,
                    formaPagamentoAux)) {

                if (campoCodigo.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getCod()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoEmissor.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getCodEmissor()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCodigoCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getCodCliente()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(String.valueOf(bean.getNomeCliente()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected() == true) {
                    if (bean.getTipoPessoa() == 1) {
                        celula = new PdfPCell(new Phrase("PF", FontFactory.getFont("arial.ttf", 6)));
                    } else if (bean.getTipoPessoa() == 2) {
                        celula = new PdfPCell(new Phrase("PJ", FontFactory.getFont("arial.ttf", 6)));
                    }
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoValor.isSelected() == true) {
                    valorTotal = valorTotal + bean.getValor();
                    celula = new PdfPCell(new Phrase("R$" + df.format(bean.getValor()), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoData.isSelected() == true) {
                    celula = new PdfPCell(new Phrase(bean.getData(), FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoFormaPagamento.isSelected() == true) {
                    if (bean.getFormaPagamento() == 1) {
                        celula = new PdfPCell(new Phrase("1 - PRÉ-EMPENHO", FontFactory.getFont("arial.ttf", 6)));
                    } else if (bean.getFormaPagamento() == 2) {
                        celula = new PdfPCell(new Phrase("2 - TRANSFERÊNCIA ENTRE CONTAS", FontFactory.getFont("arial.ttf", 6)));
                    } else if (bean.getFormaPagamento() == 3) {
                        celula = new PdfPCell(new Phrase("3 - NOTA DE CRÉDITO", FontFactory.getFont("arial.ttf", 6)));
                    } else if (bean.getFormaPagamento() == 4) {
                        celula = new PdfPCell(new Phrase("4 - GRU", FontFactory.getFont("arial.ttf", 6)));
                    }
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
            }

            if (campoValor.isSelected() == true) {
                celula = new PdfPCell(new Phrase("VALOR TOTAL: R$ " + df.format(valorTotal), FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setColspan(qtdSelecionada);
                celula.setHorizontalAlignment(Element.ALIGN_RIGHT);
                retorno.addCell(celula);
            }

            return retorno;
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
            return null;
        }
    }

}
