/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.cadastros.clientes;

import model.dao.ClienteDAO;
import ui.relatorios.financeiro.*;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.text.Element;
import entities.sisgrafex.Cliente;
import exception.EnvioExcecao;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import ui.controle.Controle;

/**
 *
 * @author spd3
 */
public class RelatorioContabilidade extends javax.swing.JInternalFrame {

    DefaultListModel model = new DefaultListModel();
    int qtdSelecionada = 0;
    public static Cliente cliente;

    JLabel loading;

    private static RelatorioContabilidade relatorioContabilidade;

    public static RelatorioContabilidade getInstancia(JLabel loading) {
        return new RelatorioContabilidade(loading);
    }

    public RelatorioContabilidade(JLabel loading) {
        initComponents();
        this.loading = loading;

        estadoInicial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoCliente = new javax.swing.ButtonGroup();
        grupoOpOrcamento = new javax.swing.ButtonGroup();
        grupoEmissor = new javax.swing.ButtonGroup();
        grupoPeriodo = new javax.swing.ButtonGroup();
        grupoTransporte = new javax.swing.ButtonGroup();
        grupoOrdenar = new javax.swing.ButtonGroup();
        grupoTipoPessoa = new javax.swing.ButtonGroup();
        grupoOrientacao = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        rBtnCondPj = new javax.swing.JRadioButton();
        rBtnCondPf = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        campoCodigo = new javax.swing.JCheckBox();
        campoNomeCliente = new javax.swing.JCheckBox();
        campoTipoPessoa = new javax.swing.JCheckBox();
        campoTipoDoc = new javax.swing.JCheckBox();
        campoCredito = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        rBtnOrdCodCrescente = new javax.swing.JRadioButton();
        rBtnOrdCodDecrescente = new javax.swing.JRadioButton();
        rBtnOrdSem = new javax.swing.JRadioButton();
        btnGerarRelatorio = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rBtnRetrato = new javax.swing.JRadioButton();
        rBtnPaisagem = new javax.swing.JRadioButton();
        rBtnOrdNomeCrescente = new javax.swing.JRadioButton();
        rBtnOrdNomeDecrescente = new javax.swing.JRadioButton();

        setTitle("RELATÓRIO DE CONTABILIDADE");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/financeiro.png"))); // NOI18N

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        grupoTipoPessoa.add(rBtnCondPj);
        rBtnCondPj.setText("PESSOA JURÍDICA (2/PJ)");

        grupoTipoPessoa.add(rBtnCondPf);
        rBtnCondPf.setText("PESSOA FÍSICA (1/PF)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(rBtnCondPf)
                .addGap(5, 5, 5)
                .addComponent(rBtnCondPj)
                .addGap(0, 215, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rBtnCondPf)
                    .addComponent(rBtnCondPj))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CLIENTE", new javax.swing.ImageIcon(getClass().getResource("/icones/cliente.png")), jPanel1); // NOI18N

        campoCodigo.setText("CÓDIGO");
        campoCodigo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCodigoItemStateChanged(evt);
            }
        });

        campoNomeCliente.setText("NOME DO CLIENTE");
        campoNomeCliente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoNomeClienteItemStateChanged(evt);
            }
        });

        campoTipoPessoa.setText("TIPO DE PESSOA");
        campoTipoPessoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoTipoPessoaItemStateChanged(evt);
            }
        });

        campoTipoDoc.setText("TIPO DOCUMENTO - NÚMERO");
        campoTipoDoc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoTipoDocItemStateChanged(evt);
            }
        });

        campoCredito.setText("CRÉDITO");
        campoCredito.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCreditoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoCodigo)
                    .addComponent(campoTipoPessoa)
                    .addComponent(campoNomeCliente)
                    .addComponent(campoTipoDoc)
                    .addComponent(campoCredito))
                .addContainerGap(327, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(campoCodigo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNomeCliente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoTipoPessoa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoTipoDoc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoCredito)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CAMPOS", new javax.swing.ImageIcon(getClass().getResource("/icones/campos.png")), jPanel6); // NOI18N

        grupoOrdenar.add(rBtnOrdCodCrescente);
        rBtnOrdCodCrescente.setText("POR CÓDIGO CRESCENTE");

        grupoOrdenar.add(rBtnOrdCodDecrescente);
        rBtnOrdCodDecrescente.setText("POR CÓDIGO DECRESCENTE");

        grupoOrdenar.add(rBtnOrdSem);
        rBtnOrdSem.setText("SEM ORDENAÇÃO");

        btnGerarRelatorio.setText("GERAR RELATÓRIO");
        btnGerarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarRelatorioActionPerformed(evt);
            }
        });

        jLabel3.setText("ORIENTAÇÃO:");

        grupoOrientacao.add(rBtnRetrato);
        rBtnRetrato.setText("RETRATO");

        grupoOrientacao.add(rBtnPaisagem);
        rBtnPaisagem.setText("PAISAGEM");

        grupoOrdenar.add(rBtnOrdNomeCrescente);
        rBtnOrdNomeCrescente.setText("POR NOME CRESCENTE");

        grupoOrdenar.add(rBtnOrdNomeDecrescente);
        rBtnOrdNomeDecrescente.setText("POR NOME DECRESCENTE");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGerarRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rBtnOrdNomeCrescente)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rBtnRetrato)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rBtnPaisagem))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rBtnOrdCodDecrescente)
                                    .addComponent(rBtnOrdCodCrescente))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rBtnOrdNomeDecrescente)
                                    .addComponent(rBtnOrdSem))))
                        .addGap(0, 146, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(rBtnOrdCodCrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rBtnOrdCodDecrescente))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(rBtnOrdNomeDecrescente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rBtnOrdSem)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rBtnOrdNomeCrescente)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(rBtnRetrato)
                    .addComponent(rBtnPaisagem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGerarRelatorio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, rBtnPaisagem, rBtnRetrato});

        jTabbedPane1.addTab("ORDENAR", new javax.swing.ImageIcon(getClass().getResource("/icones/ordenar.png")), jPanel5); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGerarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarRelatorioActionPerformed
        geraRelatorio();
    }//GEN-LAST:event_btnGerarRelatorioActionPerformed

    private void campoNomeClienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoNomeClienteItemStateChanged
        if (campoNomeCliente.isSelected()) {
            rBtnOrdNomeCrescente.setEnabled(true);
            rBtnOrdNomeDecrescente.setEnabled(true);
        } else {
            rBtnOrdNomeCrescente.setEnabled(false);
            rBtnOrdNomeDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoNomeClienteItemStateChanged

    private void campoCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCodigoItemStateChanged
        if (campoCodigo.isSelected() == true) {
            rBtnOrdCodCrescente.setEnabled(true);
            rBtnOrdCodDecrescente.setEnabled(true);
        } else {
            rBtnOrdCodCrescente.setEnabled(false);
            rBtnOrdCodDecrescente.setEnabled(false);
        }
    }//GEN-LAST:event_campoCodigoItemStateChanged

    private void campoCreditoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCreditoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCreditoItemStateChanged

    private void campoTipoDocItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoTipoDocItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_campoTipoDocItemStateChanged

    private void campoTipoPessoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoTipoPessoaItemStateChanged

    }//GEN-LAST:event_campoTipoPessoaItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGerarRelatorio;
    private javax.swing.JCheckBox campoCodigo;
    private javax.swing.JCheckBox campoCredito;
    private javax.swing.JCheckBox campoNomeCliente;
    private javax.swing.JCheckBox campoTipoDoc;
    private javax.swing.JCheckBox campoTipoPessoa;
    private javax.swing.ButtonGroup grupoCliente;
    private javax.swing.ButtonGroup grupoEmissor;
    private javax.swing.ButtonGroup grupoOpOrcamento;
    private javax.swing.ButtonGroup grupoOrdenar;
    private javax.swing.ButtonGroup grupoOrientacao;
    private javax.swing.ButtonGroup grupoPeriodo;
    private javax.swing.ButtonGroup grupoTipoPessoa;
    private javax.swing.ButtonGroup grupoTransporte;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rBtnCondPf;
    private javax.swing.JRadioButton rBtnCondPj;
    private javax.swing.JRadioButton rBtnOrdCodCrescente;
    private javax.swing.JRadioButton rBtnOrdCodDecrescente;
    private javax.swing.JRadioButton rBtnOrdNomeCrescente;
    private javax.swing.JRadioButton rBtnOrdNomeDecrescente;
    private javax.swing.JRadioButton rBtnOrdSem;
    private javax.swing.JRadioButton rBtnPaisagem;
    private javax.swing.JRadioButton rBtnRetrato;
    // End of variables declaration//GEN-END:variables
    //ESTADOS DA UI-------------------------------------------------------------
    public void estadoInicial() {
        //CLIENTES
        rBtnCondPf.setSelected(true);
        //ORDENAR---------------------------------------------------------------
        rBtnOrdCodCrescente.setEnabled(false);
        rBtnOrdCodDecrescente.setEnabled(false);
        rBtnOrdNomeCrescente.setEnabled(false);
        rBtnOrdNomeDecrescente.setEnabled(false);
        rBtnOrdSem.setEnabled(true);
        rBtnOrdSem.setSelected(true);
        //ORIENTAÇÃO
        rBtnRetrato.setSelected(true);
    }

    //GERA RELATÓRIO------------------------------------------------------------
    public void geraRelatorio() {

        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4, 30, 20, 20, 30);

        String valor = null;

        new Thread() {
            @Override
            public void run() {
                try {
                    loading.setVisible(true);
                    loading.setText("GERANDO RELATÓRIO...");

                    String hora = Controle.horaPadraoDiretorio.format(new Date());
                    String data = Controle.dataPadraoDiretorio.format(new Date());

                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        PdfWriter.getInstance(document, new FileOutputStream(Controle.urlTempUnix + data + hora + ".pdf"));
                    }

                    document.setMargins(20, 20, 20, 20);

                    if (rBtnPaisagem.isSelected()) {
                        document.setPageSize(PageSize.A4.rotate());
                    } else {
                        document.setPageSize(PageSize.A4);
                    }

                    document.open();

                    Image imagem = Image.getInstance(getClass().getResource("/ui/orcamentos/operacoes/cabecalhoPropostaPng.png"));
                    imagem.setAlignment(1);
                    imagem.scaleToFit(500, 1000);
                    document.add(imagem);

                    document.add(new Paragraph("\n"));

                    Paragraph p = new Paragraph("RELATÓRIO DE DE CONTABILIDADE", FontFactory.getFont("arial.ttf", 12, Font.BOLD));
                    p.setAlignment(1);
                    document.add(p);

                    document.add(new Paragraph("\n"));

                    PdfPTable tabelaPrincipal = retornaTabelaComConteudo();
                    document.add(tabelaPrincipal);

                    document.close();

                    if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempWindows + data + hora + ".pdf"));
                    } else {
                        java.awt.Desktop.getDesktop().open(new File(Controle.urlTempUnix + data + hora + ".pdf"));
                    }
                } catch (DocumentException | IOException  ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio(loading);
                }
                loading.setVisible(false);
            }
        }.start();
    }

    public int retornaQtdSelecionada() {
        qtdSelecionada = 0;

        if (campoCodigo.isSelected()) {
            qtdSelecionada += 1;
        }
        if (campoNomeCliente.isSelected()) {
            qtdSelecionada += 1;
        }
        if (campoTipoPessoa.isSelected()) {
            qtdSelecionada += 1;
        }
        if (campoTipoDoc.isSelected()) {
            qtdSelecionada += 1;
        }
        if (campoCredito.isSelected()) {
            qtdSelecionada += 1;
        }

        return qtdSelecionada;
    }

    public PdfPTable retornaTabela() {
        int qtdSelecionada = retornaQtdSelecionada();
        PdfPTable retorno = null;
        PdfPCell celula = null;

        if (qtdSelecionada == 1) {
            retorno = new PdfPTable(new float[]{5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected()) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected()) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoDoc.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO DOC - Nº", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCredito.isSelected()) {
                celula = new PdfPCell(new Phrase("CRÉDITO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 2) {
            retorno = new PdfPTable(new float[]{5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected()) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected()) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoDoc.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO DOC - Nº", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCredito.isSelected()) {
                celula = new PdfPCell(new Phrase("CRÉDITO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 3) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected()) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected()) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoDoc.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO DOC - Nº", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCredito.isSelected()) {
                celula = new PdfPCell(new Phrase("CRÉDITO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 4) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected()) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected()) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoDoc.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO DOC - Nº", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCredito.isSelected()) {
                celula = new PdfPCell(new Phrase("CRÉDITO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        if (qtdSelecionada == 5) {
            retorno = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f});
            retorno.setWidthPercentage(100);

            if (campoCodigo.isSelected()) {
                celula = new PdfPCell(new Phrase("CÓDIGO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoNomeCliente.isSelected()) {
                celula = new PdfPCell(new Phrase("NOME CLIENTE", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoPessoa.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO PESSOA", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoTipoDoc.isSelected()) {
                celula = new PdfPCell(new Phrase("TIPO DOC - Nº", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
            if (campoCredito.isSelected()) {
                celula = new PdfPCell(new Phrase("CRÉDITO", FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
                celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                retorno.addCell(celula);
            }
        }
        return retorno;
    }

    public PdfPTable retornaTabelaComConteudo() {
        try {
            RelatoriosFinanceiroDAO dao = new RelatoriosFinanceiroDAO();
            PdfPTable retorno = retornaTabela();
            PdfPCell celula = null;

            Double valorTotal = 0.0;
            DecimalFormat df = new DecimalFormat("###,##0.00");

            byte condCliente = 0;
            condCliente = rBtnCondPf.isSelected() ? (byte) 1 : (byte) 2;

            byte condOrdenar = 0;
            if (rBtnOrdCodCrescente.isSelected()) {
                condOrdenar = 1;
            } else if (rBtnOrdCodDecrescente.isSelected()) {
                condOrdenar = 2;
            } else if (rBtnOrdNomeCrescente.isSelected()) {
                condOrdenar = 3;
            } else if (rBtnOrdNomeDecrescente.isSelected()) {
                condOrdenar = 4;
            }

            for (Cliente cliente : ClienteDAO.retornaContRelContabilidade(condCliente, condOrdenar)) {
                if (campoCodigo.isSelected()) {
                    celula = new PdfPCell(new Phrase(String.valueOf(cliente.getCodigo()),
                            FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoNomeCliente.isSelected()) {
                    celula = new PdfPCell(new Phrase(cliente.getTipoPessoa() == 1 ? cliente.getNome()
                            : cliente.getNome() + " - " + cliente.getNomeFantasia(),
                            FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoPessoa.isSelected()) {
                    if (cliente.getTipoPessoa() == 1) {
                        celula = new PdfPCell(new Phrase("PF", FontFactory.getFont("arial.ttf", 6)));
                    } else if (cliente.getTipoPessoa() == 2) {
                        celula = new PdfPCell(new Phrase("PJ", FontFactory.getFont("arial.ttf", 6)));
                    }
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoTipoDoc.isSelected()) {
                    celula = new PdfPCell(new Phrase(cliente.getTipoPessoa() == 1 ? "CPF - " + cliente.getCpf()
                            : "CNPJ - " + cliente.getCnpj(),
                            FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
                if (campoCredito.isSelected()) {
                    valorTotal = valorTotal + cliente.getCredito();
                    celula = new PdfPCell(new Phrase("R$" + df.format(cliente.getCredito()),
                            FontFactory.getFont("arial.ttf", 6)));
                    celula.setHorizontalAlignment(Element.ALIGN_CENTER);
                    retorno.addCell(celula);
                }
            }

            celula = new PdfPCell(new Phrase("VALOR TOTAL: R$ " + df.format(valorTotal), FontFactory.getFont("arial.ttf", 8, Font.BOLD)));
            celula.setColspan(qtdSelecionada);
            celula.setHorizontalAlignment(Element.ALIGN_RIGHT);
            retorno.addCell(celula);

            return retorno;
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
        return null;
    }
}
