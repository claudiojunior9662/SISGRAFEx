/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.cadastros.clientes;

import model.dao.ClienteDAO;
import connection.ConnectionFactory;
import entities.sisgrafex.Cliente;
import entities.sisgrafex.Orcamento;
import exception.ClienteNaoEncontradoException;
import exception.EnvioExcecao;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import entities.sisgrafex.Contato;
import ui.cadastros.contatos.ContatoPesquisa;
import entities.sisgrafex.Endereco;
import model.dao.ContatoDAO;
import model.dao.EnderecoDAO;
import ui.cadastros.enderecos.EnderecoPesquisa;
import ui.cadastros.notas.NCFrame;
import ui.controle.Controle;
import ui.login.TelaAutenticacao;
import ui.principal.GerenteJanelas;

/**
 *
 * @author 1113778771
 */
public class ClienteCadastro extends javax.swing.JInternalFrame {

    public static Integer CODIGO_CLIENTE = 0;
    /**
     * Define o tipo de pessoa 1 - Pessoa física, 2 - Pessoa jurídica
     */
    public static byte TIPO_PESSOA = 0;
    private final static JLabel loading = null;
    private final GerenteJanelas gj;
    /**
     * 1 - Orçamento, 3 - Nota de crédito
     */
    private static byte CLASSE_PAI;
    /**
     * Define a linha de edição selecionada na tabela de endereços
     */
    private int linhaEdicaoEndereco = 0;
    /**
     * Define a linha de edição selecionada na tabela de contatos
     */
    private int linhaEdicaoContato = 0;

    public static int codEndereco = 0;
    public static int codContato = 0;
    /**
     * São definidas quando o usuário selecionar para incluir um novo endereço,
     * um novo contato ou novo cliente
     */
    public static boolean novoEndereco = false;
    public static boolean novoContato = false;
    public static boolean novoCliente = false;
    /**
     * É definida quando o usuário seleciona para editar o cliente
     */
    public static boolean editarCliente = false;
    /**
     * Define a máscara do telefone, se é fixo ou celular
     */
    MaskFormatter mascaraTelefone = null;
    /**
     * Define qual a tela que está selecionando
     */
    public static String tipoSelecionar = null;
    /**
     * Informa se é a tela de novo ou editar
     */
    public static boolean orcamentoSelecionar = false;
    public static boolean orcamentoEditarSelecionar = false;

    private static ClienteCadastro cadastroClientes2Novo;

    public static ClienteCadastro getInstancia(JLabel loading, GerenteJanelas gj, byte CLASSE_PAI) {
        return new ClienteCadastro(loading, gj, CLASSE_PAI);
    }

    /**
     * Creates new form CadastroClientes2Novo
     */
    public ClienteCadastro(JLabel loading, GerenteJanelas gj, byte CLASSE_PAI) {
        initComponents();
        loading = loading;
        this.gj = gj;
        this.CLASSE_PAI = CLASSE_PAI;
        estado1();
        codigoAtendente.setText(TelaAutenticacao.getUsrLogado().getCodigo());
        nomeAtendente.setText(TelaAutenticacao.getUsrLogado().getNome());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        nomeCliente = new javax.swing.JTextField();
        nomeFantasia = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        atividade = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        filialColigada = new javax.swing.JTextField();
        cpf = new javax.swing.JFormattedTextField();
        cnpj = new javax.swing.JFormattedTextField();
        jLabel21 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        codigoAtendente = new javax.swing.JTextField();
        nomeAtendente = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        observacoes = new javax.swing.JTextArea();
        creditoDisponivel = new javax.swing.JFormattedTextField();
        codigo = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        pessoaFisica = new javax.swing.JCheckBox();
        pessoaJuridica = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        botaoPesquisarEnderecos = new javax.swing.JButton();
        botaoIncluirEnderecos = new javax.swing.JButton();
        botaoEditarEnderecos = new javax.swing.JButton();
        botaoGravarEnderecos = new javax.swing.JButton();
        botaoCancelarEnderecos = new javax.swing.JButton();
        botaoRetirarTabelaEnderecos = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        botaoBuscar = new javax.swing.JButton();
        logradouro = new javax.swing.JTextField();
        bairro = new javax.swing.JTextField();
        uf = new javax.swing.JTextField();
        cidade = new javax.swing.JTextField();
        complemento = new javax.swing.JTextField();
        tipoEndereco = new javax.swing.JComboBox<>();
        cep = new javax.swing.JFormattedTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaEnderecos = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaContatos = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        email = new javax.swing.JTextField();
        nomeContato = new javax.swing.JTextField();
        departamento = new javax.swing.JTextField();
        tipoTelefone = new javax.swing.JComboBox<>();
        dicaFormato = new javax.swing.JLabel();
        telefone = new javax.swing.JFormattedTextField();
        ramal = new javax.swing.JFormattedTextField();
        tipoTelefone2 = new javax.swing.JComboBox<>();
        dicaFormato2 = new javax.swing.JLabel();
        telefone2 = new javax.swing.JFormattedTextField();
        ramal2 = new javax.swing.JFormattedTextField();
        jPanel13 = new javax.swing.JPanel();
        botaoPesquisarContatos = new javax.swing.JButton();
        botaoIncluirContatos = new javax.swing.JButton();
        botaoEditarContatos = new javax.swing.JButton();
        botaoGravarContatos = new javax.swing.JButton();
        botaoCancelarContatos = new javax.swing.JButton();
        botaoRetirarTabelaContatos = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        radioMesAnoOrcamentos = new javax.swing.JRadioButton();
        radioEmissorOrcamentos = new javax.swing.JRadioButton();
        mesOrcamentos = new com.toedter.calendar.JMonthChooser();
        anoOrcamentos = new com.toedter.calendar.JYearChooser();
        textoOrcamentos = new javax.swing.JTextField();
        filtrarOrcamentos = new javax.swing.JButton();
        radioAnoOrcamentos = new javax.swing.JRadioButton();
        limparFiltrosOrcamentos = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaOrcamentos = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        quantidadeOrcamentos = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        valorTotalOrcamentos = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        botaoPesquisarClientes = new javax.swing.JButton();
        botaoIncluirClientes = new javax.swing.JButton();
        botaoEditarClientes = new javax.swing.JButton();
        botaoDesativarClientes = new javax.swing.JButton();
        botaoGravarClientes = new javax.swing.JButton();
        botaoCancelarClientes = new javax.swing.JButton();
        botaoSelecionarOrcamento = new javax.swing.JButton();

        setResizable(true);
        setTitle("CADASTRO DE CLIENTES");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cliente.png"))); // NOI18N

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "DADOS PESSOAIS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        nomeCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("NOME DO CLIENTE*"));

        nomeFantasia.setBorder(javax.swing.BorderFactory.createTitledBorder("NOME FANTASIA*"));
        nomeFantasia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeFantasiaActionPerformed(evt);
            }
        });

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "IDENTIFICAÇÃO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 11))); // NOI18N

        atividade.setBorder(javax.swing.BorderFactory.createTitledBorder("ATIVIDADE*"));
        atividade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atividadeActionPerformed(evt);
            }
        });

        filialColigada.setBorder(javax.swing.BorderFactory.createTitledBorder("FILIAL/COLIGADA/RELACIONADA A*"));

        cpf.setBorder(javax.swing.BorderFactory.createTitledBorder("CPF*"));
        try {
            cpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        cpf.setText("");
        cpf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cpfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cpfFocusLost(evt);
            }
        });

        cnpj.setBorder(javax.swing.BorderFactory.createTitledBorder("CNPJ*"));
        try {
            cnpj.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        cnpj.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cnpjFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(cpf, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(atividade, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(filialColigada, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {atividade, cnpj, cpf});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cnpj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(atividade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filialColigada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jLabel21))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cnpj, cpf});

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ATENDENTE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        codigoAtendente.setBorder(javax.swing.BorderFactory.createTitledBorder("CÓDIGO DO ATENDENTE"));

        nomeAtendente.setBorder(javax.swing.BorderFactory.createTitledBorder("NOME DO ATENDENTE"));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codigoAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nomeAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codigoAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeAtendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "OBSERVAÇÕES DO CLIENTE (MAX 1000 CARACTERES)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 11))); // NOI18N

        observacoes.setColumns(20);
        observacoes.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        observacoes.setLineWrap(true);
        observacoes.setRows(5);
        observacoes.setToolTipText("(Digite a observação aqui)");
        jScrollPane2.setViewportView(observacoes);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        creditoDisponivel.setBorder(javax.swing.BorderFactory.createTitledBorder("CRÉDITO DISPONÍVEL"));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(nomeCliente)
                        .addGap(18, 18, 18)
                        .addComponent(nomeFantasia, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(creditoDisponivel, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeFantasia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(creditoDisponivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, Short.MAX_VALUE))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nomeCliente, nomeFantasia});

        codigo.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        codigo.setForeground(new java.awt.Color(255, 0, 0));
        codigo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        codigo.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "CÓDIGO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "TIPO DE CLIENTE", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        buttonGroup1.add(pessoaFisica);
        pessoaFisica.setText("PESSOA FÍSICA");
        pessoaFisica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pessoaFisicaItemStateChanged(evt);
            }
        });
        pessoaFisica.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pessoaFisicaStateChanged(evt);
            }
        });
        pessoaFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pessoaFisicaActionPerformed(evt);
            }
        });

        buttonGroup1.add(pessoaJuridica);
        pessoaJuridica.setText("PESSOA JURÍDICA");
        pessoaJuridica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pessoaJuridicaItemStateChanged(evt);
            }
        });
        pessoaJuridica.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pessoaJuridicaStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(pessoaFisica)
                .addGap(18, 18, 18)
                .addComponent(pessoaJuridica)
                .addContainerGap(746, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pessoaFisica)
                    .addComponent(pessoaJuridica))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {codigo, jPanel19});

        jTabbedPane1.addTab("INFORMAÇÕES DO CLIENTE", new javax.swing.ImageIcon(getClass().getResource("/icones/cliente.png")), jPanel2, "Informações principais do cliente"); // NOI18N

        jPanel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        botaoPesquisarEnderecos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        botaoPesquisarEnderecos.setText("PESQUISAR ENDEREÇO");
        botaoPesquisarEnderecos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarEnderecosActionPerformed(evt);
            }
        });

        botaoIncluirEnderecos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        botaoIncluirEnderecos.setText("INCLUIR ENDEREÇO");
        botaoIncluirEnderecos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIncluirEnderecosActionPerformed(evt);
            }
        });

        botaoEditarEnderecos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/editar.png"))); // NOI18N
        botaoEditarEnderecos.setText("EDITAR ENDEREÇO");
        botaoEditarEnderecos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarEnderecosActionPerformed(evt);
            }
        });

        botaoGravarEnderecos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/gravar.png"))); // NOI18N
        botaoGravarEnderecos.setText("GRAVAR ENDEREÇO");
        botaoGravarEnderecos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGravarEnderecosActionPerformed(evt);
            }
        });

        botaoCancelarEnderecos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        botaoCancelarEnderecos.setText("CANCELAR");
        botaoCancelarEnderecos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarEnderecosActionPerformed(evt);
            }
        });

        botaoRetirarTabelaEnderecos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove.png"))); // NOI18N
        botaoRetirarTabelaEnderecos.setText("RETIRAR DA TABELA");
        botaoRetirarTabelaEnderecos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRetirarTabelaEnderecosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoPesquisarEnderecos, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoIncluirEnderecos, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoEditarEnderecos, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoGravarEnderecos, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoCancelarEnderecos, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoRetirarTabelaEnderecos, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(botaoPesquisarEnderecos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIncluirEnderecos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEditarEnderecos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoGravarEnderecos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botaoCancelarEnderecos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoRetirarTabelaEnderecos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel14.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ENDEREÇO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 11))); // NOI18N

        botaoBuscar.setText("BUSCAR");
        botaoBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscarActionPerformed(evt);
            }
        });

        logradouro.setBorder(javax.swing.BorderFactory.createTitledBorder("LOGADOURO"));

        bairro.setBorder(javax.swing.BorderFactory.createTitledBorder("BAIRRO"));

        uf.setBorder(javax.swing.BorderFactory.createTitledBorder("UF*"));

        cidade.setBorder(javax.swing.BorderFactory.createTitledBorder("CIDADE*"));

        complemento.setBorder(javax.swing.BorderFactory.createTitledBorder("COMPLEMENTO"));

        tipoEndereco.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "RESIDENCIAL", "COMERCIAL" }));
        tipoEndereco.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO DE ENDEREÇO"));

        cep.setBorder(javax.swing.BorderFactory.createTitledBorder("CEP*"));
        try {
            cep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        cep.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cepFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(complemento)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(tipoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cep, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bairro, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cidade, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uf, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logradouro)))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoBuscar)
                    .addComponent(logradouro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tipoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(complemento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel15Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bairro, botaoBuscar, cep, cidade, logradouro, tipoEndereco, uf});

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(4, 4, 4))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        tabelaEnderecos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "TIPO DE ENDEREÇO", "CEP", "LOGADOURO", "CIDADE", "BAIRRO", "UF", "COMPLEMENTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaEnderecos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaEnderecosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tabelaEnderecos);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("ENDEREÇOS", new javax.swing.ImageIcon(getClass().getResource("/icones/endereço.png")), jPanel7, "Informações sobre os endereços"); // NOI18N

        jPanel16.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tabelaContatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "NOME", "EMAIL", "TELEFONE", "RAMAL", "TELEFONE 2", "RAMAL 2", "DEPARTAMENTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaContatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaContatosMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tabelaContatos);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
        );

        jPanel12.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONTATO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 11))); // NOI18N

        email.setBorder(javax.swing.BorderFactory.createTitledBorder("EMAIL"));
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        nomeContato.setBorder(javax.swing.BorderFactory.createTitledBorder("NOME PARA CONTATO*"));

        departamento.setBorder(javax.swing.BorderFactory.createTitledBorder("DEPARTAMENTO"));
        departamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departamentoActionPerformed(evt);
            }
        });

        tipoTelefone.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "FIXO", "MÓVEL" }));
        tipoTelefone.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO DE TELEFONE PRINCIPAL"));
        tipoTelefone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoTelefoneItemStateChanged(evt);
            }
        });

        dicaFormato.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        telefone.setBorder(javax.swing.BorderFactory.createTitledBorder("NÚMERO"));
        telefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("(##) ####-####"))));

        ramal.setBorder(javax.swing.BorderFactory.createTitledBorder("RAMAL"));
        ramal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        tipoTelefone2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "FIXO", "MÓVEL" }));
        tipoTelefone2.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO DE TELEFONE SECUNDÁRIO"));
        tipoTelefone2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoTelefone2ItemStateChanged(evt);
            }
        });

        dicaFormato2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        telefone2.setBorder(javax.swing.BorderFactory.createTitledBorder("NÚMERO"));
        telefone2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("(##) ####-####"))));

        ramal2.setBorder(javax.swing.BorderFactory.createTitledBorder("RAMAL"));
        ramal2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        ramal2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ramal2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                        .addComponent(nomeContato, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(departamento))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(tipoTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ramal, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tipoTelefone2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(telefone2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ramal2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dicaFormato, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dicaFormato2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel17Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tipoTelefone, tipoTelefone2});

        jPanel17Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {telefone, telefone2});

        jPanel17Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ramal, ramal2});

        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeContato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(departamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ramal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoTelefone2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telefone2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ramal2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dicaFormato, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dicaFormato2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel13.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        botaoPesquisarContatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        botaoPesquisarContatos.setText("PESQUISAR CONTATO");
        botaoPesquisarContatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarContatosActionPerformed(evt);
            }
        });

        botaoIncluirContatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        botaoIncluirContatos.setText("INCLUIR CONTATO");
        botaoIncluirContatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIncluirContatosActionPerformed(evt);
            }
        });

        botaoEditarContatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/editar.png"))); // NOI18N
        botaoEditarContatos.setText("EDITAR CONTATO");
        botaoEditarContatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarContatosActionPerformed(evt);
            }
        });

        botaoGravarContatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/gravar.png"))); // NOI18N
        botaoGravarContatos.setText("GRAVAR CONTATO");
        botaoGravarContatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGravarContatosActionPerformed(evt);
            }
        });

        botaoCancelarContatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        botaoCancelarContatos.setText("CANCELAR");
        botaoCancelarContatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarContatosActionPerformed(evt);
            }
        });

        botaoRetirarTabelaContatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove.png"))); // NOI18N
        botaoRetirarTabelaContatos.setText("RETIRAR DA TABELA");
        botaoRetirarTabelaContatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRetirarTabelaContatosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(botaoPesquisarContatos, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoIncluirContatos, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoEditarContatos, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoGravarContatos, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoCancelarContatos, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoRetirarTabelaContatos, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(botaoPesquisarContatos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIncluirContatos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEditarContatos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoGravarContatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botaoCancelarContatos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoRetirarTabelaContatos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(63, 63, 63)))
                .addGap(0, 0, 0))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("CONTATOS", new javax.swing.ImageIcon(getClass().getResource("/icones/contatos.png")), jPanel8, "Informações sobre os contatos"); // NOI18N

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FILTRAR POR", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N

        buttonGroup2.add(radioMesAnoOrcamentos);
        radioMesAnoOrcamentos.setText("MÊS/ANO");
        radioMesAnoOrcamentos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioMesAnoOrcamentosItemStateChanged(evt);
            }
        });

        buttonGroup2.add(radioEmissorOrcamentos);
        radioEmissorOrcamentos.setText("CÓD EMISSOR");
        radioEmissorOrcamentos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioEmissorOrcamentosItemStateChanged(evt);
            }
        });

        filtrarOrcamentos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/filtro.png"))); // NOI18N
        filtrarOrcamentos.setText("FILTRAR");
        filtrarOrcamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtrarOrcamentosActionPerformed(evt);
            }
        });

        buttonGroup2.add(radioAnoOrcamentos);
        radioAnoOrcamentos.setText("ANO");
        radioAnoOrcamentos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioAnoOrcamentosItemStateChanged(evt);
            }
        });

        limparFiltrosOrcamentos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        limparFiltrosOrcamentos.setText("LIMPAR FILTROS");
        limparFiltrosOrcamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparFiltrosOrcamentosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addComponent(radioMesAnoOrcamentos)
                        .addGap(18, 18, 18)
                        .addComponent(radioAnoOrcamentos))
                    .addComponent(radioEmissorOrcamentos))
                .addGap(33, 33, 33)
                .addComponent(mesOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(anoOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filtrarOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(limparFiltrosOrcamentos)
                .addContainerGap(341, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioMesAnoOrcamentos)
                            .addComponent(radioAnoOrcamentos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioEmissorOrcamentos))
                    .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textoOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filtrarOrcamentos)
                        .addComponent(limparFiltrosOrcamentos))
                    .addComponent(anoOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mesOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel20Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {anoOrcamentos, filtrarOrcamentos, mesOrcamentos, textoOrcamentos});

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ORÇAMENTOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N

        tabelaOrcamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "DATA EMISSÃO", "DATA VALIDADE", "VALOR TOTAL", "STATUS", "EMISSOR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaOrcamentos.setCellSelectionEnabled(true);
        jScrollPane4.setViewportView(tabelaOrcamentos);

        jLabel5.setText("QUANTIDADE:");

        jLabel20.setText("VALOR TOTAL:");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quantidadeOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valorTotalOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valorTotalOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantidadeOrcamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
        );

        jPanel21Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel20, jLabel5, quantidadeOrcamentos, valorTotalOrcamentos});

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ORÇAMENTOS", new javax.swing.ImageIcon(getClass().getResource("/icones/orçamento.png")), jPanel18, "Informações sobre orçamentos anteiores"); // NOI18N

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        botaoPesquisarClientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        botaoPesquisarClientes.setText("PESQUISAR");
        botaoPesquisarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarClientesActionPerformed(evt);
            }
        });

        botaoIncluirClientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        botaoIncluirClientes.setText("INCLUIR");
        botaoIncluirClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIncluirClientesActionPerformed(evt);
            }
        });

        botaoEditarClientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/editar.png"))); // NOI18N
        botaoEditarClientes.setText("EDITAR");
        botaoEditarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarClientesActionPerformed(evt);
            }
        });

        botaoDesativarClientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/desativar.png"))); // NOI18N
        botaoDesativarClientes.setText("DESATIVAR");
        botaoDesativarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDesativarClientesActionPerformed(evt);
            }
        });

        botaoGravarClientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/gravar.png"))); // NOI18N
        botaoGravarClientes.setText("GRAVAR");
        botaoGravarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGravarClientesActionPerformed(evt);
            }
        });

        botaoCancelarClientes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        botaoCancelarClientes.setText("CANCELAR");
        botaoCancelarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarClientesActionPerformed(evt);
            }
        });

        botaoSelecionarOrcamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        botaoSelecionarOrcamento.setText("SELECIONAR");
        botaoSelecionarOrcamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarOrcamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(botaoPesquisarClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(botaoIncluirClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(botaoEditarClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(botaoDesativarClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(botaoGravarClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(botaoCancelarClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(botaoSelecionarOrcamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(45, 45, 45))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoGravarClientes, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(botaoPesquisarClientes, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoIncluirClientes, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoEditarClientes, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoDesativarClientes, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoCancelarClientes, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoSelecionarOrcamento)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {botaoCancelarClientes, botaoDesativarClientes, botaoEditarClientes, botaoGravarClientes, botaoIncluirClientes, botaoPesquisarClientes, botaoSelecionarOrcamento});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1235, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pessoaFisicaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pessoaFisicaItemStateChanged
        if (novoCliente == true) {
            estadoPessoaFisicaNovo();
        } else {
            if (editarCliente == true) {
                estadoEditarCliente();
            }
        }
    }//GEN-LAST:event_pessoaFisicaItemStateChanged

    private void pessoaFisicaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pessoaFisicaStateChanged

    }//GEN-LAST:event_pessoaFisicaStateChanged

    private void pessoaFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pessoaFisicaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pessoaFisicaActionPerformed

    private void pessoaJuridicaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pessoaJuridicaItemStateChanged
        if (novoCliente == true) {
            estadoPessoaJuridicaNovo();
        } else {
            if (editarCliente == true) {
                estadoEditarCliente();
            }
        }
    }//GEN-LAST:event_pessoaJuridicaItemStateChanged

    private void pessoaJuridicaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pessoaJuridicaStateChanged

    }//GEN-LAST:event_pessoaJuridicaStateChanged

    private void botaoPesquisarEnderecosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarEnderecosActionPerformed
        EnderecoPesquisa.selecionarClientes = true;
        EnderecoPesquisa aux = new EnderecoPesquisa();
        aux.setTitle("PESQUISA POR ENDEREÇOS");
        aux.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        aux.setLocationRelativeTo(null);
        aux.setVisible(true);
    }//GEN-LAST:event_botaoPesquisarEnderecosActionPerformed

    private void botaoIncluirEnderecosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIncluirEnderecosActionPerformed
        estadoIncluirEndereco();
        novoEndereco = true;
    }//GEN-LAST:event_botaoIncluirEnderecosActionPerformed

    private void botaoEditarEnderecosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarEnderecosActionPerformed
        estadoEditarEndereco();
        linhaEdicaoEndereco = tabelaEnderecos.getSelectedRow();
        EnderecoPesquisa.CODIGO_ENDERECO = Integer.valueOf(tabelaEnderecos.getValueAt(tabelaEnderecos.getSelectedRow(), 0).toString());
        tipoEndereco.setSelectedItem(tabelaEnderecos.getValueAt(tabelaEnderecos.getSelectedRow(), 1).toString());
        String formatar = tabelaEnderecos.getValueAt(tabelaEnderecos.getSelectedRow(), 2).toString();
        cep.setValue(formatar);
        System.out.println(formatar);
        logradouro.setText(tabelaEnderecos.getValueAt(tabelaEnderecos.getSelectedRow(), 3).toString());
        bairro.setText(tabelaEnderecos.getValueAt(tabelaEnderecos.getSelectedRow(), 5).toString());
        uf.setText(tabelaEnderecos.getValueAt(tabelaEnderecos.getSelectedRow(), 6).toString());
        cidade.setText(tabelaEnderecos.getValueAt(tabelaEnderecos.getSelectedRow(), 4).toString());
        complemento.setText(tabelaEnderecos.getValueAt(tabelaEnderecos.getSelectedRow(), 7).toString());
    }//GEN-LAST:event_botaoEditarEnderecosActionPerformed

    private void botaoGravarEnderecosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGravarEnderecosActionPerformed
        Endereco cadastroClientes2EnderecosBEAN = new Endereco();

        try {
            if (tipoEndereco.getSelectedItem().toString().equals("SELECIONE...")) {
                JOptionPane.showMessageDialog(null, "TIPO DE ENDEREÇO NÃO SELECIONADO!");
                return;
            }
            if (cep.getText().toString().equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'CEP' NÃO PREENCHIDO!");
                return;
            }
            if (logradouro.getText().toString().equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'LOGADOURO' NÃO PREENCHIDO!");
                return;
            }
            if (logradouro.getText().length() > 80) {
                JOptionPane.showMessageDialog(null, "CAMPO 'LOGADOURO' MÁXIMO DE CARACTERES EXCEDIDO! (80)");
                return;
            }
            if (bairro.getText().toString().equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'BAIRRO' NÃO PREENCHIDO!");
                return;
            }
            if (bairro.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "CAMPO 'BAIRRO' MÁXIMO DE CARACTERES EXCEDIDO! (50)");
                return;
            }
            if (uf.getText().toString().equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'UF' NÃO PREENCHIDO!");
                return;
            }
            if (uf.getText().length() > 4) {
                JOptionPane.showMessageDialog(null, "CAMPO 'UF' MÁXIMO DE CARACTERES EXCEDIDO! (4)");
                return;
            }
            if (cidade.getText().toString().equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'CIDADE' NÃO PREENCHIDO!");
                return;
            }
            if (cidade.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "CAMPO 'CIDADE' MÁXIMO DE CARACTERES EXCEDIDO! (50)");
                return;
            }
            if (complemento.getText().length() > 80) {
                JOptionPane.showMessageDialog(null, "CAMPO 'COMPLEMENTO' MÁXIMO DE CARACTERES EXCEDIDO! (80)");
                return;
            }

            if (novoEndereco == false) {
                tabelaEnderecos.setValueAt(tipoEndereco.getSelectedItem().toString(), linhaEdicaoEndereco, 1);
                tabelaEnderecos.setValueAt(cep.getValue().toString(), linhaEdicaoEndereco, 2);
                tabelaEnderecos.setValueAt(logradouro.getText().toString(), linhaEdicaoEndereco, 3);
                tabelaEnderecos.setValueAt(bairro.getText().toString().toUpperCase(), linhaEdicaoEndereco, 5);
                tabelaEnderecos.setValueAt(uf.getText().toString().toUpperCase(), linhaEdicaoEndereco, 6);
                tabelaEnderecos.setValueAt(cidade.getText().toString().toUpperCase(), linhaEdicaoEndereco, 4);
                tabelaEnderecos.setValueAt(complemento.getText().toString().toUpperCase(), linhaEdicaoEndereco, 7);

                EnderecoDAO.atualizaEnderecos(new Endereco(EnderecoPesquisa.CODIGO_ENDERECO,
                        cep.getValue().toString(),
                        tipoEndereco.getSelectedItem().toString(),
                        logradouro.getText().toString().toUpperCase(),
                        bairro.getText().toString().toUpperCase(),
                        uf.getText().toString().toUpperCase(),
                        complemento.getText().toString().toUpperCase(),
                        cidade.getText().toString().toUpperCase()));
                JOptionPane.showMessageDialog(null, "ENDEREÇO ATUALIZADO COM SUCESSO.");
            } else {
                EnderecoPesquisa.CODIGO_ENDERECO = EnderecoDAO.retornaUltimoRegistroEnderecos() + 1;

                EnderecoDAO.gravarEnderecos(new Endereco(EnderecoPesquisa.CODIGO_ENDERECO,
                        cep.getValue().toString(),
                        tipoEndereco.getSelectedItem().toString(),
                        logradouro.getText().toString().toUpperCase(),
                        bairro.getText().toString().toUpperCase(),
                        uf.getText().toString().toUpperCase(),
                        complemento.getText().toString().toUpperCase(),
                        cidade.getText().toString().toUpperCase()));

                JOptionPane.showMessageDialog(null, "ENDEREÇO GRAVADO COM SUCESSO.\nCÓDIGO = " + EnderecoPesquisa.CODIGO_ENDERECO);

                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(this, "DESEJA ADICIONÁ-LO À TABELA DE ENDEREÇOS?", "ADICIONAR AO CLIENTE", dialogButton);
                if (dialogResult == 0) {
                    DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
                    modeloEnderecos.addRow(new Object[]{
                        EnderecoPesquisa.CODIGO_ENDERECO,
                        tipoEndereco.getSelectedItem().toString(),
                        cep.getValue().toString(),
                        logradouro.getText().toString().toUpperCase(),
                        cidade.getText().toString().toUpperCase(),
                        bairro.getText().toString().toUpperCase(),
                        uf.getText().toString().toUpperCase(),
                        complemento.getText().toString().toUpperCase()
                    });
                }
            }

            estadoGravarEndereco();
            linhaEdicaoEndereco = 0;
            codEndereco = 0;
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_botaoGravarEnderecosActionPerformed

    private void botaoCancelarEnderecosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarEnderecosActionPerformed
        estadoCancelarEndereco();
    }//GEN-LAST:event_botaoCancelarEnderecosActionPerformed

    private void botaoRetirarTabelaEnderecosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRetirarTabelaEnderecosActionPerformed
        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
        modeloEnderecos.removeRow(tabelaEnderecos.getSelectedRow());
        estadoRetirarTabelaEndereco();
    }//GEN-LAST:event_botaoRetirarTabelaEnderecosActionPerformed

    private void tabelaEnderecosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaEnderecosMouseClicked
        if (editarCliente == true) {
            botaoEditarEnderecos.setEnabled(true);
            botaoCancelarEnderecos.setEnabled(true);
            botaoRetirarTabelaEnderecos.setEnabled(true);
        }
    }//GEN-LAST:event_tabelaEnderecosMouseClicked

    private void botaoBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscarActionPerformed
        String cepAux = cep.getText().replace(".", "").replace("-", "");
        if (!cepAux.equals("")) {
            Endereco enderecoAux = ConnectionFactory.retornaInformacoesCEP(cepAux);
            if (enderecoAux != null) {
                logradouro.setText(enderecoAux.getLogadouro());
                complemento.setText(enderecoAux.getComplemento());
                bairro.setText(enderecoAux.getBairro());
                cidade.setText(enderecoAux.getCidade());
                uf.setText(enderecoAux.getUf());
            } else {
                cep.setText("");
                logradouro.setText("");
                bairro.setText("");
                uf.setText("");
                cidade.setText("");
                complemento.setText("");
            }
        }
    }//GEN-LAST:event_botaoBuscarActionPerformed

    private void cepFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cepFocusLost

    }//GEN-LAST:event_cepFocusLost

    private void tabelaContatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaContatosMouseClicked
        if (editarCliente == true) {
            botaoEditarContatos.setEnabled(true);
            botaoCancelarContatos.setEnabled(true);
            botaoRetirarTabelaContatos.setEnabled(true);
        }
    }//GEN-LAST:event_tabelaContatosMouseClicked

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void departamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_departamentoActionPerformed

    private void tipoTelefoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoTelefoneItemStateChanged
        try {
            if (tipoTelefone.getSelectedItem().equals("SELECIONE...") == false) {
                if (tipoTelefone.getSelectedItem().equals("FIXO")) {
                    mascaraTelefone = new MaskFormatter("(##) ####-####");
                    telefone.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter("(##) ####-####")));
                    telefone.setValue("");
                    dicaFormato.setText("DDD + NÚMERO - SOMENTE NÚMEROS SEM ESPAÇOS OU CARACTERES");
                    ramal.setEnabled(true);
                    telefone.setEnabled(true);
                } else {
                    mascaraTelefone = new MaskFormatter("(##) # ####-####");
                    telefone.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter("(##) # ####-####")));
                    telefone.setValue("");
                    dicaFormato.setText("DDD + 9 + NÚMERO - SOMENTE NÚMEROS SEM ESPAÇOS OU CARACTERES");
                    telefone.setEnabled(true);
                    ramal.setEnabled(false);
                }
            } else {
                mascaraTelefone = null;
                dicaFormato.setText("");
                ramal.setEnabled(false);
                telefone.setEnabled(false);
            }
        } catch (ParseException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }

    }//GEN-LAST:event_tipoTelefoneItemStateChanged

    private void tipoTelefone2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoTelefone2ItemStateChanged
        try {
            if (tipoTelefone2.getSelectedItem().equals("SELECIONE...") == false) {
                if (tipoTelefone2.getSelectedItem().equals("FIXO")) {
                    mascaraTelefone = new MaskFormatter("(##) ####-####");
                    telefone2.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter("(##) ####-####")));
                    telefone2.setValue("");
                    dicaFormato2.setText("DDD + NÚMERO - SOMENTE NÚMEROS SEM ESPAÇOS OU CARACTERES");
                    ramal2.setEnabled(true);
                    telefone2.setEnabled(true);
                } else {
                    mascaraTelefone = new MaskFormatter("(##) # ####-####");
                    telefone2.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter("(##) # ####-####")));
                    telefone2.setValue("");
                    dicaFormato2.setText("DDD + 9 + NÚMERO - SOMENTE NÚMEROS SEM ESPAÇOS OU CARACTERES");
                    telefone2.setEnabled(true);
                    ramal2.setEnabled(false);
                }
            } else {
                mascaraTelefone = null;
                dicaFormato2.setText("");
                ramal2.setEnabled(false);
                telefone2.setEnabled(false);
            }
        } catch (ParseException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_tipoTelefone2ItemStateChanged

    private void ramal2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ramal2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ramal2ActionPerformed

    private void botaoPesquisarContatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarContatosActionPerformed
        ContatoPesquisa.selecionarClientes = true;
        ContatoPesquisa aux = new ContatoPesquisa();
        aux.setLocationRelativeTo(null);
        aux.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        aux.setTitle("PESQUISA POR CONTATOS");
        aux.setVisible(true);
    }//GEN-LAST:event_botaoPesquisarContatosActionPerformed

    private void botaoIncluirContatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIncluirContatosActionPerformed
        estadoIncluirContato();
        novoContato = true;
    }//GEN-LAST:event_botaoIncluirContatosActionPerformed

    private void botaoEditarContatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarContatosActionPerformed
        try {
            estadoEditarContato();
            linhaEdicaoContato = tabelaContatos.getSelectedRow();
            codContato = Integer.valueOf(tabelaContatos.getValueAt(tabelaContatos.getSelectedRow(), 0).toString());
            nomeContato.setText((String) tabelaContatos.getValueAt(tabelaContatos.getSelectedRow(), 1));
            email.setText((String) tabelaContatos.getValueAt(tabelaContatos.getSelectedRow(), 2));
            String formatar = tabelaContatos.getValueAt(tabelaContatos.getSelectedRow(), 3).toString();
            formatar = formatar.replace("(", "");
            formatar = formatar.replace(")", "");
            formatar = formatar.replace(" ", "");
            formatar = formatar.replace("-", "");
            MaskFormatter formatoTelefone = null;
            if (formatar.length() == 10) {
                tipoTelefone.setSelectedIndex(1);
                tipoTelefone.setEnabled(true);
                formatoTelefone = new MaskFormatter("(##) ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
                telefone.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter("(##) ####-####")));
                telefone.setValue(formatar);
                telefone.setEnabled(true);
                ramal.setValue(Integer.valueOf(tabelaContatos.getValueAt(tabelaContatos.getSelectedRow(), 4).toString()));
                ramal.setEnabled(true);
            }
            if (formatar.length() == 11) {
                tipoTelefone.setSelectedIndex(2);
                tipoTelefone.setEnabled(true);
                formatoTelefone = new MaskFormatter("(##) # ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
                telefone.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter("(##) # ####-####")));
                telefone.setValue(formatar);
                telefone.setEnabled(true);
            }

            formatar = tabelaContatos.getValueAt(tabelaContatos.getSelectedRow(), 5).toString();
            formatar = formatar.replace("(", "");
            formatar = formatar.replace(")", "");
            formatar = formatar.replace(" ", "");
            formatar = formatar.replace("-", "");
            formatoTelefone = null;
            if (formatar.length() == 10) {
                tipoTelefone2.setSelectedIndex(1);
                tipoTelefone2.setEnabled(true);
                formatoTelefone = new MaskFormatter("(##) ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
                telefone2.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter("(##) ####-####")));
                telefone2.setValue(formatar);
                telefone2.setEnabled(true);
                ramal2.setValue(Integer.valueOf(tabelaContatos.getValueAt(tabelaContatos.getSelectedRow(), 6).toString()));
                ramal2.setEnabled(true);
            } else if (formatar.length() == 11) {
                tipoTelefone2.setSelectedIndex(2);
                tipoTelefone2.setEnabled(true);
                formatoTelefone = new MaskFormatter("(##) # ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
                telefone2.setFormatterFactory(new DefaultFormatterFactory(new MaskFormatter("(##) # ####-####")));
                telefone2.setValue(formatar);
                telefone2.setEnabled(true);
            }
            departamento.setText(tabelaContatos.getValueAt(tabelaContatos.getSelectedRow(), 7).toString());
        } catch (ParseException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }

    }//GEN-LAST:event_botaoEditarContatosActionPerformed

    private void botaoGravarContatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGravarContatosActionPerformed
        try {
            Contato cadastroClientes2ContatosBEAN = new Contato();

            if (nomeContato.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'NOME PARA CONTATO' NÃO PREENCHIDO!");
                return;
            }
            if (nomeContato.getText().length() > 30) {
                JOptionPane.showMessageDialog(null, "CAMPO 'NOME CONTATO' MÁXIMO DE CARACTERES EXCEDIDO! (30)");
                return;
            }
            if (email.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "CAMPO 'EMAIL' MÁXIMO DE CARACTERES EXCEDIDO! (50)");
                return;
            }
            if (tipoTelefone.getSelectedItem().toString().equals("SELECIONE...")) {
                JOptionPane.showMessageDialog(null, "SELECIONE UM TIPO DE TELEFONE!");
                return;
            }
            String formatar = telefone.getText();
            formatar = formatar.replace("(", "");
            formatar = formatar.replace(")", "");
            formatar = formatar.replace("-", "");
            formatar = formatar.replace(" ", "");
            if (formatar.equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'TELEFONE' NÃO FOI PREENCHIDO!");
                return;
            }
            if (ramal.getText().length() > 5) {
                JOptionPane.showMessageDialog(null, "CAMPO 'RAMAL' MÁXIMO DE CARACTERES EXCEDIDO! (5)");
                return;
            }
            if (tipoTelefone2.getSelectedItem().toString() != "SELECIONE...") {
                formatar = telefone2.getText();
                formatar = formatar.replace("(", "");
                formatar = formatar.replace(")", "");
                formatar = formatar.replace("-", "");
                formatar = formatar.replace(" ", "");
                if (formatar.equals("")) {
                    JOptionPane.showMessageDialog(null, "CAMPO 'TELEFONE 2' NÃO FOI PREENCHIDO!");
                    return;
                }
                if (ramal2.getText().length() > 5) {
                    JOptionPane.showMessageDialog(null, "CAMPO 'RAMAL 2' MÁXIMO DE CARACTERES EXCEDIDO! (5)");
                    return;
                }
            }
            if (departamento.getText().length() > 50) {
                JOptionPane.showMessageDialog(null, "CAMPO 'DEPARTAMENTO' MÁXIMO DE CARACTERES EXCEDIDO! (50)");
                return;
            }

            if (novoContato == false) {
                tabelaContatos.setValueAt(nomeContato.getText().toString().toUpperCase(), linhaEdicaoContato, 1);
                tabelaContatos.setValueAt(email.getText().toString(), linhaEdicaoContato, 2);
                tabelaContatos.setValueAt(telefone.getText().toString().toUpperCase(), linhaEdicaoContato, 3);
                tabelaContatos.setValueAt(ramal.getText().toString().toUpperCase(), linhaEdicaoContato, 4);
                tabelaContatos.setValueAt(telefone2.getText().toString().toUpperCase(), linhaEdicaoContato, 5);
                tabelaContatos.setValueAt(ramal2.getText().toString().toUpperCase(), linhaEdicaoContato, 6);
                tabelaContatos.setValueAt(departamento.getText().toString().toUpperCase(), linhaEdicaoContato, 7);

                cadastroClientes2ContatosBEAN.setCod(codContato);
                cadastroClientes2ContatosBEAN.setNomeContato(nomeContato.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setEmail(email.getText().toString());
                cadastroClientes2ContatosBEAN.setTelefone(telefone.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setRamal(ramal.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setTelefone2(telefone2.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setRamal2(ramal2.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setDepartamento(departamento.getText().toString().toUpperCase());
                ContatoDAO.atualizaContatos(cadastroClientes2ContatosBEAN, codContato);

                JOptionPane.showMessageDialog(null, "CONTATO ATUALIZADO COM SUCESSO.");
            } else {
                codContato = ContatoDAO.retornaUltimoRegistroContatos() + 1;

                cadastroClientes2ContatosBEAN.setCod(codContato);
                cadastroClientes2ContatosBEAN.setNomeContato(nomeContato.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setEmail(email.getText().toString());
                cadastroClientes2ContatosBEAN.setTelefone(telefone.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setRamal(ramal.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setTelefone2(telefone2.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setRamal2(ramal2.getText().toString().toUpperCase());
                cadastroClientes2ContatosBEAN.setDepartamento(departamento.getText().toString().toUpperCase());
                ContatoDAO.gravaContatos(cadastroClientes2ContatosBEAN);

                JOptionPane.showMessageDialog(null, "CONTATO GRAVADO COM SUCESSO.\nCÓDIGO = " + codContato);

                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(this, "DESEJA ADICIONÁ-LO À TABELA DE CONTATOS?", "ADICIONAR AO CLIENTE", dialogButton);
                if (dialogResult == 0) {
                    DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
                    modeloContatos.addRow(new Object[]{
                        codContato,
                        cadastroClientes2ContatosBEAN.getNomeContato(),
                        cadastroClientes2ContatosBEAN.getEmail(),
                        cadastroClientes2ContatosBEAN.getTelefone(),
                        cadastroClientes2ContatosBEAN.getRamal(),
                        cadastroClientes2ContatosBEAN.getTelefone2(),
                        cadastroClientes2ContatosBEAN.getRamal2(),
                        cadastroClientes2ContatosBEAN.getDepartamento()
                    });
                }
            }

            estadoGravarContato();
            linhaEdicaoContato = 0;
            codContato = 0;
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_botaoGravarContatosActionPerformed

    private void botaoCancelarContatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarContatosActionPerformed
        estadoCancelarContato();
    }//GEN-LAST:event_botaoCancelarContatosActionPerformed

    private void botaoRetirarTabelaContatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRetirarTabelaContatosActionPerformed
        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
        modeloContatos.removeRow(tabelaContatos.getSelectedRow());
        estadoRetirarTabelaContato();
    }//GEN-LAST:event_botaoRetirarTabelaContatosActionPerformed

    private void radioMesAnoOrcamentosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioMesAnoOrcamentosItemStateChanged
        if (radioMesAnoOrcamentos.isSelected()) {
            mesOrcamentos.setEnabled(true);
            anoOrcamentos.setEnabled(true);
            textoOrcamentos.setEnabled(false);
        }
    }//GEN-LAST:event_radioMesAnoOrcamentosItemStateChanged

    private void radioEmissorOrcamentosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioEmissorOrcamentosItemStateChanged
        if (radioEmissorOrcamentos.isSelected()) {
            mesOrcamentos.setEnabled(false);
            anoOrcamentos.setEnabled(false);
            textoOrcamentos.setEnabled(true);
        }
    }//GEN-LAST:event_radioEmissorOrcamentosItemStateChanged

    private void filtrarOrcamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtrarOrcamentosActionPerformed
        calculoOrcamentosPersonalizado();
    }//GEN-LAST:event_filtrarOrcamentosActionPerformed

    private void radioAnoOrcamentosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioAnoOrcamentosItemStateChanged
        if (radioAnoOrcamentos.isSelected()) {
            mesOrcamentos.setEnabled(false);
            anoOrcamentos.setEnabled(true);
            textoOrcamentos.setEnabled(false);
        }
    }//GEN-LAST:event_radioAnoOrcamentosItemStateChanged

    private void limparFiltrosOrcamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparFiltrosOrcamentosActionPerformed
        //INSTANCIA AS VARIÁVEIS E FUNÇÕES NECESSÁRIAS--------------------------
        SimpleDateFormat ano = new SimpleDateFormat("yyyy");
        SimpleDateFormat mes = new SimpleDateFormat("MM");
        String aux = null;
        //VOLTA AO ESTADO INICIAL-----------------------------------------------
        radioMesAnoOrcamentos.setSelected(true);
        textoOrcamentos.setText("");
        anoOrcamentos.setValue(Integer.valueOf(ano.format(new Date())));
        aux = mes.format(new Date());
        aux.replace("0", "");
        mesOrcamentos.setMonth(Integer.valueOf(aux) - 1);
    }//GEN-LAST:event_limparFiltrosOrcamentosActionPerformed

    private void botaoPesquisarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarClientesActionPerformed
        gj.abrirJanelas(ClientePesquisa.getInstancia(), "PESQUISA DE CLIENTES");
        ClientePesquisa.setTela((byte) 1);
    }//GEN-LAST:event_botaoPesquisarClientesActionPerformed

    private void botaoIncluirClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIncluirClientesActionPerformed
        estadoIncluirCliente();
        novoCliente = true;
    }//GEN-LAST:event_botaoIncluirClientesActionPerformed

    private void botaoEditarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarClientesActionPerformed
        estadoEditarCliente();
        novoContato = false;
        editarCliente = true;
        novoCliente = false;
        if (radioMesAnoOrcamentos.isSelected()) {
            mesOrcamentos.setEnabled(true);
            anoOrcamentos.setEnabled(true);
            textoOrcamentos.setEnabled(false);
        }
        if (radioAnoOrcamentos.isSelected()) {
            mesOrcamentos.setEnabled(false);
            anoOrcamentos.setEnabled(true);
            textoOrcamentos.setEnabled(false);
        }
        if (radioEmissorOrcamentos.isSelected()) {
            mesOrcamentos.setEnabled(false);
            anoOrcamentos.setEnabled(false);
            textoOrcamentos.setEnabled(true);
        }
    }//GEN-LAST:event_botaoEditarClientesActionPerformed

    private void botaoDesativarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDesativarClientesActionPerformed
        try {
            if (pessoaFisica.isSelected() == true) {
                TIPO_PESSOA = 1;
            } else {
                TIPO_PESSOA = 2;
            }
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "DESATIVAR CLIENTE " + nomeCliente.getText() + " ?", "CONFIRMAÇÃO DE DESATIVAÇÃO", dialogButton);
            if (dialogResult == 0) {
                dialogResult = JOptionPane.showConfirmDialog(this, "DESEJA DESATIVAR TAMBÉM OS ENDEREÇOS E CONTATOS VINCULADOS AO CLIENTE?", "DESATIVAR ENDEREÇOS E CONTATOS", dialogButton);
                if (dialogResult == 0) {
                    ClienteDAO.desativaAtivaCliente(CODIGO_CLIENTE, TIPO_PESSOA, (byte) 1);
                    EnderecoDAO.desativaAtivaEnderecos(CODIGO_CLIENTE, 0, TIPO_PESSOA, (byte) 1, true);
                    ClienteDAO.desativaAtivaContatos(CODIGO_CLIENTE, 0, TIPO_PESSOA, (byte) 1, true);
                } else {
                    ClienteDAO.desativaAtivaCliente(CODIGO_CLIENTE, TIPO_PESSOA, (byte) 1);
                }
                novoCliente = false;
                editarCliente = false;
            } else {
                return;
            }
            estado1();
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_botaoDesativarClientesActionPerformed

    private void botaoGravarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGravarClientesActionPerformed
        try {
            Cliente cliente = new Cliente();
            List codigosEnderecos = new ArrayList();
            List codigosContatos = new ArrayList();
            String formatar = null;

            if (pessoaFisica.isSelected() == true) {
                TIPO_PESSOA = 1;
            } else if (pessoaJuridica.isSelected() == true) {
                TIPO_PESSOA = 2;
            }

            CODIGO_CLIENTE = ClienteDAO.retornaUltimoRegistroClientes(TIPO_PESSOA) + 1;

            if (nomeCliente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'NOME CLIENTE' NÃO PREENCHIDO!");
                return;
            }
            if (nomeCliente.getText().length() > 100) {
                JOptionPane.showMessageDialog(null, "CAMPO 'NOME CLIENTE' MÁXIMO DE CARACTERES EXCEDIDO! (100)");
                return;
            }
            if (atividade.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "CAMPO 'ATIVIDADE' NÃO PREENCHIDO!");
                return;
            }
            if (atividade.getText().length() > 40) {
                JOptionPane.showMessageDialog(null, "CAMPO 'ATIVIDADE' MÁXIMO DE CARACTERES EXCEDIDO! (40)");
                return;
            }
            if (observacoes.getText().length() > 1000) {
                JOptionPane.showMessageDialog(null, "CAMPO 'OBSERVACOES' MÁXIMO DE CARACTERES EXCEDIDO! (1000)");
                return;
            }
            if (TIPO_PESSOA == 2) {
                if (nomeFantasia.getText().length() > 100) {
                    JOptionPane.showMessageDialog(null, "CAMPO 'NOME FANTASIA' MÁXIMO DE CARACTERES EXCEDIDO! (100)");
                    return;
                }
                if (nomeFantasia.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "CAMPO 'NOME FANTASIA' NÃO PREENCHIDO!");
                    return;
                }
                formatar = cnpj.getText();
                formatar = formatar.replace(".", "");
                formatar = formatar.replace(" ", "");
                formatar = formatar.replace("/", "");
                formatar = formatar.replace("-", "");
                if (formatar.equals("")) {
                    JOptionPane.showMessageDialog(null, "CAMPO 'CNPJ' NÃO PREENCHIDO!");
                    return;
                }
                if (filialColigada.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "CAMPO 'FILIAL/COLIGADA/RELACIONADA A' NÃO PREENCHIDO!");
                    return;
                }
                if (filialColigada.getText().length() > 50) {
                    JOptionPane.showMessageDialog(null, "CAMPO 'FILIAL/COLIGADA/RELACIONADA A' MÁXIMO DE CARACTERES EXCEDIDO! (50)");
                    return;
                }
            }
            if (TIPO_PESSOA == 1) {
                formatar = cpf.getText();
                formatar = formatar.replace(".", "");
                formatar = formatar.replace(" ", "");
                formatar = formatar.replace("-", "");
                if (formatar.equals("")) {
                    JOptionPane.showMessageDialog(null, "CAMPO 'CPF' NÃO PREENCHIDO!");
                    return;
                }
            }

            if (tabelaEnderecos.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "SELECIONAR ENDEREÇOS PARA O CLIENTE!");
                return;
            }
            if (tabelaContatos.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "SELECIONAR CONTATOS PARA O CLIENTE!");
                return;
            }

            for (int i = 0; i < tabelaEnderecos.getRowCount(); i++) {
                codigosEnderecos.add(tabelaEnderecos.getValueAt(i, 0));
            }
            for (int i = 0; i < tabelaContatos.getRowCount(); i++) {
                codigosContatos.add(tabelaContatos.getValueAt(i, 0));
            }

            if (novoCliente == true) {
                cliente.setCodigo(CODIGO_CLIENTE);
                cliente.setNome(nomeCliente.getText().toUpperCase());
                cliente.setNomeFantasia(nomeFantasia.getText().toUpperCase());
                cliente.setCnpj(cnpj.getText());
                cliente.setCpf(cpf.getText());
                cliente.setAtividade(atividade.getText().toUpperCase());
                cliente.setFilialColigada(filialColigada.getText().toUpperCase());
                cliente.setCodigoAtendente(codigoAtendente.getText());
                cliente.setNomeAtendente(nomeAtendente.getText());
                cliente.setObservacoes(observacoes.getText().toUpperCase());
                if (TIPO_PESSOA == 1) {
                    if (ClienteDAO.verificaCpfCnpj(TIPO_PESSOA, cliente.getCpf(), false)) {
                        if (ClienteDAO.verificaAtrelamentoCliente(CODIGO_CLIENTE, TIPO_PESSOA)) {
                            JOptionPane.showMessageDialog(null, "O 'CPF' DIGITADO JÁ ESTÁ CADASTRADO NO SISTEMA E ESTÁ VINCULADO.", "ERRO DE INCLUSÃO", 0);
                            return;
                        }
                    }
                } else {
                    if (ClienteDAO.verificaCpfCnpj(TIPO_PESSOA, cliente.getCnpj(), true)) {
                        if (ClienteDAO.verificaAtrelamentoCliente(CODIGO_CLIENTE, TIPO_PESSOA)) {
                            JOptionPane.showMessageDialog(null, "O 'CNPJ' DIGITADO JÁ ESTÁ CADASTRADO NO SISTEMA E ESTÁ VINCULADO.", "ERRO DE INCLUSÃO", 0);
                            return;
                        }
                    }
                }
                ClienteDAO.gravarClientes(cliente, TIPO_PESSOA);
                ClienteDAO.associacaoClientes(codigosEnderecos, codigosContatos, CODIGO_CLIENTE, TIPO_PESSOA);
                JOptionPane.showMessageDialog(null, "CLIENTE GRAVADO COM SUCESSO!\nCÓDIGO = " + CODIGO_CLIENTE);
            }
            if (editarCliente == true) {
                CODIGO_CLIENTE = Integer.valueOf(codigo.getText());
                cliente.setCodigo(CODIGO_CLIENTE);
                cliente.setNome(nomeCliente.getText().toUpperCase());
                cliente.setNomeFantasia(nomeFantasia.getText().toUpperCase());
                cliente.setCnpj(cnpj.getText());
                cliente.setCpf(cpf.getText());
                cliente.setAtividade(atividade.getText().toUpperCase());
                cliente.setFilialColigada(filialColigada.getText().toUpperCase());
                cliente.setCodigoAtendente(codigoAtendente.getText());
                cliente.setNomeAtendente(nomeAtendente.getText());
                cliente.setObservacoes(observacoes.getText().toUpperCase());
                ClienteDAO.atualizaClientes(cliente, TIPO_PESSOA);
                ClienteDAO.excluirAssociacaoClientes(CODIGO_CLIENTE, TIPO_PESSOA);
                ClienteDAO.associacaoClientes(codigosEnderecos, codigosContatos, CODIGO_CLIENTE, TIPO_PESSOA);
                JOptionPane.showMessageDialog(null, "CLIENTE Nº " + CODIGO_CLIENTE + " ATUALIZADO COM SUCESSO!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }
            codigo.setText(String.valueOf(CODIGO_CLIENTE));
            novoContato = false;
            novoCliente = false;
            editarCliente = false;
            estadoGravarCliente();
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_botaoGravarClientesActionPerformed

    private void botaoCancelarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarClientesActionPerformed
        estado1();
        novoContato = false;
        editarCliente = false;
    }//GEN-LAST:event_botaoCancelarClientesActionPerformed

    private void botaoSelecionarOrcamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarOrcamentoActionPerformed
        switch (CLASSE_PAI) {
            case 1:
                gj.abrirJanelas(SelOrc.getInstancia(), "SELECIONAR PARA O ORÇAMENTO");

                SelOrc.codigosContatos.removeAllItems();
                SelOrc.codigosEnderecos.removeAllItems();
                SelOrc.codigosContatos.addItem("SELECIONE...");
                SelOrc.codigosEnderecos.addItem("SELECIONE...");

                for (int i = 0; i < tabelaEnderecos.getRowCount(); i++) {
                    SelOrc.codigosEnderecos.addItem(tabelaEnderecos.getValueAt(i, 0).toString());
                }
                for (int i = 0; i < tabelaContatos.getRowCount(); i++) {
                    SelOrc.codigosContatos.addItem(tabelaContatos.getValueAt(i, 0).toString());
                }
                break;
            case 3:
                NCFrame.codigoCliente.setValue(Integer.valueOf(codigo.getText()));
                if (pessoaFisica.isSelected() == true) {
                    NCFrame.tipoCliente.setText("PESSOA FÍSICA");
                    NCFrame.cnpjCpf.setText(cpf.getText());
                }
                if (pessoaJuridica.isSelected() == true) {
                    NCFrame.tipoCliente.setText("PESSOA JURÍDICA");
                    NCFrame.cnpjCpf.setText(cnpj.getText());
                }
                NCFrame.nomeCliente.setText(nomeCliente.getText());

                NCFrame.codigosContatos.removeAllItems();
                NCFrame.codigosEnderecos.removeAllItems();
                NCFrame.codigosContatos.addItem("SELECIONE...");
                NCFrame.codigosEnderecos.addItem("SELECIONE...");

                for (int i = 0; i < tabelaEnderecos.getRowCount(); i++) {
                    NCFrame.codigosEnderecos.addItem(tabelaEnderecos.getValueAt(i, 0).toString());
                }
                for (int i = 0; i < tabelaContatos.getRowCount(); i++) {
                    NCFrame.codigosContatos.addItem(tabelaContatos.getValueAt(i, 0).toString());
                }
                break;
        }
        this.dispose();
    }//GEN-LAST:event_botaoSelecionarOrcamentoActionPerformed

    private void cnpjFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cnpjFocusLost
        TIPO_PESSOA = 2;

        try {
            if (ClienteDAO.verificaCpfCnpj(TIPO_PESSOA, cnpj.getText(), true)) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(this, "EXISTE UM CLIENTE DESATIVADO COM ESSE 'CNPJ'.\nDESEJA REATIVÁ-LO?", "CONFIRMAÇÃO DE REATIVAÇÃO", dialogButton);
                if (dialogResult == 0) {
                    CODIGO_CLIENTE = ClienteDAO.retornaCliente(cnpj.getText(), TIPO_PESSOA);
                    ClienteDAO.desativaAtivaCliente(CODIGO_CLIENTE, TIPO_PESSOA, (byte) 0);
                    dialogResult = JOptionPane.showConfirmDialog(this, "O CLIENTE FOI REATIVADO COM SUCESSO E ESTARÁ DISPONÍVEL NA TELA DE BUSCA.\nDESEJA ABRI-LA?", "CONFIRMAÇÃO DE REATIVAÇÃO", dialogButton);
                    if (dialogResult == 0) {

                        gj.abrirJanelas(ClientePesquisa.getInstancia(), "CADASTRO DE CLIENTES");

                    }
                }
            } else if (pessoaJuridica.isSelected()) {
                String cnpjAux = cnpj.getText().replace(".", "").replace("-", "").replace("/", "");
                ClienteDAO con = new ClienteDAO();
                if (!cnpjAux.equals("")) {
                    if (!verificaCnpj(cnpjAux)) {
                        JOptionPane.showMessageDialog(null, "O 'CNPJ' DIGITADO NÃO É VÁLIDO!");
                        cnpj.setText("");
                    } else {
                        if (con.verificaCpfCnpj((byte) 2, cnpj.getText(), false)) {
                            JOptionPane.showMessageDialog(null, "O 'CNPJ' DIGITADO JÁ EXISTE!");
                            cnpj.setText("");
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_cnpjFocusLost

    private void cpfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cpfFocusLost
        TIPO_PESSOA = 1;

        try {
            if (ClienteDAO.verificaCpfCnpj(TIPO_PESSOA, cpf.getText(), true)) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(this, "EXISTE UM CLIENTE DESATIVADO COM ESSE 'CPF'.\nDESEJA REATIVÁ-LO?", "CONFIRMAÇÃO DE REATIVAÇÃO", dialogButton);
                if (dialogResult == 0) {
                    CODIGO_CLIENTE = ClienteDAO.retornaCliente(cpf.getText(), TIPO_PESSOA);
                    ClienteDAO.desativaAtivaCliente(CODIGO_CLIENTE, TIPO_PESSOA, (byte) 0);
                    dialogResult = JOptionPane.showConfirmDialog(this, "O CLIENTE FOI REATIVADO COM SUCESSO E ESTARÁ DISPONÍVEL NA TELA DE BUSCA.\nDESEJA ABRI-LA?", "CONFIRMAÇÃO DE REATIVAÇÃO", dialogButton);
                    if (dialogResult == 0) {

                        gj.abrirJanelas(ClientePesquisa.getInstancia(), "CADASTRO DE CLIENTES");
                    }
                }
            } else if (pessoaFisica.isSelected()) {
                String cpfAux = cpf.getText().replace(".", "").replace("-", "");
                ClienteDAO cadastroClientes2DAO = new ClienteDAO();
                if (!cpfAux.equals("")) {
                    if (!verificaCpf(cpfAux)) {
                        JOptionPane.showMessageDialog(null, "O 'CPF' DIGITADO NÃO É VÁLIDO!", "ERRO DE VALIDAÇÃO", 0);
                        cpf.setText("");
                    } else {
                        if (cadastroClientes2DAO.verificaCpfCnpj((byte) 1, cpf.getText(), false)) {
                            JOptionPane.showMessageDialog(null, "O 'CPF' DIGITADO JÁ EXISTE!", "ERRO DE REDUNDÂNCIA", 0);
                            cpf.setText("");
                        }
                    }
                }
            }
        } catch (SQLException | ClienteNaoEncontradoException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }//GEN-LAST:event_cpfFocusLost

    private void nomeFantasiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeFantasiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomeFantasiaActionPerformed

    private void atividadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atividadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atividadeActionPerformed

    private void cpfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cpfFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_cpfFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static com.toedter.calendar.JYearChooser anoOrcamentos;
    public static javax.swing.JTextField atividade;
    public static javax.swing.JTextField bairro;
    private javax.swing.JButton botaoBuscar;
    public static javax.swing.JButton botaoCancelarClientes;
    public static javax.swing.JButton botaoCancelarContatos;
    public static javax.swing.JButton botaoCancelarEnderecos;
    public static javax.swing.JButton botaoDesativarClientes;
    public static javax.swing.JButton botaoEditarClientes;
    public static javax.swing.JButton botaoEditarContatos;
    public static javax.swing.JButton botaoEditarEnderecos;
    public static javax.swing.JButton botaoGravarClientes;
    public static javax.swing.JButton botaoGravarContatos;
    public static javax.swing.JButton botaoGravarEnderecos;
    public static javax.swing.JButton botaoIncluirClientes;
    public static javax.swing.JButton botaoIncluirContatos;
    public static javax.swing.JButton botaoIncluirEnderecos;
    public static javax.swing.JButton botaoPesquisarClientes;
    public static javax.swing.JButton botaoPesquisarContatos;
    public static javax.swing.JButton botaoPesquisarEnderecos;
    public static javax.swing.JButton botaoRetirarTabelaContatos;
    public static javax.swing.JButton botaoRetirarTabelaEnderecos;
    public static javax.swing.JButton botaoSelecionarOrcamento;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JFormattedTextField cep;
    public static javax.swing.JTextField cidade;
    public static javax.swing.JFormattedTextField cnpj;
    public static javax.swing.JLabel codigo;
    public static javax.swing.JTextField codigoAtendente;
    public static javax.swing.JTextField complemento;
    public static javax.swing.JFormattedTextField cpf;
    public static javax.swing.JFormattedTextField creditoDisponivel;
    public static javax.swing.JTextField departamento;
    private javax.swing.JLabel dicaFormato;
    private javax.swing.JLabel dicaFormato2;
    public static javax.swing.JTextField email;
    public static javax.swing.JTextField filialColigada;
    public static javax.swing.JButton filtrarOrcamentos;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JButton limparFiltrosOrcamentos;
    public static javax.swing.JTextField logradouro;
    public static com.toedter.calendar.JMonthChooser mesOrcamentos;
    public static javax.swing.JTextField nomeAtendente;
    public static javax.swing.JTextField nomeCliente;
    public static javax.swing.JTextField nomeContato;
    public static javax.swing.JTextField nomeFantasia;
    public static javax.swing.JTextArea observacoes;
    public static javax.swing.JCheckBox pessoaFisica;
    public static javax.swing.JCheckBox pessoaJuridica;
    public static javax.swing.JLabel quantidadeOrcamentos;
    public static javax.swing.JRadioButton radioAnoOrcamentos;
    public static javax.swing.JRadioButton radioEmissorOrcamentos;
    public static javax.swing.JRadioButton radioMesAnoOrcamentos;
    private javax.swing.JFormattedTextField ramal;
    private javax.swing.JFormattedTextField ramal2;
    public static javax.swing.JTable tabelaContatos;
    public static javax.swing.JTable tabelaEnderecos;
    public static javax.swing.JTable tabelaOrcamentos;
    private javax.swing.JFormattedTextField telefone;
    private javax.swing.JFormattedTextField telefone2;
    public static javax.swing.JTextField textoOrcamentos;
    public static javax.swing.JComboBox<String> tipoEndereco;
    private javax.swing.JComboBox<String> tipoTelefone;
    private javax.swing.JComboBox<String> tipoTelefone2;
    public static javax.swing.JTextField uf;
    public static javax.swing.JLabel valorTotalOrcamentos;
    // End of variables declaration//GEN-END:variables
public void estado1() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
        botaoPesquisarClientes.setEnabled(true);
        botaoIncluirClientes.setEnabled(true);
        botaoEditarClientes.setEnabled(false);
        botaoDesativarClientes.setEnabled(false);
        botaoGravarClientes.setEnabled(false);
        botaoCancelarClientes.setEnabled(false);
        botaoSelecionarOrcamento.setEnabled(false);
        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
        pessoaFisica.setEnabled(false);
        pessoaJuridica.setEnabled(false);
        nomeCliente.setEnabled(false);
        nomeCliente.setText("");
        nomeFantasia.setEnabled(false);
        nomeFantasia.setText("");
        cpf.setEnabled(false);
        cpf.setText("");
        cnpj.setEnabled(false);
        cnpj.setText("");
        atividade.setEnabled(false);
        atividade.setText("");
        filialColigada.setEnabled(false);
        filialColigada.setText("");
        creditoDisponivel.setEnabled(false);
        creditoDisponivel.setText("");
        codigoAtendente.setEnabled(false);
        nomeAtendente.setEnabled(false);
        observacoes.setEnabled(false);
        observacoes.setText("");

        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(false);
        botaoIncluirEnderecos.setEnabled(false);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        tipoEndereco.setSelectedIndex(0);
        cep.setEnabled(false);
        cep.setText("");
        logradouro.setEnabled(false);
        logradouro.setText("");
        bairro.setEnabled(false);
        bairro.setText("");
        uf.setEnabled(false);
        uf.setText("");
        cidade.setEnabled(false);
        cidade.setText("");
        complemento.setEnabled(false);
        complemento.setText("");
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(false);
        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(false);
        botaoIncluirContatos.setEnabled(false);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        nomeContato.setText("");
        email.setEnabled(false);
        email.setText("");
        tipoTelefone.setSelectedIndex(0);
        tipoTelefone.setEnabled(false);
        telefone.setEnabled(false);
        telefone.setText("");
        ramal.setEnabled(false);
        ramal.setText("");
        departamento.setEnabled(false);
        departamento.setText("");
        dicaFormato.setText("");
        tipoTelefone2.setEnabled(false);
        tipoTelefone2.setSelectedIndex(0);
        telefone2.setEnabled(false);
        telefone2.setText("");
        ramal2.setEnabled(false);
        ramal2.setText("");
        dicaFormato2.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(false);
        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
        modeloContatos.setNumRows(0);
        //BOTOES ORCAMENTOS-----------------------------------------------------
        radioMesAnoOrcamentos.setEnabled(false);
        radioMesAnoOrcamentos.setSelected(false);
        radioAnoOrcamentos.setEnabled(false);
        radioAnoOrcamentos.setSelected(false);
        radioEmissorOrcamentos.setEnabled(false);
        radioEmissorOrcamentos.setSelected(false);
        anoOrcamentos.setEnabled(false);
        anoOrcamentos.revalidate();
        mesOrcamentos.setEnabled(false);
        mesOrcamentos.revalidate();
        textoOrcamentos.setEnabled(false);
        textoOrcamentos.setText(null);
        filtrarOrcamentos.setEnabled(false);
        limparFiltrosOrcamentos.setEnabled(false);
        quantidadeOrcamentos.setText(null);
        valorTotalOrcamentos.setText(null);
        //TABELA ORCAMENTOS-----------------------------------------------------
        tabelaOrcamentos.setEnabled(false);
        DefaultTableModel modeloOrcamentos = (DefaultTableModel) tabelaOrcamentos.getModel();
        modeloOrcamentos.setNumRows(0);

        codigo.setText("");
    }

    public void estadoPessoaFisicaNovo() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
        pessoaFisica.setEnabled(true);
        pessoaJuridica.setEnabled(true);
        nomeCliente.setEnabled(true);
        nomeFantasia.setEnabled(false);
        cpf.setEnabled(true);
        cnpj.setEnabled(false);
        atividade.setEnabled(true);
        filialColigada.setEnabled(false);
        creditoDisponivel.setEnabled(false);
        codigoAtendente.setEnabled(false);
        nomeAtendente.setEnabled(false);
        observacoes.setEnabled(true);

        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(true);
        botaoIncluirEnderecos.setEnabled(true);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        tipoEndereco.setSelectedIndex(0);
        cep.setEnabled(false);
        cep.setText("");
        logradouro.setEnabled(false);
        logradouro.setText("");
        bairro.setEnabled(false);
        bairro.setText("");
        uf.setEnabled(false);
        uf.setText("");
        cidade.setEnabled(false);
        cidade.setText("");
        complemento.setEnabled(false);
        complemento.setText("");
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(false);
        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(true);
        botaoIncluirContatos.setEnabled(true);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        nomeContato.setText("");
        email.setEnabled(false);
        email.setText("");
        tipoTelefone.setSelectedIndex(0);
        tipoTelefone.setEnabled(false);
        telefone.setEnabled(false);
        telefone.setText("");
        ramal.setEnabled(false);
        ramal.setText("");
        departamento.setEnabled(false);
        departamento.setText("");
        dicaFormato.setText("");
        tipoTelefone2.setEnabled(false);
        tipoTelefone2.setSelectedIndex(0);
        telefone2.setEnabled(false);
        telefone2.setText("");
        ramal2.setEnabled(false);
        ramal2.setText("");
        dicaFormato2.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(false);
        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
        modeloContatos.setNumRows(0);
        //BOTOES ORCAMENTOS-----------------------------------------------------
        radioMesAnoOrcamentos.setEnabled(false);
        radioMesAnoOrcamentos.setSelected(false);
        radioAnoOrcamentos.setEnabled(false);
        radioAnoOrcamentos.setSelected(false);
        radioEmissorOrcamentos.setEnabled(false);
        radioEmissorOrcamentos.setSelected(false);
        anoOrcamentos.setEnabled(false);
        anoOrcamentos.revalidate();
        mesOrcamentos.setEnabled(false);
        mesOrcamentos.revalidate();
        textoOrcamentos.setEnabled(false);
        textoOrcamentos.setText(null);
        filtrarOrcamentos.setEnabled(false);
        limparFiltrosOrcamentos.setEnabled(false);
        quantidadeOrcamentos.setText(null);
        valorTotalOrcamentos.setText(null);
        //TABELA ORCAMENTOS-----------------------------------------------------
        tabelaOrcamentos.setEnabled(false);
        DefaultTableModel modeloOrcamentos = (DefaultTableModel) tabelaOrcamentos.getModel();
        modeloOrcamentos.setNumRows(0);

        CODIGO_CLIENTE = 0;
    }

    public void estadoPessoaJuridicaNovo() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
        pessoaFisica.setEnabled(true);
        pessoaJuridica.setEnabled(true);
        nomeCliente.setEnabled(true);
        nomeFantasia.setEnabled(true);
        cpf.setEnabled(false);
        cnpj.setEnabled(true);
        atividade.setEnabled(true);
        filialColigada.setEnabled(true);
        creditoDisponivel.setEnabled(false);
        codigoAtendente.setEnabled(false);
        nomeAtendente.setEnabled(false);
        observacoes.setEnabled(true);

        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(true);
        botaoIncluirEnderecos.setEnabled(true);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        tipoEndereco.setSelectedIndex(0);
        cep.setEnabled(false);
        cep.setText("");
        logradouro.setEnabled(false);
        logradouro.setText("");
        bairro.setEnabled(false);
        bairro.setText("");
        uf.setEnabled(false);
        uf.setText("");
        cidade.setEnabled(false);
        cidade.setText("");
        complemento.setEnabled(false);
        complemento.setText("");
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(false);
        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(true);
        botaoIncluirContatos.setEnabled(true);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        nomeContato.setText("");
        email.setEnabled(false);
        email.setText("");
        tipoTelefone.setSelectedIndex(0);
        tipoTelefone.setEnabled(false);
        telefone.setEnabled(false);
        telefone.setText("");
        ramal.setEnabled(false);
        ramal.setText("");
        departamento.setEnabled(false);
        departamento.setText("");
        dicaFormato.setText("");
        tipoTelefone2.setEnabled(false);
        tipoTelefone2.setSelectedIndex(0);
        telefone2.setEnabled(false);
        telefone2.setText("");
        ramal2.setEnabled(false);
        ramal2.setText("");
        dicaFormato2.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(false);
        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
        modeloContatos.setNumRows(0);
        //BOTOES ORCAMENTOS-----------------------------------------------------
        radioMesAnoOrcamentos.setEnabled(false);
        radioMesAnoOrcamentos.setSelected(false);
        radioAnoOrcamentos.setEnabled(false);
        radioAnoOrcamentos.setSelected(false);
        radioEmissorOrcamentos.setEnabled(false);
        radioEmissorOrcamentos.setSelected(false);
        anoOrcamentos.setEnabled(false);
        anoOrcamentos.revalidate();
        mesOrcamentos.setEnabled(false);
        mesOrcamentos.revalidate();
        textoOrcamentos.setEnabled(false);
        textoOrcamentos.setText(null);
        filtrarOrcamentos.setEnabled(false);
        limparFiltrosOrcamentos.setEnabled(false);
        quantidadeOrcamentos.setText(null);
        valorTotalOrcamentos.setText(null);
        //TABELA ORCAMENTOS-----------------------------------------------------
        tabelaOrcamentos.setEnabled(false);
        DefaultTableModel modeloOrcamentos = (DefaultTableModel) tabelaOrcamentos.getModel();
        modeloOrcamentos.setNumRows(0);

        CODIGO_CLIENTE = 0;
    }

    public void estadoPessoaFisicaEditar() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
        pessoaFisica.setEnabled(true);
        pessoaJuridica.setEnabled(true);
        nomeCliente.setEnabled(true);
        nomeFantasia.setEnabled(false);
        cpf.setEnabled(true);
        cnpj.setEnabled(false);
        atividade.setEnabled(true);
        filialColigada.setEnabled(false);
        creditoDisponivel.setEnabled(false);
        codigoAtendente.setEnabled(false);
        nomeAtendente.setEnabled(false);
        observacoes.setEnabled(true);

        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(true);
        botaoIncluirEnderecos.setEnabled(true);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        tipoEndereco.setSelectedIndex(0);
        cep.setEnabled(false);
        logradouro.setEnabled(false);
        bairro.setEnabled(false);
        uf.setEnabled(false);
        cidade.setEnabled(false);
        complemento.setEnabled(false);
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(true);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(true);
        botaoIncluirContatos.setEnabled(true);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        email.setEnabled(false);
        tipoTelefone.setEnabled(false);
        telefone.setEnabled(false);
        ramal.setEnabled(false);
        tipoTelefone2.setEnabled(false);
        telefone2.setEnabled(false);
        ramal2.setEnabled(false);
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(true);
        //BOTOES ORCAMENTOS-----------------------------------------------------
        radioMesAnoOrcamentos.setEnabled(true);
        radioMesAnoOrcamentos.setSelected(true);
        radioAnoOrcamentos.setEnabled(true);
        radioAnoOrcamentos.setSelected(true);
        radioEmissorOrcamentos.setEnabled(true);
        radioEmissorOrcamentos.setSelected(true);
        anoOrcamentos.setEnabled(true);
        anoOrcamentos.revalidate();
        mesOrcamentos.setEnabled(true);
        mesOrcamentos.revalidate();
        textoOrcamentos.setEnabled(true);
        textoOrcamentos.setText(null);
        filtrarOrcamentos.setEnabled(true);
        limparFiltrosOrcamentos.setEnabled(true);
        //TABELA ORCAMENTOS-----------------------------------------------------
        tabelaOrcamentos.setEnabled(true);
    }

    public void estadoPessoaJuridicaEditar() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
        pessoaFisica.setEnabled(true);
        pessoaJuridica.setEnabled(true);
        nomeCliente.setEnabled(true);
        nomeFantasia.setEnabled(true);
        cpf.setEnabled(false);
        cnpj.setEnabled(true);
        atividade.setEnabled(true);
        filialColigada.setEnabled(true);
        creditoDisponivel.setEnabled(false);
        codigoAtendente.setEnabled(false);
        nomeAtendente.setEnabled(false);
        observacoes.setEnabled(true);

        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(true);
        botaoIncluirEnderecos.setEnabled(true);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        cep.setEnabled(false);
        logradouro.setEnabled(false);
        bairro.setEnabled(false);
        uf.setEnabled(false);
        cidade.setEnabled(false);
        complemento.setEnabled(false);
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(true);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(true);
        botaoIncluirContatos.setEnabled(true);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        email.setEnabled(false);
        tipoTelefone.setSelectedIndex(0);
        tipoTelefone.setEnabled(false);
        telefone.setEnabled(false);
        ramal.setEnabled(false);
        departamento.setEnabled(false);
        tipoTelefone2.setEnabled(false);
        telefone2.setEnabled(false);
        ramal2.setEnabled(false);
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(true);
    }

    public static void estadoPosPesquisar() {
        botaoPesquisarClientes.setEnabled(false);
        botaoIncluirClientes.setEnabled(false);
        botaoEditarClientes.setEnabled(true);
        botaoDesativarClientes.setEnabled(true);
        botaoGravarClientes.setEnabled(false);
        botaoCancelarClientes.setEnabled(true);
        botaoSelecionarOrcamento.setEnabled(true);

//        switch(CLASSE_PAI){
//            case 1:
//            case 2:
//                
//                break;
//            default:
//                botaoSelecionarOrcamento.setEnabled(false);
//                break;
//        }
        //BOTOES ORCAMENTOS-----------------------------------------------------
        radioMesAnoOrcamentos.setEnabled(true);
        radioMesAnoOrcamentos.setSelected(true);
        radioAnoOrcamentos.setEnabled(true);
        radioAnoOrcamentos.setSelected(true);
        radioEmissorOrcamentos.setEnabled(true);
        radioEmissorOrcamentos.setSelected(true);
        anoOrcamentos.setEnabled(true);
        anoOrcamentos.revalidate();
        mesOrcamentos.setEnabled(true);
        mesOrcamentos.revalidate();
        textoOrcamentos.setEnabled(true);
        textoOrcamentos.setText(null);
        filtrarOrcamentos.setEnabled(true);
        limparFiltrosOrcamentos.setEnabled(true);
        quantidadeOrcamentos.setText(null);
        valorTotalOrcamentos.setText(null);
        radioMesAnoOrcamentos.setSelected(true);
        //TABELA ORCAMENTOS-----------------------------------------------------
        tabelaOrcamentos.setEnabled(true);
        calculoOrcamentosTodos();
    }

    public void estadoEditarCliente() {
        //INFORMAÇÕES CLIENTE---------------------------------------------------
        if (pessoaFisica.isSelected() == true) {
            estadoPessoaFisicaEditar();
        } else {
            estadoPessoaJuridicaEditar();
        }
        botaoGravarClientes.setEnabled(true);
        botaoPesquisarClientes.setEnabled(false);
        botaoEditarClientes.setEnabled(false);
        botaoDesativarClientes.setEnabled(false);
        botaoCancelarClientes.setEnabled(true);
        botaoSelecionarOrcamento.setEnabled(false);

        //ENDEREÇOS-------------------------------------------------------------
        botaoPesquisarEnderecos.setEnabled(true);
        botaoIncluirEnderecos.setEnabled(true);
        tabelaEnderecos.setEnabled(true);

        //CONTATOS--------------------------------------------------------------
        botaoPesquisarContatos.setEnabled(true);
        botaoIncluirContatos.setEnabled(true);
        tabelaContatos.setEnabled(true);
    }

    public void estadoIncluirCliente() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
        botaoPesquisarClientes.setEnabled(false);
        botaoIncluirClientes.setEnabled(false);
        botaoEditarClientes.setEnabled(false);
        botaoDesativarClientes.setEnabled(false);
        botaoGravarClientes.setEnabled(true);
        botaoCancelarClientes.setEnabled(true);
        botaoSelecionarOrcamento.setEnabled(false);
        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
        pessoaFisica.setEnabled(true);
        pessoaJuridica.setEnabled(true);
        nomeCliente.setEnabled(false);
        nomeCliente.setText("");
        nomeFantasia.setEnabled(false);
        nomeFantasia.setText("");
        cpf.setEnabled(false);
        cpf.setText("");
        cnpj.setEnabled(false);
        cnpj.setText("");
        atividade.setEnabled(false);
        atividade.setText("");
        filialColigada.setEnabled(false);
        filialColigada.setText("");
        creditoDisponivel.setEnabled(false);
        creditoDisponivel.setText("");
        codigoAtendente.setEnabled(false);
        nomeAtendente.setEnabled(false);
        observacoes.setEnabled(false);
        observacoes.setText("");

        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(false);
        botaoIncluirEnderecos.setEnabled(false);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        tipoEndereco.setSelectedIndex(0);
        cep.setEnabled(false);
        cep.setText("");
        logradouro.setEnabled(false);
        logradouro.setText("");
        bairro.setEnabled(false);
        bairro.setText("");
        uf.setEnabled(false);
        uf.setText("");
        cidade.setEnabled(false);
        cidade.setText("");
        complemento.setEnabled(false);
        complemento.setText("");
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(false);
        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(false);
        botaoIncluirContatos.setEnabled(false);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        nomeContato.setText("");
        email.setEnabled(false);
        email.setText("");
        telefone.setEnabled(false);
        telefone.setText("");
        ramal.setEnabled(false);
        ramal.setText("");
        departamento.setEnabled(false);
        departamento.setText("");
        dicaFormato.setText("");
        tipoTelefone2.setEnabled(false);
        tipoTelefone2.setSelectedIndex(0);
        telefone2.setEnabled(false);
        telefone2.setText("");
        ramal2.setEnabled(false);
        ramal2.setText("");
        dicaFormato2.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(false);
        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
        modeloContatos.setNumRows(0);

        codigo.setText("");
    }

    public void estadoGravarCliente() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
        botaoPesquisarClientes.setEnabled(true);
        botaoIncluirClientes.setEnabled(true);
        botaoEditarClientes.setEnabled(false);
        botaoDesativarClientes.setEnabled(false);
        botaoGravarClientes.setEnabled(false);
        botaoCancelarClientes.setEnabled(false);
        botaoSelecionarOrcamento.setEnabled(true);
        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
        pessoaFisica.setEnabled(false);
        pessoaJuridica.setEnabled(false);
        nomeCliente.setEnabled(false);
        nomeFantasia.setEnabled(false);
        cpf.setEnabled(false);
        cnpj.setEnabled(false);
        atividade.setEnabled(false);
        filialColigada.setEnabled(false);
        creditoDisponivel.setEnabled(false);
        codigoAtendente.setEnabled(false);
        nomeAtendente.setEnabled(false);
        observacoes.setEnabled(false);

        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(false);
        botaoIncluirEnderecos.setEnabled(false);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        cep.setEnabled(false);
        logradouro.setEnabled(false);
        bairro.setEnabled(false);
        uf.setEnabled(false);
        cidade.setEnabled(false);
        complemento.setEnabled(false);
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(false);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(false);
        botaoIncluirContatos.setEnabled(false);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        email.setEnabled(false);
        telefone.setEnabled(false);
        ramal.setEnabled(false);
        departamento.setEnabled(false);
        tipoTelefone2.setEnabled(false);
        tipoTelefone2.setSelectedIndex(0);
        telefone2.setEnabled(false);
        ramal2.setEnabled(false);
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(false);
    }

    //CONTATOS------------------------------------------------------------------
    public void estadoIncluirContato() {

        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
//        botaoPesquisarEnderecos.setEnabled(true);
//        botaoIncluirEnderecos.setEnabled(true);
//        botaoEditarEnderecos.setEnabled(false);
//        botaoExcluirEnderecos.setEnabled(false);
//        botaoGravarEnderecos.setEnabled(false);
//        botaoCancelarEnderecos.setEnabled(false);
//        botaoAdicionarClienteEnderecos.setEnabled(false);
//        botaoBuscar.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
//        tipoEndereco.setEnabled(false);
//        tipoEndereco.setSelectedIndex(0);
//        cep.setEnabled(false);
//        cep.setText("");
//        logadouro.setEnabled(false);
//        logadouro.setText("");
//        bairro.setEnabled(false);
//        bairro.setText("");
//        uf.setEnabled(false);
//        uf.setText("");
//        cidade.setEnabled(false);
//        cidade.setText("");
//        complemento.setEnabled(false);
//        complemento.setText("");
//        //TABELAS CADASTRO ENDERECOS--------------------------------------------
//        tabelaEnderecos.setEnabled(false);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);
        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(false);
        botaoIncluirContatos.setEnabled(false);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(true);
        botaoCancelarContatos.setEnabled(true);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(true);
        email.setEnabled(true);
        tipoTelefone.setEnabled(true);
        telefone.setEnabled(false);
        ramal.setEnabled(false);
        departamento.setEnabled(true);
        dicaFormato.setText("");
        tipoTelefone2.setEnabled(true);
        telefone2.setEnabled(false);
        ramal2.setEnabled(false);
        dicaFormato2.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(false);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0);
    }

    public void estadoEditarContato() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
//        botaoPesquisarEnderecos.setEnabled(true);
//        botaoIncluirEnderecos.setEnabled(true);
//        botaoEditarEnderecos.setEnabled(false);
//        botaoExcluirEnderecos.setEnabled(false);
//        botaoGravarEnderecos.setEnabled(false);
//        botaoCancelarEnderecos.setEnabled(false);
//        botaoAdicionarClienteEnderecos.setEnabled(false);
//        botaoBuscar.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
//        tipoEndereco.setEnabled(false);
//        tipoEndereco.setSelectedIndex(0);
//        cep.setEnabled(false);
//        cep.setText("");
//        logadouro.setEnabled(false);
//        logadouro.setText("");
//        bairro.setEnabled(false);
//        bairro.setText("");
//        uf.setEnabled(false);
//        uf.setText("");
//        cidade.setEnabled(false);
//        cidade.setText("");
//        complemento.setEnabled(false);
//        complemento.setText("");
//        //TABELAS CADASTRO ENDERECOS--------------------------------------------
//        tabelaEnderecos.setEnabled(false);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(false);
        botaoIncluirContatos.setEnabled(false);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(true);
        botaoCancelarContatos.setEnabled(true);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(true);
//        nomeContato.setText("");
        email.setEnabled(true);
//        email.setText("");
        tipoTelefone.setSelectedIndex(0);
        tipoTelefone.setEnabled(true);
        telefone.setEnabled(false);
//        telefone.setValue("");
        ramal.setEnabled(false);
//        ramal.setText("");
        departamento.setEnabled(true);
//        departamento.setText("");
//        dicaFormato.setText("");
        tipoTelefone2.setEnabled(true);
        telefone2.setEnabled(true);
        ramal2.setEnabled(true);
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(false);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0);
        System.out.println("editar");
        System.out.println(tabelaContatos.isEnabled());
    }

    public void estadoCancelarContato() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
//        botaoPesquisarEnderecos.setEnabled(true);
//        botaoIncluirEnderecos.setEnabled(true);
//        botaoEditarEnderecos.setEnabled(false);
//        botaoExcluirEnderecos.setEnabled(false);
//        botaoGravarEnderecos.setEnabled(false);
//        botaoCancelarEnderecos.setEnabled(false);
//        botaoAdicionarClienteEnderecos.setEnabled(false);
//        botaoBuscar.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
//        tipoEndereco.setEnabled(false);
//        tipoEndereco.setSelectedIndex(0);
//        cep.setEnabled(false);
//        cep.setText("");
//        logadouro.setEnabled(false);
//        logadouro.setText("");
//        bairro.setEnabled(false);
//        bairro.setText("");
//        uf.setEnabled(false);
//        uf.setText("");
//        cidade.setEnabled(false);
//        cidade.setText("");
//        complemento.setEnabled(false);
//        complemento.setText("");
//        //TABELAS CADASTRO ENDERECOS--------------------------------------------
//        tabelaEnderecos.setEnabled(false);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(true);
        botaoIncluirContatos.setEnabled(true);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        email.setEnabled(false);
        tipoTelefone.setSelectedIndex(0);
        tipoTelefone.setEnabled(false);
        telefone.setEnabled(false);
        ramal.setEnabled(false);
        departamento.setEnabled(false);
        tipoTelefone2.setEnabled(false);
        telefone2.setEnabled(false);
        ramal2.setEnabled(false);
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(true);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0);
        System.out.println("cancelar");
        System.out.println(tabelaContatos.isEnabled());
    }

    public void estadoRetirarTabelaContato() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
//        botaoPesquisarEnderecos.setEnabled(true);
//        botaoIncluirEnderecos.setEnabled(true);
//        botaoEditarEnderecos.setEnabled(false);
//        botaoExcluirEnderecos.setEnabled(false);
//        botaoGravarEnderecos.setEnabled(false);
//        botaoCancelarEnderecos.setEnabled(false);
//        botaoAdicionarClienteEnderecos.setEnabled(false);
//        botaoBuscar.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
//        tipoEndereco.setEnabled(false);
//        tipoEndereco.setSelectedIndex(0);
//        cep.setEnabled(false);
//        cep.setText("");
//        logadouro.setEnabled(false);
//        logadouro.setText("");
//        bairro.setEnabled(false);
//        bairro.setText("");
//        uf.setEnabled(false);
//        uf.setText("");
//        cidade.setEnabled(false);
//        cidade.setText("");
//        complemento.setEnabled(false);
//        complemento.setText("");
//        //TABELAS CADASTRO ENDERECOS--------------------------------------------
//        tabelaEnderecos.setEnabled(false);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(true);
        botaoIncluirContatos.setEnabled(true);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        email.setEnabled(false);
        tipoTelefone.setSelectedIndex(0);
        tipoTelefone.setEnabled(false);
        telefone.setEnabled(false);
        ramal.setEnabled(false);
        departamento.setEnabled(false);
        tipoTelefone2.setEnabled(false);
        telefone2.setEnabled(false);
        ramal2.setEnabled(false);
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(true);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0);
        System.out.println("retirar");
        System.out.println(tabelaContatos.isEnabled());
    }

    public void estadoGravarContato() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
//        botaoPesquisarEnderecos.setEnabled(true);
//        botaoIncluirEnderecos.setEnabled(true);
//        botaoEditarEnderecos.setEnabled(false);
//        botaoExcluirEnderecos.setEnabled(false);
//        botaoGravarEnderecos.setEnabled(false);
//        botaoCancelarEnderecos.setEnabled(false);
//        botaoAdicionarClienteEnderecos.setEnabled(false);
//        botaoBuscar.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
//        tipoEndereco.setEnabled(false);
//        tipoEndereco.setSelectedIndex(0);
//        cep.setEnabled(false);
//        cep.setText("");
//        logadouro.setEnabled(false);
//        logadouro.setText("");
//        bairro.setEnabled(false);
//        bairro.setText("");
//        uf.setEnabled(false);
//        uf.setText("");
//        cidade.setEnabled(false);
//        cidade.setText("");
//        complemento.setEnabled(false);
//        complemento.setText("");
//        //TABELAS CADASTRO ENDERECOS--------------------------------------------
//        tabelaEnderecos.setEnabled(false);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
        botaoPesquisarContatos.setEnabled(true);
        botaoIncluirContatos.setEnabled(true);
        botaoEditarContatos.setEnabled(false);
        botaoGravarContatos.setEnabled(false);
        botaoCancelarContatos.setEnabled(false);
        botaoRetirarTabelaContatos.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
        nomeContato.setEnabled(false);
        email.setEnabled(false);
        tipoTelefone.setSelectedIndex(0);
        tipoTelefone.setEnabled(false);
        telefone.setEnabled(false);
        ramal.setEnabled(false);
        departamento.setEnabled(false);
        tipoTelefone2.setEnabled(false);
        tipoTelefone2.setSelectedIndex(0);
        telefone2.setEnabled(false);
        ramal2.setEnabled(false);
        //TABELAS CADASTRO CONTATOS---------------------------------------------
        tabelaContatos.setEnabled(true);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0);
    }

    //ENDERECOS-----------------------------------------------------------------
    public void estadoIncluirEndereco() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(false);
        botaoIncluirEnderecos.setEnabled(false);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(true);
        botaoCancelarEnderecos.setEnabled(true);
        botaoBuscar.setEnabled(true);
        botaoRetirarTabelaEnderecos.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(true);
        tipoEndereco.setSelectedIndex(0);
        cep.setEnabled(true);
        logradouro.setEnabled(true);
        bairro.setEnabled(true);
        uf.setEnabled(true);
        cidade.setEnabled(true);
        complemento.setEnabled(true);
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(false);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
//        botaoPesquisarContatos.setEnabled(false);
//        botaoIncluirContatos.setEnabled(false);
//        botaoEditarContatos.setEnabled(false);
//        botaoGravarContatos.setEnabled(true);
//        botaoCancelarContatos.setEnabled(true);
//        botaoRetirarTabela.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
//        nomeContato.setEnabled(true);
//        nomeContato.setText("");
//        email.setEnabled(true);
//        email.setText("");
//        tipoTelefone.setSelectedIndex(0);
//        tipoTelefone.setEnabled(true);
//        telefone.setEnabled(false);
//        telefone.setText("");
//        ramal.setEnabled(false);
//        ramal.setText("");
//        departamento.setEnabled(true);
//        departamento.setText("");
//        dicaFormato.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
//        tabelaContatos.setEnabled(false);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0);
    }

    public void estadoCancelarEndereco() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(true);
        botaoIncluirEnderecos.setEnabled(true);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        cep.setEnabled(false);
        logradouro.setEnabled(false);
        bairro.setEnabled(false);
        uf.setEnabled(false);
        cidade.setEnabled(false);
        complemento.setEnabled(false);
//        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(true);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
//        botaoPesquisarContatos.setEnabled(true);
//        botaoIncluirContatos.setEnabled(true);
//        botaoEditarContatos.setEnabled(false);
//        botaoGravarContatos.setEnabled(false);
//        botaoCancelarContatos.setEnabled(false);
//        botaoRetirarTabela.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
//        nomeContato.setEnabled(false);
//        nomeContato.setText("");
//        email.setEnabled(false);
//        email.setText("");
//        tipoTelefone.setSelectedIndex(0);
//        tipoTelefone.setEnabled(false);
//        telefone.setEnabled(false);
//        telefone.setText("");
//        ramal.setEnabled(false);
//        ramal.setText("");
//        departamento.setEnabled(false);
//        departamento.setText("");
//        dicaFormato.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
//        tabelaContatos.setEnabled(true);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0);
    }

    public void estadoEditarEndereco() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(false);
        botaoIncluirEnderecos.setEnabled(false);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(true);
        botaoCancelarEnderecos.setEnabled(true);
        botaoBuscar.setEnabled(true);
        botaoRetirarTabelaEnderecos.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(true);
        cep.setEnabled(true);
        logradouro.setEnabled(true);
        bairro.setEnabled(true);
        uf.setEnabled(true);
        cidade.setEnabled(true);
        complemento.setEnabled(true);
//        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(false);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
//        botaoPesquisarContatos.setEnabled(true);
//        botaoIncluirContatos.setEnabled(true);
//        botaoEditarContatos.setEnabled(false);
//        botaoGravarContatos.setEnabled(false);
//        botaoCancelarContatos.setEnabled(false);
//        botaoRetirarTabela.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
//        nomeContato.setEnabled(false);
//        nomeContato.setText("");
//        email.setEnabled(false);
//        email.setText("");
//        tipoTelefone.setSelectedIndex(0);
//        tipoTelefone.setEnabled(false);
//        telefone.setEnabled(false);
//        telefone.setText("");
//        ramal.setEnabled(false);
//        ramal.setText("");
//        departamento.setEnabled(false);
//        departamento.setText("");
//        dicaFormato.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
//        tabelaContatos.setEnabled(true);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0); 
    }

    public void estadoGravarEndereco() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(true);
        botaoIncluirEnderecos.setEnabled(true);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        tipoEndereco.setSelectedIndex(0);
        cep.setEnabled(false);
        cep.setText("");
        logradouro.setEnabled(false);
        logradouro.setText("");
        bairro.setEnabled(false);
        bairro.setText("");
        uf.setEnabled(false);
        uf.setText("");
        cidade.setEnabled(false);
        cidade.setText("");
        complemento.setEnabled(false);
        complemento.setText("");
//        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(true);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
//        botaoPesquisarContatos.setEnabled(true);
//        botaoIncluirContatos.setEnabled(true);
//        botaoEditarContatos.setEnabled(false);
//        botaoGravarContatos.setEnabled(false);
//        botaoCancelarContatos.setEnabled(false);
//        botaoRetirarTabela.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
//        nomeContato.setEnabled(false);
//        nomeContato.setText("");
//        email.setEnabled(false);
//        email.setText("");
//        tipoTelefone.setSelectedIndex(0);
//        tipoTelefone.setEnabled(false);
//        telefone.setEnabled(false);
//        telefone.setText("");
//        ramal.setEnabled(false);
//        ramal.setText("");
//        departamento.setEnabled(false);
//        departamento.setText("");
//        dicaFormato.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
//        tabelaContatos.setEnabled(true);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0); 
    }

    public void estadoRetirarTabelaEndereco() {
        //BOTOES CADASTRO CLIENTES----------------------------------------------
//        botaoPesquisarClientes.setEnabled(true);
//        botaoIncluirClientes.setEnabled(true);
//        botaoEditarClientes.setEnabled(false);
//        botaoExcluirClientes.setEnabled(false);
//        botaoGravarClientes.setEnabled(false);
//        botaoCancelarClientes.setEnabled(false);
//        //CAMPOS INFORMAÇÃO CLIENTES--------------------------------------------
//        pessoaFisica.setEnabled(true);
//        pessoaJuridica.setEnabled(true);
//        nomeCliente.setEnabled(true);
//        nomeFantasia.setEnabled(false);
//        cpf.setEnabled(true);
//        cnpj.setEnabled(false);
//        atividade.setEnabled(true);
//        filialColigada.setEnabled(false);
//        creditoDisponivel.setEnabled(false);
//        codigoAtendente.setEnabled(false);
//        nomeAtendente.setEnabled(false);
//        observacoes.setEnabled(true);
//        
//        //BOTOES CADASTRO ENDERECOS---------------------------------------------
        botaoPesquisarEnderecos.setEnabled(true);
        botaoIncluirEnderecos.setEnabled(true);
        botaoEditarEnderecos.setEnabled(false);
        botaoGravarEnderecos.setEnabled(false);
        botaoCancelarEnderecos.setEnabled(false);
        botaoBuscar.setEnabled(false);
        botaoRetirarTabelaEnderecos.setEnabled(false);
//        //CAMPOS CADASTRO ENDERECOS---------------------------------------------
        tipoEndereco.setEnabled(false);
        tipoEndereco.setSelectedIndex(0);
        cep.setEnabled(false);
        logradouro.setEnabled(false);
        bairro.setEnabled(false);
        uf.setEnabled(false);
        cidade.setEnabled(false);
        complemento.setEnabled(false);
        //TABELAS CADASTRO ENDERECOS--------------------------------------------
        tabelaEnderecos.setEnabled(true);
//        DefaultTableModel modeloEnderecos = (DefaultTableModel) tabelaEnderecos.getModel();
//        modeloEnderecos.setNumRows(0);

        //BOTOES CADASTRO CONTATOS----------------------------------------------
//        botaoPesquisarContatos.setEnabled(false);
//        botaoIncluirContatos.setEnabled(false);
//        botaoEditarContatos.setEnabled(false);
//        botaoGravarContatos.setEnabled(true);
//        botaoCancelarContatos.setEnabled(true);
//        botaoRetirarTabela.setEnabled(false);
        //CAMPOS CADASTRO CONTATOS----------------------------------------------
//        nomeContato.setEnabled(true);
//        nomeContato.setText("");
//        email.setEnabled(true);
//        email.setText("");
//        tipoTelefone.setSelectedIndex(0);
//        tipoTelefone.setEnabled(true);
//        telefone.setEnabled(false);
//        telefone.setText("");
//        ramal.setEnabled(false);
//        ramal.setText("");
//        departamento.setEnabled(true);
//        departamento.setText("");
//        dicaFormato.setText("");
        //TABELAS CADASTRO CONTATOS---------------------------------------------
//        tabelaContatos.setEnabled(false);
//        DefaultTableModel modeloContatos = (DefaultTableModel) tabelaContatos.getModel();
//        modeloContatos.setNumRows(0);
    }

    //ETC-----------------------------------------------------------------------
    public static void calculoOrcamentosTodos() {
        //INSTANCIA AS VARIÁVEIS E FUNÇÕES NECESSÁRIAS--------------------------
        try {
            List retorno = new ArrayList();
            ClienteDAO cadastroClientes2DAO = new ClienteDAO();
            int quantidade = 0;
            float valorTotal = 0f;
            int tipoPessoa = 0;
            if (pessoaFisica.isSelected() == true) {
                tipoPessoa = 1;
            } else {
                tipoPessoa = 2;
            }
            DefaultTableModel modeloOrcamentos = (DefaultTableModel) tabelaOrcamentos.getModel();
            modeloOrcamentos.setNumRows(0);
            //PESQUISA NO BANCO, PREENCHE TABELA E FAZ OS CALCULOS------------------
            for (Orcamento aux : cadastroClientes2DAO.carregaOrcamentos(Integer.valueOf(codigo.getText()), tipoPessoa)) {
                modeloOrcamentos.addRow(new Object[]{
                    aux.getCod(),
                    Controle.dataPadrao.format(aux.getDataEmissao()),
                    Controle.dataPadrao.format(aux.getDataValidade()),
                    aux.getValorTotal(),
                    Controle.stsOrcamento.get(aux.getStatus()).toString(),
                    aux.getCodEmissor()
                });
                quantidade = quantidade + 1;
                valorTotal = valorTotal + aux.getValorTotal();
            }
            quantidadeOrcamentos.setText(String.valueOf(quantidade));
            valorTotalOrcamentos.setText(String.valueOf(valorTotal));
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }

    public static void calculoOrcamentosPersonalizado() {
        //INSTANCIA AS VARIÁVEIS E FUNÇÕES NECESSÁRIAS--------------------------
        try {
            List retorno = new ArrayList();
            ClienteDAO dao = new ClienteDAO();
            int quantidade = 0;
            float valorTotal = 0f;
            int tipoPessoa = 0;
            if (pessoaFisica.isSelected() == true) {
                tipoPessoa = 1;
            } else {
                tipoPessoa = 2;
            }
            DefaultTableModel modeloOrcamentos = (DefaultTableModel) tabelaOrcamentos.getModel();
            modeloOrcamentos.setNumRows(0);
            String tipoPesquisa = null;
            String pesquisa = null;

            //VERIFICA POR ERROS NA INSERÇÃO DO FILTRO------------------------------
            if (radioEmissorOrcamentos.isSelected() == true) {
                if (textoOrcamentos.getText().equals(null)) {
                    JOptionPane.showMessageDialog(null, "DIGITE O CÓDIGO DO EMISSOR NO CAMPO DE TEXTO!");
                    return;
                }
            }
            //FORMATA AS STRING'S PARA PESQUISA----------------------------------------
            if (radioMesAnoOrcamentos.isSelected() == true) {
                pesquisa = "0" + (mesOrcamentos.getMonth() + 1) + "/" + anoOrcamentos.getValue();
                tipoPesquisa = "MÊS/ANO";
            } else if (radioAnoOrcamentos.isSelected() == true) {
                pesquisa = String.valueOf(anoOrcamentos.getValue());
                tipoPesquisa = "ANO";
            } else if (radioEmissorOrcamentos.isSelected() == true) {
                pesquisa = textoOrcamentos.getText();
                tipoPesquisa = "EMISSOR";
            }

            //PESQUISA NO BANCO, PREENCHE TABELA E FAZ OS CALCULOS------------------
            for (Orcamento aux : dao.carregaOrcamentosPersonalizado(Integer.valueOf(codigo.getText()), tipoPessoa, tipoPesquisa, pesquisa)) {
                modeloOrcamentos.addRow(new Object[]{
                    aux.getCod(),
                    Controle.dataPadrao.format(aux.getDataEmissao()),
                    Controle.dataPadrao.format(aux.getDataValidade()),
                    aux.getValorTotal(),
                    aux.getStatus(),
                    aux.getCodEmissor()
                });
                quantidade = quantidade + 1;
                valorTotal = valorTotal + aux.getValorTotal();
            }
            quantidadeOrcamentos.setText(String.valueOf(quantidade));
            valorTotalOrcamentos.setText(String.valueOf(valorTotal));
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio(loading);
        }
    }

    public static Boolean verificaCpf(String cpf) {
        Boolean retorno = false;
        Integer num1 = Character.getNumericValue(cpf.charAt(0)),
                num2 = Character.getNumericValue(cpf.charAt(1)),
                num3 = Character.getNumericValue(cpf.charAt(2)),
                num4 = Character.getNumericValue(cpf.charAt(3)),
                num5 = Character.getNumericValue(cpf.charAt(4)),
                num6 = Character.getNumericValue(cpf.charAt(5)),
                num7 = Character.getNumericValue(cpf.charAt(6)),
                num8 = Character.getNumericValue(cpf.charAt(7)),
                num9 = Character.getNumericValue(cpf.charAt(8)),
                num10 = Character.getNumericValue(cpf.charAt(9)),
                num11 = Character.getNumericValue(cpf.charAt(10)),
                soma1, soma2;

        if (Objects.equals(num1, num2)
                && Objects.equals(num2, num3)
                && Objects.equals(num3, num4)
                && Objects.equals(num5, num6)
                && Objects.equals(num6, num7)
                && Objects.equals(num7, num8)
                && Objects.equals(num8, num9)
                && Objects.equals(num9, num10)
                && Objects.equals(num10, num11)) {
            retorno = false;
        } else {
            soma1 = (num1 * 10) + (num2 * 9) + (num3 * 8) + (num4 * 7) + (num5 * 6) + (num6 * 5) + (num7 * 4) + (num8 * 3) + (num9 * 2);
            soma1 = (soma1 * 10) % 11;

            if (soma1 == 10) {
                soma1 = 0;
            }

            soma2 = (num1 * 11) + (num2 * 10) + (num3 * 9) + (num4 * 8) + (num5 * 7) + (num6 * 6) + (num7 * 5) + (num8 * 4) + (num9 * 3) + (num10 * 2);
            soma2 = (soma2 * 10) % 11;

            if (soma2 == 10) {
                soma2 = 0;
            }

            if (soma1 == num10 && soma2 == num11) {
                retorno = true;
            } else {
                retorno = false;
            }
        }

        return retorno;
    }

    public Boolean verificaCnpj(String cnpj) {
        Boolean retorno = false;
        Integer num1 = Character.getNumericValue(cnpj.charAt(0)),
                num2 = Character.getNumericValue(cnpj.charAt(1)),
                num3 = Character.getNumericValue(cnpj.charAt(2)),
                num4 = Character.getNumericValue(cnpj.charAt(3)),
                num5 = Character.getNumericValue(cnpj.charAt(4)),
                num6 = Character.getNumericValue(cnpj.charAt(5)),
                num7 = Character.getNumericValue(cnpj.charAt(6)),
                num8 = Character.getNumericValue(cnpj.charAt(7)),
                num9 = Character.getNumericValue(cnpj.charAt(8)),
                num10 = Character.getNumericValue(cnpj.charAt(9)),
                num11 = Character.getNumericValue(cnpj.charAt(10)),
                num12 = Character.getNumericValue(cnpj.charAt(11)),
                num13 = Character.getNumericValue(cnpj.charAt(12)),
                num14 = Character.getNumericValue(cnpj.charAt(13)),
                digito1, digito2;

        if (Objects.equals(num1, num2)
                && Objects.equals(num2, num3)
                && Objects.equals(num3, num4)
                && Objects.equals(num5, num6)
                && Objects.equals(num6, num7)
                && Objects.equals(num7, num8)
                && Objects.equals(num8, num9)
                && Objects.equals(num9, num10)
                && Objects.equals(num10, num11)
                && Objects.equals(num11, num12)
                && Objects.equals(num12, num13)
                && Objects.equals(num13, num14)) {
            retorno = false;
        } else {
            digito1 = (num1 * 5)
                    + (num2 * 4)
                    + (num3 * 3)
                    + (num4 * 2)
                    + (num5 * 9)
                    + (num6 * 8)
                    + (num7 * 7)
                    + (num8 * 6)
                    + (num9 * 5)
                    + (num10 * 4)
                    + (num11 * 3)
                    + (num12 * 2);
            digito1 = digito1 % 11;

            if (digito1 < 2) {
                digito1 = 0;
            } else {
                digito1 = 11 - digito1;
            }

            digito2 = (num1 * 6)
                    + (num2 * 5)
                    + (num3 * 4)
                    + (num4 * 3)
                    + (num5 * 2)
                    + (num6 * 9)
                    + (num7 * 8)
                    + (num8 * 7)
                    + (num9 * 6)
                    + (num10 * 5)
                    + (num11 * 4)
                    + (num12 * 3)
                    + (digito1 * 2);

            digito2 = digito2 % 11;

            if (digito2 < 2) {
                digito2 = 0;
            } else {
                digito2 = 11 - digito2;
            }

            if (digito1 == num13 && digito2 == num14) {
                retorno = true;
            } else {
                retorno = false;
            }
        }

        return retorno;
    }

}
