/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.cadastros.produtos;

import static connection.IntegracaoLojaIntegrada.realizaRequisicaoPOST;
import static connection.IntegracaoLojaIntegrada.realizaRequisicaoPUT;
import entities.lojaIntegrada.Product;
import exception.EnvioExcecao;
import ui.cadastros.papeis.PapelBEAN;
import exception.SemAcabamentoException;
import java.io.IOException;
import javax.swing.table.DefaultTableModel;
import ui.cadastros.papeis.PapelCadastro;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import ui.cadastros.acabamentos.AcabamentoDAO;
import ui.cadastros.acabamentos.AcabamentosCadastro;
import ui.cadastros.papeis.PapelDAO;
import ui.controle.Controle;
import ui.orcamentos.operacoes.OrcamentoPrincipalFrame;
import ui.principal.GerenteJanelas;

/**
 *
 * @author claud
 */
public final class ProdutoFrame extends javax.swing.JInternalFrame {

    public static boolean orcamentoNovo;
    public static boolean orcamentoEditar;
    public static String descricaoPapel;
    private int COD_PROD;
    private static boolean SEL_ORC = false;
    public static boolean inserir = false;
    private final JLabel loading;
    private final GerenteJanelas gj;
    private static ProdutoFrame cadastroProdutosNovo;

    /**
     * @param FUNCAO 1 - EDITANDO 2 - CLONANDO 3 - ALTERANDO ESTOQUE
     */
    private byte FUNCAO = 0;

    public static void setSEL_ORC(boolean SEL_ORC) {
        ProdutoFrame.SEL_ORC = SEL_ORC;
    }

    public static ProdutoFrame getInstancia(JLabel loading, GerenteJanelas gj) {
        return new ProdutoFrame(loading, gj);
    }

    /**
     * Creates new form CadastroProdutosNovo
     *
     * @param loading label para mostrar carregamento do sistema
     * @param gj gerente janelas para abrir ou fechar janelas
     */
    public ProdutoFrame(JLabel loading, GerenteJanelas gj) {
        initComponents();
        this.loading = loading;
        this.gj = gj;
        retirarAcabamento.setEnabled(false);
        retirarPapel.setEnabled(false);
        orelha.setEnabled(false);
        orelha.setValue(0);

        limpa();

        tabPaneInfoProduto.setEnabledAt(5, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tipoIntProduto = new javax.swing.ButtonGroup();
        paiFilho = new javax.swing.ButtonGroup();
        tipoConsulta = new javax.swing.ButtonGroup();
        tabPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jftfDescricaoProduto = new javax.swing.JTextField();
        salvar = new javax.swing.JButton();
        jftfLarguraProduto = new javax.swing.JFormattedTextField();
        jftfAlturaProduto = new javax.swing.JFormattedTextField();
        jsfQtdFolhasProduto = new com.toedter.components.JSpinField();
        jcbTipoProduto = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jrdParaProducao = new javax.swing.JRadioButton();
        jrdParaProntaEntrega = new javax.swing.JRadioButton();
        jckbUtilizadoEcommerce = new javax.swing.JCheckBox();
        jckbAtivo = new javax.swing.JCheckBox();
        lblLarguraProduto = new javax.swing.JLabel();
        lblAlturaProduto = new javax.swing.JLabel();
        jftfEspessuraProduto = new javax.swing.JFormattedTextField();
        lblEspessuraProduto = new javax.swing.JLabel();
        lblPesoProduto = new javax.swing.JLabel();
        jftfPesoProduto = new javax.swing.JFormattedTextField();
        tabPaneInfoProduto = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPapel = new javax.swing.JTable();
        retirarPapel = new javax.swing.JButton();
        inserirPapel = new javax.swing.JButton();
        codigoPapel = new javax.swing.JFormattedTextField();
        tipoPapel = new javax.swing.JComboBox<>();
        orelha = new javax.swing.JFormattedTextField();
        coresFrente = new com.toedter.components.JSpinField();
        coresVerso = new com.toedter.components.JSpinField();
        concluirPapel = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        retirarAcabamento = new javax.swing.JButton();
        pesquisar_acabamentos = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAcabamentos = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jdcInicioPromProduto = new com.toedter.calendar.JDateChooser();
        jdcFimPromProduto = new com.toedter.calendar.JDateChooser();
        jftfVlrUnitProduto = new javax.swing.JFormattedTextField();
        jckbPromProduto = new javax.swing.JCheckBox();
        jftfVlrPromProduto = new javax.swing.JFormattedTextField();
        jckbProdPreVenda = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        jftfEstoqueFisicoProduto = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jckbAvisoEstoqueProduto = new javax.swing.JCheckBox();
        jftfAvisoEstoqueProduto = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jftfQtdMinProduto = new javax.swing.JFormattedTextField();
        jckbQtdMaxProduto = new javax.swing.JCheckBox();
        jftfQtdMaxProduto = new javax.swing.JFormattedTextField();
        jPanel16 = new javax.swing.JPanel();
        jrdProdutoPai = new javax.swing.JRadioButton();
        jrdProdutoFilho = new javax.swing.JRadioButton();
        jbtnAdicionarPai = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtblFilhos = new javax.swing.JTable();
        lblMov = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        textoPesquisaProduto = new javax.swing.JTextField();
        btnPesqPe = new javax.swing.JButton();
        btnMostrarUltPe = new javax.swing.JButton();
        btnSelecionar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnClonar = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblConsulta = new javax.swing.JTable();
        tipoPesquisaProduto = new javax.swing.JComboBox<>();
        btnAlterarEstoque = new javax.swing.JButton();
        jrdConsultaProducao = new javax.swing.JRadioButton();
        jrdConsultaProntaEntrega = new javax.swing.JRadioButton();

        setTitle("CADASTRO DE PRODUTOS");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/produto.png"))); // NOI18N

        jPanel2.setPreferredSize(new java.awt.Dimension(798, 450));

        jftfDescricaoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("DESCRIÇÃO (MÁXIMO 150 CARACTERES)"));
        jftfDescricaoProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jftfDescricaoProdutoKeyPressed(evt);
            }
        });

        salvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/gravar.png"))); // NOI18N
        salvar.setText("SALVAR");
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });

        jftfLarguraProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("LARGURA"));
        jftfLarguraProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jftfAlturaProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("ALTURA"));
        jftfAlturaProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jftfAlturaProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jftfAlturaProdutoActionPerformed(evt);
            }
        });

        jsfQtdFolhasProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("QTD FOLHAS"));
        jsfQtdFolhasProduto.setValue(1);

        jcbTipoProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "FOLHA", "BLOCO", "LIVRO" }));
        jcbTipoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO"));
        jcbTipoProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbTipoProdutoItemStateChanged(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        jButton1.setText("LIMPAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "TIPO DE PRODUTO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        tipoIntProduto.add(jrdParaProducao);
        jrdParaProducao.setSelected(true);
        jrdParaProducao.setText("PRODUÇÃO (PP)");
        jrdParaProducao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrdParaProducaoItemStateChanged(evt);
            }
        });

        tipoIntProduto.add(jrdParaProntaEntrega);
        jrdParaProntaEntrega.setText("PRONTA ENTREGA (PE)");
        jrdParaProntaEntrega.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrdParaProntaEntregaItemStateChanged(evt);
            }
        });

        jckbUtilizadoEcommerce.setText("SERÁ UTILIZADO NO E-COMMERCE");
        jckbUtilizadoEcommerce.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckbUtilizadoEcommerceItemStateChanged(evt);
            }
        });

        jckbAtivo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jckbAtivo.setText("ATIVO");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(jckbUtilizadoEcommerce)
                .addGap(18, 18, 18)
                .addComponent(jckbAtivo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jrdParaProducao)
                    .addContainerGap(732, Short.MAX_VALUE)))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addGap(137, 137, 137)
                    .addComponent(jrdParaProntaEntrega)
                    .addContainerGap(585, Short.MAX_VALUE)))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jckbUtilizadoEcommerce)
                    .addComponent(jckbAtivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel10Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jrdParaProducao)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                    .addContainerGap(17, Short.MAX_VALUE)
                    .addComponent(jrdParaProntaEntrega)
                    .addContainerGap()))
        );

        lblLarguraProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/largura.png"))); // NOI18N

        lblAlturaProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/altura.png"))); // NOI18N

        jftfEspessuraProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("ESPESSURA"));
        jftfEspessuraProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jftfEspessuraProduto.setToolTipText("EM CENTÍMETROS");
        jftfEspessuraProduto.setValue(0);
        jftfEspessuraProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jftfEspessuraProdutoActionPerformed(evt);
            }
        });

        lblEspessuraProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/espessura.png"))); // NOI18N

        lblPesoProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/peso.png"))); // NOI18N

        jftfPesoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("PESO"));
        jftfPesoProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jftfPesoProduto.setToolTipText("EM KILOGRAMAS");
        jftfPesoProduto.setValue(0);
        jftfPesoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jftfPesoProdutoActionPerformed(evt);
            }
        });

        tblPapel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "DESCRIÇÃO", "TIPO", "ORELHA", "CORES FRENTE", "CORES VERSO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPapel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPapelMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblPapel);

        retirarPapel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove.png"))); // NOI18N
        retirarPapel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retirarPapelActionPerformed(evt);
            }
        });

        inserirPapel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        inserirPapel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserirPapelActionPerformed(evt);
            }
        });

        codigoPapel.setBorder(javax.swing.BorderFactory.createTitledBorder("CÓDIGO"));
        codigoPapel.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        tipoPapel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "CAPA", "MIOLO", "FOLHA", "1ª VIA", "2ª VIA", "3ª VIA" }));
        tipoPapel.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO"));
        tipoPapel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoPapelItemStateChanged(evt);
            }
        });

        orelha.setBorder(javax.swing.BorderFactory.createTitledBorder("ORELHA (CM)"));
        orelha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        orelha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orelhaActionPerformed(evt);
            }
        });

        coresFrente.setBorder(javax.swing.BorderFactory.createTitledBorder("CORES FRENTE"));

        coresVerso.setBorder(javax.swing.BorderFactory.createTitledBorder("CORES VERSO"));

        concluirPapel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        concluirPapel.setText("CONCLUIR");
        concluirPapel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                concluirPapelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(retirarPapel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inserirPapel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(codigoPapel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tipoPapel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(orelha, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coresFrente, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coresVerso, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(concluirPapel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        jPanel12Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {inserirPapel, retirarPapel});

        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(concluirPapel)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(codigoPapel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tipoPapel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(orelha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(coresFrente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(coresVerso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(inserirPapel)
                        .addGap(6, 6, 6)
                        .addComponent(retirarPapel))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {codigoPapel, tipoPapel});

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {concluirPapel, coresVerso});

        tabPaneInfoProduto.addTab("PAPÉIS", jPanel12);

        retirarAcabamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove.png"))); // NOI18N
        retirarAcabamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retirarAcabamentoActionPerformed(evt);
            }
        });

        pesquisar_acabamentos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        pesquisar_acabamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisar_acabamentosActionPerformed(evt);
            }
        });

        tblAcabamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "DESCRIÇÃO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAcabamentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAcabamentosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblAcabamentos);
        if (tblAcabamentos.getColumnModel().getColumnCount() > 0) {
            tblAcabamentos.getColumnModel().getColumn(1).setPreferredWidth(500);
        }

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pesquisar_acabamentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(retirarAcabamento, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3)
                .addGap(7, 7, 7))
        );

        jPanel13Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pesquisar_acabamentos, retirarAcabamento});

        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(pesquisar_acabamentos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(retirarAcabamento)
                        .addGap(0, 90, Short.MAX_VALUE)))
                .addContainerGap())
        );

        tabPaneInfoProduto.addTab("ACABAMENTOS", jPanel13);

        jdcInicioPromProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("INÍCIO"));
        jdcInicioPromProduto.setEnabled(false);

        jdcFimPromProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("FIM"));
        jdcFimPromProduto.setEnabled(false);

        jftfVlrUnitProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("VALOR UNITÁRIO (R$)"));
        jftfVlrUnitProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jftfVlrUnitProduto.setText("0,00");
        jftfVlrUnitProduto.setValue(0);
        jftfVlrUnitProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jftfVlrUnitProdutoActionPerformed(evt);
            }
        });

        jckbPromProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckbPromProdutoItemStateChanged(evt);
            }
        });

        jftfVlrPromProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("VALOR PROMOCIONAL (R$)"));
        jftfVlrPromProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jftfVlrPromProduto.setEnabled(false);
        jftfVlrPromProduto.setValue(0);

        jckbProdPreVenda.setText("PRODUTO PARA PRÉ-VENDA?");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jckbProdPreVenda)
                .addGap(18, 18, 18)
                .addComponent(jftfVlrUnitProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jckbPromProduto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jftfVlrPromProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdcInicioPromProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jdcFimPromProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jdcInicioPromProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jdcFimPromProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jftfVlrUnitProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .addComponent(jftfVlrPromProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .addComponent(jckbProdPreVenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jckbPromProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(122, Short.MAX_VALUE))
        );

        tabPaneInfoProduto.addTab("VALORES", jPanel4);

        jftfEstoqueFisicoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("ESTOQUE FÍSICO"));
        jftfEstoqueFisicoProduto.setValue(0);

        jLabel3.setText("UNIDADES");

        jckbAvisoEstoqueProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckbAvisoEstoqueProdutoItemStateChanged(evt);
            }
        });

        jftfAvisoEstoqueProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("AVISO DE ESTOQUE EM"));
        jftfAvisoEstoqueProduto.setEnabled(false);
        jftfAvisoEstoqueProduto.setValue(0);

        jLabel12.setText("UNIDADES");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jftfEstoqueFisicoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jckbAvisoEstoqueProduto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jftfAvisoEstoqueProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addContainerGap(378, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jftfEstoqueFisicoProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jckbAvisoEstoqueProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jftfAvisoEstoqueProduto)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(122, Short.MAX_VALUE))
        );

        tabPaneInfoProduto.addTab("ESTOQUE", jPanel14);

        jftfQtdMinProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("QUANTIDADE MÍNIMA"));
        jftfQtdMinProduto.setValue(0);

        jckbQtdMaxProduto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckbQtdMaxProdutoItemStateChanged(evt);
            }
        });

        jftfQtdMaxProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("QUANTIDADE MÁXIMA"));
        jftfQtdMaxProduto.setEnabled(false);
        jftfQtdMaxProduto.setValue(0);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jftfQtdMinProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jckbQtdMaxProduto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jftfQtdMaxProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jftfQtdMaxProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(jftfQtdMinProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(jckbQtdMaxProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(19, 122, Short.MAX_VALUE))
        );

        tabPaneInfoProduto.addTab("PEDIDOS", jPanel15);

        paiFilho.add(jrdProdutoPai);
        jrdProdutoPai.setText("PRODUTO PAI");

        paiFilho.add(jrdProdutoFilho);
        jrdProdutoFilho.setText("PRODUTO FILHO");

        jbtnAdicionarPai.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        jbtnAdicionarPai.setText("ADICIONAR PAI");

        jtblFilhos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO FILHO", "DESCRIÇÃO FILHO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtblFilhos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblFilhosMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jtblFilhos);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrdProdutoPai)
                    .addComponent(jrdProdutoFilho))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnAdicionarPai)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbtnAdicionarPai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(jrdProdutoPai)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jrdProdutoFilho)))
                        .addGap(123, 123, 123))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        tabPaneInfoProduto.addTab("PAI/FILHOS", jPanel16);

        lblMov.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblMov.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jftfDescricaoProduto)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salvar))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblLarguraProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jftfLarguraProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAlturaProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jftfAlturaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblEspessuraProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jftfEspessuraProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPesoProduto)
                        .addGap(9, 9, 9)
                        .addComponent(jftfPesoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jsfQtdFolhasProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcbTipoProduto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(tabPaneInfoProduto)
                    .addComponent(lblMov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jftfAlturaProduto, jftfLarguraProduto});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jftfDescricaoProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbTipoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jsfQtdFolhasProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLarguraProduto)
                            .addComponent(jftfLarguraProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                            .addComponent(lblAlturaProduto)
                            .addComponent(jftfAlturaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEspessuraProduto)
                            .addComponent(jftfEspessuraProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPesoProduto)
                            .addComponent(jftfPesoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabPaneInfoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMov, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(121, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jcbTipoProduto, jftfAlturaProduto, jftfDescricaoProduto, jftfLarguraProduto, jsfQtdFolhasProduto, lblAlturaProduto, lblLarguraProduto});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, salvar});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jftfEspessuraProduto, lblEspessuraProduto});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jftfPesoProduto, lblPesoProduto});

        tabPane.addTab("NOVO/EDITAR", new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png")), jPanel2); // NOI18N

        btnPesqPe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        btnPesqPe.setText("PESQUISAR");
        btnPesqPe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesqPeActionPerformed(evt);
            }
        });

        btnMostrarUltPe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ultimos.png"))); // NOI18N
        btnMostrarUltPe.setText("MOSTRAR 45 ÚLTIMOS");
        btnMostrarUltPe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarUltPeActionPerformed(evt);
            }
        });

        btnSelecionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        btnSelecionar.setText("SELECIONAR");
        btnSelecionar.setEnabled(false);
        btnSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/editar.png"))); // NOI18N
        btnEditar.setText("EDITAR");
        btnEditar.setEnabled(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnClonar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/clonar.png"))); // NOI18N
        btnClonar.setText("CLONAR");
        btnClonar.setEnabled(false);
        btnClonar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClonarActionPerformed(evt);
            }
        });

        tblConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "ID", "DESCRIÇÃO", "VALOR UNITÁRIO", "ESTOQUE", "PRÉ-VENDA", "PROMOÇÃO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblConsultaMouseClicked(evt);
            }
        });
        tblConsulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblConsultaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblConsultaKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(tblConsulta);
        if (tblConsulta.getColumnModel().getColumnCount() > 0) {
            tblConsulta.getColumnModel().getColumn(0).setMinWidth(50);
            tblConsulta.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblConsulta.getColumnModel().getColumn(1).setPreferredWidth(15);
            tblConsulta.getColumnModel().getColumn(2).setPreferredWidth(400);
            tblConsulta.getColumnModel().getColumn(4).setPreferredWidth(30);
            tblConsulta.getColumnModel().getColumn(5).setPreferredWidth(45);
            tblConsulta.getColumnModel().getColumn(6).setPreferredWidth(45);
        }

        tipoPesquisaProduto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "CÓDIGO", "DESCRIÇÃO" }));
        tipoPesquisaProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("PESQUISAR POR"));

        btnAlterarEstoque.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/editar.png"))); // NOI18N
        btnAlterarEstoque.setText("ALTERAR ESTOQUE/VALOR UNITÁRIO");
        btnAlterarEstoque.setEnabled(false);
        btnAlterarEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarEstoqueActionPerformed(evt);
            }
        });

        tipoConsulta.add(jrdConsultaProducao);
        jrdConsultaProducao.setSelected(true);
        jrdConsultaProducao.setText("PRODUÇÃO");

        tipoConsulta.add(jrdConsultaProntaEntrega);
        jrdConsultaProntaEntrega.setText("PRONTA ENTREGA");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 893, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAlterarEstoque)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClonar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelecionar))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(tipoPesquisaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jrdConsultaProducao)
                            .addComponent(jrdConsultaProntaEntrega))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoPesquisaProduto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesqPe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMostrarUltPe)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoPesquisaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnMostrarUltPe)
                        .addComponent(btnPesqPe))
                    .addComponent(tipoPesquisaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrdConsultaProducao)
                    .addComponent(jrdConsultaProntaEntrega, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelecionar)
                    .addComponent(btnEditar)
                    .addComponent(btnClonar)
                    .addComponent(btnAlterarEstoque))
                .addContainerGap())
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnMostrarUltPe, btnPesqPe, textoPesquisaProduto, tipoPesquisaProduto});

        tabPane.addTab("CONSULTAR", new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png")), jPanel6); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlterarEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarEstoqueActionPerformed
        new Thread() {
            @Override
            public void run() {
                estadoAlterarEstoque();
                try {
                    loading.setText("CARREGANDO...");
                    loading.setVisible(true);

                    COD_PROD
                            = Integer.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 0).toString());

                    /**
                     * Carrega mais informações sobre o produto
                     */
                    ProdutoPrEntBEAN produto = ProdutoDAO.retornaPeEdicao(COD_PROD);

                    /**
                     * Preenche GUI
                     */
                    jftfDescricaoProduto.setText(produto.getDescricao());
                    jftfLarguraProduto.setValue(produto.getLargura());
                    jftfAlturaProduto.setValue(produto.getAltura());
                    jftfEspessuraProduto.setValue(produto.getEspessura());
                    jftfPesoProduto.setValue(produto.getPeso());
                    jsfQtdFolhasProduto.setValue(produto.getQtdPaginas());
                    jcbTipoProduto.setSelectedItem(produto.getTipo());
                    jckbProdPreVenda.setSelected((produto.getPreVenda() == 1));
                    jftfVlrUnitProduto.setValue(produto.getVlrUnit());
                    if (produto.getPromocao() == 1) {
                        jckbPromProduto.setSelected(produto.getPromocao() == 1);
                        jftfVlrPromProduto.setValue(produto.getVlrPromocao());
                        jdcInicioPromProduto.setDate(produto.getInicioPromocao());
                        jdcFimPromProduto.setDate(produto.getFimPromocao());
                    }
                    jftfEstoqueFisicoProduto.setValue(produto.getEstoque());
                    if (produto.getAvisoEstoque() == 1) {
                        jckbAvisoEstoqueProduto.setSelected(produto.getAvisoEstoque() == 1);
                        jftfAvisoEstoqueProduto.setValue(produto.getAvisoEstoqueUn());
                    }
                    jftfQtdMinProduto.setValue(produto.getPdQtdMin());
                    if (produto.getPdMax() == 1) {
                        jckbQtdMaxProduto.setSelected(produto.getPdMax() == 1);
                        jftfQtdMaxProduto.setValue(produto.getPdQtdMax());
                    }

                    /**
                     * Seleciona a aba 2
                     */
                    tabPane.setSelectedIndex(0);

                    /**
                     * Define a função como alterar estoque
                     */
                    FUNCAO = 3;
                } catch (SQLException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                }
                loading.setVisible(false);
            }
        }.start();
    }//GEN-LAST:event_btnAlterarEstoqueActionPerformed

    private void tblConsultaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblConsultaKeyTyped

    }//GEN-LAST:event_tblConsultaKeyTyped

    private void tblConsultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblConsultaKeyReleased
        new Thread() {
            @Override
            public void run() {
                mouseClicked();
            }
        }.start();
    }//GEN-LAST:event_tblConsultaKeyReleased

    private void tblConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblConsultaMouseClicked
        new Thread() {
            @Override
            public void run() {
                mouseClicked();
            }
        }.start();
    }//GEN-LAST:event_tblConsultaMouseClicked

    private void btnClonarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClonarActionPerformed
        switch (String.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 1))) {
            case "PP":
                carregaClonagem((byte) 1);
                break;
            case "PE":
                carregaClonagem((byte) 2);
                break;
        }
    }//GEN-LAST:event_btnClonarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        limpa();
        this.setTitle("EDITANDO PRODUTO " + COD_PROD);
        new Thread("CARREGA EDIÇÃO PRODUTO") {
            @Override
            public void run() {
                try {
                    loading.setText("CARREGANDO...");
                    loading.setVisible(true);

                    COD_PROD = Integer.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 0).toString());

                    switch (String.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 1))) {
                        case "PP":
                            ProdutoBEAN produtoPP = ProdutoDAO.retornaInfoProd(COD_PROD, (byte) 1);
                            jftfDescricaoProduto.setText(produtoPP.getDescricao());
                            jftfLarguraProduto.setValue(produtoPP.getLargura());
                            jftfAlturaProduto.setValue(produtoPP.getAltura());
                            jsfQtdFolhasProduto.setValue(produtoPP.getQuantidadeFolhas());
                            jcbTipoProduto.setSelectedItem(produtoPP.getTipoProduto());
                            jrdParaProducao.setSelected(true);
                            jckbAtivo.setSelected(produtoPP.isAtivo());
                            jckbUtilizadoEcommerce.setSelected(produtoPP.isUsoEcommerce());

                            if (produtoPP.isUsoEcommerce()) {
                                jftfVlrUnitProduto.setValue(produtoPP.getValorCusto());
                                jckbPromProduto.setSelected(produtoPP.isPrecoPromocional());
                                if (produtoPP.isPrecoPromocional()) {
                                    jftfVlrPromProduto.setValue(produtoPP.getValorPromocional());
                                }
                            }

                            if (produtoPP.isUsoEcommerce()) {
                                jftfEspessuraProduto.setValue(produtoPP.getEspessura());
                                jftfPesoProduto.setValue(produtoPP.getPeso());
                            }

                            DefaultTableModel modeloPapeis = (DefaultTableModel) ProdutoFrame.tblPapel.getModel();
                            for (PapelBEAN bean : ProdutoDAO.retornaInformacoesPapel(COD_PROD)) {
                                modeloPapeis.addRow(new Object[]{
                                    bean.getCodigo(),
                                    bean.getDescricaoPapel(),
                                    bean.getTipoPapel(),
                                    bean.getOrelha(),
                                    bean.getCorFrente(),
                                    bean.getCorVerso()
                                });
                            }

                            try {
                                DefaultTableModel modeloAcabamentos = (DefaultTableModel) ProdutoFrame.tblAcabamentos.getModel();
                                for (AcabamentoProdBEAN bean : AcabamentoDAO.retornaAcabamentosProduto(COD_PROD)) {
                                    modeloAcabamentos.addRow(new Object[]{
                                        bean.getCodigoAcabamento(),
                                        AcabamentoDAO.retornaDescricaoAcabamentos(bean.getCodigoAcabamento())
                                    });
                                }
                            } catch (SemAcabamentoException ex) {
                                //NENHUMA AÇÃO
                            }
                            break;
                        case "PE":
                            //CARREGA OS DADOS DO BD------------------------------------
                            ProdutoPrEntBEAN produtoPE = ProdutoDAO.retornaPeEdicao(COD_PROD);
                            //----------------------------------------------------------

                            //PREENCHE OS CAMPOS----------------------------------------
                            jftfDescricaoProduto.setText(produtoPE.getDescricao());
                            jftfLarguraProduto.setValue(produtoPE.getLargura());
                            jftfAlturaProduto.setValue(produtoPE.getAltura());
                            jftfEspessuraProduto.setValue(produtoPE.getEspessura());
                            jftfPesoProduto.setValue(produtoPE.getPeso());
                            jsfQtdFolhasProduto.setValue(produtoPE.getQtdPaginas());
                            jcbTipoProduto.setSelectedItem(produtoPE.getTipo());
                            jckbProdPreVenda.setSelected((produtoPE.getPreVenda() == 1));
                            jftfVlrUnitProduto.setValue(produtoPE.getVlrUnit());
                            jrdParaProntaEntrega.setSelected(true);
                            jckbUtilizadoEcommerce.setSelected(produtoPE.isUtilizadoEcommerce());

                            if (produtoPE.getPromocao() == 1) {
                                jckbPromProduto.setSelected(produtoPE.getPromocao() == 1);
                                jftfVlrPromProduto.setValue(produtoPE.getVlrPromocao());
                                jdcInicioPromProduto.setDate(produtoPE.getInicioPromocao());
                                jdcFimPromProduto.setDate(produtoPE.getFimPromocao());
                            }
                            jftfEstoqueFisicoProduto.setValue(produtoPE.getEstoque());
                            if (produtoPE.getAvisoEstoque() == 1) {
                                jckbAvisoEstoqueProduto.setSelected(produtoPE.getAvisoEstoque() == 1);
                                jftfAvisoEstoqueProduto.setValue(produtoPE.getAvisoEstoqueUn());
                            }
                            jftfQtdMinProduto.setValue(produtoPE.getPdQtdMin());
                            if (produtoPE.getPdMax() == 1) {
                                jckbQtdMaxProduto.setSelected(produtoPE.getPdMax() == 1);
                                jftfQtdMaxProduto.setValue(produtoPE.getPdQtdMax());
                            }
                            lblMov.setText("ÚLTIMA MOVIMENTAÇÃO: " + produtoPE.getUltMov());
                            //----------------------------------------------------------
                            break;
                    }

                    //SELECIONA A ABA NOVO/EDITAR-------------------------------
                    tabPane.setSelectedIndex(0);
                    //----------------------------------------------------------

                } catch (SQLException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                }
                loading.setVisible(false);
            }
        }.start();
        FUNCAO = 1;
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarActionPerformed
        COD_PROD
                = Integer.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 0).toString());
        new Thread() {
            @Override
            public void run() {
                switch (String.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 1).toString())) {
                    case "PP":
                        OrcamentoPrincipalFrame.carregaProdutos(COD_PROD, (byte) 1);
                        break;
                    case "PE":
                        OrcamentoPrincipalFrame.carregaProdutos(COD_PROD, (byte) 2);
                        break;
                }
            }
        }.start();
        this.dispose();
    }//GEN-LAST:event_btnSelecionarActionPerformed

    private void btnMostrarUltPeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarUltPeActionPerformed
        try {
            DefaultTableModel modeloConsulta = (DefaultTableModel) tblConsulta.getModel();
            modeloConsulta.setNumRows(0);
            if (jrdConsultaProducao.isSelected()) {
                for (ProdutoBEAN produto : ProdutoDAO.mostraTodos()) {
                    adicionaTblConsulta(modeloConsulta, produto, (byte) 1);
                }
            } else if (jrdConsultaProntaEntrega.isSelected()) {
                for (ProdutoPrEntBEAN produto : ProdutoDAO.pesquisaPe((byte) 3, null)) {
                    adicionaTblConsulta(modeloConsulta, produto, (byte) 2);
                }
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }//GEN-LAST:event_btnMostrarUltPeActionPerformed

    private void btnPesqPeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesqPeActionPerformed
        try {
            DefaultTableModel modeloConsulta = (DefaultTableModel) tblConsulta.getModel();
            modeloConsulta.setNumRows(0);
            if (jrdConsultaProducao.isSelected()) {
                if (tipoPesquisaProduto.getSelectedItem().equals("SELECIONE...")) {
                    JOptionPane.showMessageDialog(null, "SELECIONE UM TIPO DE PESQUISA!");
                } else {
                    try {
                        for (ProdutoBEAN produto : ProdutoDAO.pesquisaRegistro((String) tipoPesquisaProduto.getSelectedItem(),
                                textoPesquisaProduto.getText())) {
                            adicionaTblConsulta(modeloConsulta, produto, (byte) 1);
                        }
                    } catch (SQLException ex) {
                        EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                        EnvioExcecao.envio();
                    }
                }
            } else if (jrdConsultaProntaEntrega.isSelected()) {

                switch (tipoPesquisaProduto.getSelectedIndex()) {
                    case 0:
                        JOptionPane.showMessageDialog(null, "SELECIONE UM TIPO DE PESQUISA", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        break;
                    case 1:
                        for (ProdutoPrEntBEAN produto : ProdutoDAO.pesquisaPe((byte) 1,
                                textoPesquisaProduto.getText())) {
                            adicionaTblConsulta(modeloConsulta, produto, (byte) 2);
                        }
                        break;
                    case 2:
                        for (ProdutoPrEntBEAN produto : ProdutoDAO.pesquisaPe((byte) 2,
                                textoPesquisaProduto.getText())) {
                            adicionaTblConsulta(modeloConsulta, produto, (byte) 2);
                        }
                        break;
                }
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }//GEN-LAST:event_btnPesqPeActionPerformed

    private void jtblFilhosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblFilhosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jtblFilhosMouseClicked

    private void jckbQtdMaxProdutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckbQtdMaxProdutoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jckbQtdMaxProdutoItemStateChanged

    private void jckbAvisoEstoqueProdutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckbAvisoEstoqueProdutoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jckbAvisoEstoqueProdutoItemStateChanged

    private void jckbPromProdutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckbPromProdutoItemStateChanged
        if (jckbPromProduto.isSelected() && jrdParaProducao.isSelected()) {
            jftfVlrPromProduto.setEnabled(true);
            jdcInicioPromProduto.setEnabled(false);
            jdcFimPromProduto.setEnabled(false);
        } else if (jckbPromProduto.isSelected() && !jrdParaProducao.isSelected()) {
            jftfVlrPromProduto.setEnabled(true);
            jdcInicioPromProduto.setEnabled(true);
            jdcFimPromProduto.setEnabled(true);
        } else if (!jckbPromProduto.isSelected()) {
            jftfVlrPromProduto.setEnabled(false);
            jdcInicioPromProduto.setEnabled(false);
            jdcFimPromProduto.setEnabled(false);
        }
    }//GEN-LAST:event_jckbPromProdutoItemStateChanged

    private void tblAcabamentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAcabamentosMouseClicked
        retirarAcabamento.setEnabled(true);
    }//GEN-LAST:event_tblAcabamentosMouseClicked

    private void pesquisar_acabamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisar_acabamentosActionPerformed
        gj.abrirJanelas(AcabamentosCadastro.getInstancia((byte) 2, loading),
                "CADASTRO DE ACABAMENTOS");
    }//GEN-LAST:event_pesquisar_acabamentosActionPerformed

    private void retirarAcabamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retirarAcabamentoActionPerformed
        DefaultTableModel modeloAcabamentos = (DefaultTableModel) tblAcabamentos.getModel();
        modeloAcabamentos.removeRow(tblAcabamentos.getSelectedRow());
        retirarAcabamento.setEnabled(false);
    }//GEN-LAST:event_retirarAcabamentoActionPerformed

    private void concluirPapelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_concluirPapelActionPerformed
        if (!tipoPapel.getSelectedItem().toString().equals("CAPA")) {
            orelha.setValue(0);
        }

        if (jcbTipoProduto.getSelectedIndex() > 1 && tipoPapel.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "SELECIONE UM TIPO DE PAPEL!");
            return;
        }

        DefaultTableModel modelo_papel = (DefaultTableModel) tblPapel.getModel();
        modelo_papel.addRow(new Object[]{
            codigoPapel.getValue(),
            descricaoPapel,
            tipoPapel.getSelectedItem(),
            orelha.getValue(),
            coresFrente.getValue(),
            coresVerso.getValue()});
        estado1Papel();
        inserir = false;
    }//GEN-LAST:event_concluirPapelActionPerformed

    private void orelhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orelhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orelhaActionPerformed

    private void tipoPapelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoPapelItemStateChanged
        if (tipoPapel.getSelectedItem() != null) {
            if (jcbTipoProduto.getSelectedItem().toString().equals("LIVRO") && tipoPapel.getSelectedItem().toString().equals("CAPA") && inserir == true) {
                orelha.setEnabled(true);
            } else {
                orelha.setEnabled(false);
            }
        }
    }//GEN-LAST:event_tipoPapelItemStateChanged

    private void inserirPapelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserirPapelActionPerformed
        if (jcbTipoProduto.getSelectedItem().toString().equals("SELECIONE...")) {
            JOptionPane.showMessageDialog(null, "SELECIONE UM TIPO DE PRODUTO!");
            return;
        } else {
            PapelCadastro pc = new PapelCadastro();
            pc.setLocationRelativeTo(null);
            pc.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            pc.setTitle("CADASTRO DE PAPÉIS");
            PapelCadastro.listaPrecoPapeis = true;
            pc.setVisible(true);
            inserir = true;
            orelha.setValue(0f);
        }
    }//GEN-LAST:event_inserirPapelActionPerformed

    private void retirarPapelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retirarPapelActionPerformed
        DefaultTableModel modeloPapeis = (DefaultTableModel) tblPapel.getModel();
        modeloPapeis.removeRow(tblPapel.getSelectedRow());
        tblPapel.validate();
        retirarPapel.setEnabled(false);
    }//GEN-LAST:event_retirarPapelActionPerformed

    private void tblPapelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPapelMouseClicked
        retirarPapel.setEnabled(true);
    }//GEN-LAST:event_tblPapelMouseClicked

    private void jftfPesoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jftfPesoProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jftfPesoProdutoActionPerformed

    private void jftfEspessuraProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jftfEspessuraProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jftfEspessuraProdutoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        limpa();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jcbTipoProdutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbTipoProdutoItemStateChanged
        if (jcbTipoProduto.getSelectedItem().toString().equals("FOLHA") && jcbTipoProduto.getSelectedItem() != null) {
            tipoPapel.removeAllItems();
            tipoPapel.addItem("FOLHA");
        }
        if (jcbTipoProduto.getSelectedItem().toString().equals("LIVRO") && jcbTipoProduto.getSelectedItem() != null) {
            tipoPapel.removeAllItems();
            tipoPapel.addItem("SELECIONE...");
            tipoPapel.addItem("CAPA");
            tipoPapel.addItem("MIOLO");
        }
        if (jcbTipoProduto.getSelectedItem().toString().equals("BLOCO") && jcbTipoProduto.getSelectedItem() != null) {
            tipoPapel.removeAllItems();
            tipoPapel.addItem("SELECIONE...");
            tipoPapel.addItem("CAPA");
            tipoPapel.addItem("1ª VIA");
            tipoPapel.addItem("2ª VIA");
            tipoPapel.addItem("3ª VIA");
        }
        if (jcbTipoProduto.getSelectedItem().toString().equals("OUTROS") && jcbTipoProduto.getSelectedItem() != null) {
            tipoPapel.removeAllItems();
            tipoPapel.addItem("FOLHA");
        }
    }//GEN-LAST:event_jcbTipoProdutoItemStateChanged

    private void jftfAlturaProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jftfAlturaProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jftfAlturaProdutoActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        if (jrdParaProducao.isSelected()) {
            salvarProduto((byte) 1);
        } else if (jrdParaProntaEntrega.isSelected()) {
            salvarProduto((byte) 2);
        }
    }//GEN-LAST:event_salvarActionPerformed

    private void jftfDescricaoProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jftfDescricaoProdutoKeyPressed

    }//GEN-LAST:event_jftfDescricaoProdutoKeyPressed

    private void jrdParaProducaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrdParaProducaoItemStateChanged
        if (jrdParaProducao.isSelected() && !jckbUtilizadoEcommerce.isSelected()) {
            lblEspessuraProduto.setVisible(false);
            jftfEspessuraProduto.setVisible(false);
            lblPesoProduto.setVisible(false);
            jftfPesoProduto.setVisible(false);
            tabPaneInfoProduto.setSelectedIndex(0);
            tabPaneInfoProduto.setEnabledAt(0, true);
            tabPaneInfoProduto.setEnabledAt(1, true);
            tabPaneInfoProduto.setEnabledAt(2, false);
            tabPaneInfoProduto.setEnabledAt(3, false);
            tabPaneInfoProduto.setEnabledAt(4, false);
        } else if (jrdParaProducao.isSelected() && jckbUtilizadoEcommerce.isSelected()) {
            lblEspessuraProduto.setVisible(true);
            jftfEspessuraProduto.setVisible(true);
            lblPesoProduto.setVisible(true);
            jftfPesoProduto.setVisible(true);
            tabPaneInfoProduto.setSelectedIndex(0);
            tabPaneInfoProduto.setEnabledAt(0, true);
            tabPaneInfoProduto.setEnabledAt(1, true);
            tabPaneInfoProduto.setEnabledAt(2, false);
            tabPaneInfoProduto.setEnabledAt(3, false);
            tabPaneInfoProduto.setEnabledAt(4, false);
        }
    }//GEN-LAST:event_jrdParaProducaoItemStateChanged

    private void jckbUtilizadoEcommerceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckbUtilizadoEcommerceItemStateChanged
        if (jckbUtilizadoEcommerce.isSelected() && jrdParaProducao.isSelected()) {
            lblEspessuraProduto.setVisible(true);
            jftfEspessuraProduto.setVisible(true);
            lblPesoProduto.setVisible(true);
            jftfPesoProduto.setVisible(true);
            jckbProdPreVenda.setEnabled(false);
            tabPaneInfoProduto.setSelectedIndex(0);
            tabPaneInfoProduto.setEnabledAt(0, true);
            tabPaneInfoProduto.setEnabledAt(1, true);
            tabPaneInfoProduto.setEnabledAt(2, true);
            tabPaneInfoProduto.setEnabledAt(3, false);
            tabPaneInfoProduto.setEnabledAt(4, false);
        } else if (!jckbUtilizadoEcommerce.isSelected() && jrdParaProducao.isSelected()) {
            lblEspessuraProduto.setVisible(false);
            jftfEspessuraProduto.setVisible(false);
            lblPesoProduto.setVisible(false);
            jftfPesoProduto.setVisible(false);
            jckbProdPreVenda.setEnabled(true);
            tabPaneInfoProduto.setSelectedIndex(0);
            tabPaneInfoProduto.setEnabledAt(0, true);
            tabPaneInfoProduto.setEnabledAt(1, true);
            tabPaneInfoProduto.setEnabledAt(2, false);
            tabPaneInfoProduto.setEnabledAt(3, false);
            tabPaneInfoProduto.setEnabledAt(4, false);
        }
    }//GEN-LAST:event_jckbUtilizadoEcommerceItemStateChanged

    private void jrdParaProntaEntregaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrdParaProntaEntregaItemStateChanged
        if (jrdParaProntaEntrega.isSelected()) {
            lblEspessuraProduto.setVisible(true);
            jftfEspessuraProduto.setVisible(true);
            lblPesoProduto.setVisible(true);
            jftfPesoProduto.setVisible(true);
            tabPaneInfoProduto.setSelectedIndex(2);
            tabPaneInfoProduto.setEnabledAt(0, false);
            tabPaneInfoProduto.setEnabledAt(1, false);
            tabPaneInfoProduto.setEnabledAt(2, true);
            tabPaneInfoProduto.setEnabledAt(3, true);
            tabPaneInfoProduto.setEnabledAt(4, true);
        }
    }//GEN-LAST:event_jrdParaProntaEntregaItemStateChanged

    private void jftfVlrUnitProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jftfVlrUnitProdutoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jftfVlrUnitProdutoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterarEstoque;
    private javax.swing.JButton btnClonar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnMostrarUltPe;
    private javax.swing.JButton btnPesqPe;
    public static javax.swing.JButton btnSelecionar;
    public static javax.swing.JFormattedTextField codigoPapel;
    public static javax.swing.JButton concluirPapel;
    public static com.toedter.components.JSpinField coresFrente;
    public static com.toedter.components.JSpinField coresVerso;
    private javax.swing.JButton inserirPapel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jbtnAdicionarPai;
    public static javax.swing.JComboBox<String> jcbTipoProduto;
    private javax.swing.JCheckBox jckbAtivo;
    private javax.swing.JCheckBox jckbAvisoEstoqueProduto;
    private javax.swing.JCheckBox jckbProdPreVenda;
    private javax.swing.JCheckBox jckbPromProduto;
    private javax.swing.JCheckBox jckbQtdMaxProduto;
    private javax.swing.JCheckBox jckbUtilizadoEcommerce;
    public static com.toedter.calendar.JDateChooser jdcFimPromProduto;
    public static com.toedter.calendar.JDateChooser jdcInicioPromProduto;
    private javax.swing.JFormattedTextField jftfAlturaProduto;
    private javax.swing.JFormattedTextField jftfAvisoEstoqueProduto;
    private javax.swing.JTextField jftfDescricaoProduto;
    private javax.swing.JFormattedTextField jftfEspessuraProduto;
    private javax.swing.JFormattedTextField jftfEstoqueFisicoProduto;
    private javax.swing.JFormattedTextField jftfLarguraProduto;
    private javax.swing.JFormattedTextField jftfPesoProduto;
    private javax.swing.JFormattedTextField jftfQtdMaxProduto;
    private javax.swing.JFormattedTextField jftfQtdMinProduto;
    private javax.swing.JFormattedTextField jftfVlrPromProduto;
    private javax.swing.JFormattedTextField jftfVlrUnitProduto;
    private javax.swing.JRadioButton jrdConsultaProducao;
    private javax.swing.JRadioButton jrdConsultaProntaEntrega;
    private javax.swing.JRadioButton jrdParaProducao;
    private javax.swing.JRadioButton jrdParaProntaEntrega;
    private javax.swing.JRadioButton jrdProdutoFilho;
    private javax.swing.JRadioButton jrdProdutoPai;
    private com.toedter.components.JSpinField jsfQtdFolhasProduto;
    public static javax.swing.JTable jtblFilhos;
    private javax.swing.JLabel lblAlturaProduto;
    private javax.swing.JLabel lblEspessuraProduto;
    private javax.swing.JLabel lblLarguraProduto;
    private javax.swing.JLabel lblMov;
    private javax.swing.JLabel lblPesoProduto;
    public static javax.swing.JFormattedTextField orelha;
    private javax.swing.ButtonGroup paiFilho;
    private javax.swing.JButton pesquisar_acabamentos;
    private javax.swing.JButton retirarAcabamento;
    private javax.swing.JButton retirarPapel;
    private javax.swing.JButton salvar;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JTabbedPane tabPaneInfoProduto;
    public static javax.swing.JTable tblAcabamentos;
    public static javax.swing.JTable tblConsulta;
    public static javax.swing.JTable tblPapel;
    private javax.swing.JTextField textoPesquisaProduto;
    private javax.swing.ButtonGroup tipoConsulta;
    private javax.swing.ButtonGroup tipoIntProduto;
    public static javax.swing.JComboBox<String> tipoPapel;
    private javax.swing.JComboBox<String> tipoPesquisaProduto;
    // End of variables declaration//GEN-END:variables

    //TABELA CONSULTA-----------------------------------------------------------
    private void mouseClicked() {
        try {
            COD_PROD
                    = Integer.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 0).toString());
            switch (String.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 1))) {
                case "PP":
                    if (orcamentoNovo | orcamentoEditar) {
                        btnSelecionar.setEnabled(true);
                    } else {
                        btnSelecionar.setEnabled(false);
                    }
                    btnClonar.setEnabled(true);

                    if (ProdutoDAO.retornaUsoProduto(Integer.valueOf(COD_PROD)) == 1) {
                        btnEditar.setEnabled(false);
                    } else {
                        btnEditar.setEnabled(true);
                    }
                    btnAlterarEstoque.setEnabled(false);
                    break;
                case "PE":
                    if (ProdutoDAO.verificaUsoProdPe(COD_PROD)) {
                        btnEditar.setEnabled(false);
                        btnAlterarEstoque.setEnabled(true);

                    } else {
                        btnEditar.setEnabled(true);
                        btnAlterarEstoque.setEnabled(false);
                    }
                    btnClonar.setEnabled(true);

                    if (SEL_ORC) {
                        btnSelecionar.setEnabled(true);
                    }
                    break;
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }
    //--------------------------------------------------------------------------

    //ESTADOS-------------------------------------------------------------------
    public void estado1Papel() {
        codigoPapel.setEnabled(false);
        codigoPapel.setText(null);
        descricaoPapel = null;
        tipoPapel.setEnabled(false);
        coresFrente.setEnabled(false);
        coresVerso.setEnabled(false);
        concluirPapel.setEnabled(false);
        coresFrente.setValue(0);
        coresVerso.setValue(0);
        orelha.setValue(0);
        orelha.setEnabled(false);
        tipoPapel.setSelectedIndex(0);
    }

    public void estado2Papel() {
        codigoPapel.setEnabled(false);
        tipoPapel.setEnabled(true);
        coresFrente.setEnabled(true);
        coresVerso.setEnabled(true);
        concluirPapel.setEnabled(true);
        if (jcbTipoProduto.getSelectedItem().equals("LIVRO")) {
            orelha.setEnabled(true);
        } else {
            orelha.setEnabled(false);
        }
    }

    /**
     * Estado de alteração de estoque de produto
     */
    private void estadoAlterarEstoque() {
        jftfDescricaoProduto.setEditable(false);
        jftfLarguraProduto.setEditable(false);
        jftfAlturaProduto.setEditable(false);
        jftfEspessuraProduto.setEditable(false);
        jftfPesoProduto.setEditable(false);
        jsfQtdFolhasProduto.setEnabled(false);
        jcbTipoProduto.setEnabled(false);
        jckbProdPreVenda.setEnabled(true);
        jftfVlrUnitProduto.setEnabled(true);
        jckbPromProduto.setEnabled(true);
        jftfEstoqueFisicoProduto.setEnabled(true);
        jckbAvisoEstoqueProduto.setEnabled(true);
        jftfQtdMinProduto.setEnabled(true);
        jckbQtdMaxProduto.setEnabled(true);
        jckbUtilizadoEcommerce.setEnabled(true);
    }

    /**
     * Limpa a tela de cadastro
     */
    public void limpa() {
        //Variáveis estáticas---------------------------------------------------
        COD_PROD = 0;
        FUNCAO = 0;
        //Buttom groups---------------------------------------------------------
        tipoIntProduto.clearSelection();
        paiFilho.clearSelection();
        //Campos de texto-------------------------------------------------------
        jftfDescricaoProduto.setText("");
        jftfLarguraProduto.setValue(0f);
        jftfAlturaProduto.setValue(0f);
        jftfEspessuraProduto.setValue(0f);
        jftfPesoProduto.setValue(0f);
        jftfVlrUnitProduto.setValue(0f);
        jftfVlrPromProduto.setValue(0f);
        jftfEstoqueFisicoProduto.setValue(0);
        jftfAvisoEstoqueProduto.setValue(0);
        jftfQtdMaxProduto.setValue(0);
        jftfQtdMaxProduto.setValue(0);
        //Spin boxes------------------------------------------------------------
        jsfQtdFolhasProduto.setValue(1);
        //Combo boxes-----------------------------------------------------------
        jcbTipoProduto.setSelectedIndex(0);
        //Tabelas---------------------------------------------------------------
        DefaultTableModel modeloPapel = (DefaultTableModel) tblPapel.getModel();
        modeloPapel.setNumRows(0);
        estado1Papel();
        DefaultTableModel modeloAcabamentos = (DefaultTableModel) tblAcabamentos.getModel();
        modeloAcabamentos.setNumRows(0);
        DefaultTableModel modeloFilhos = (DefaultTableModel) jtblFilhos.getModel();
        modeloFilhos.setNumRows(0);
        //Check boxes-----------------------------------------------------------
        jckbUtilizadoEcommerce.setSelected(false);
        jckbAtivo.setSelected(false);
        jckbProdPreVenda.setSelected(false);
        jckbPromProduto.setSelected(false);
        jckbAvisoEstoqueProduto.setSelected(false);
        jckbQtdMaxProduto.setSelected(false);
        //Date Choosers---------------------------------------------------------
        jdcInicioPromProduto.setDate(null);
        jdcFimPromProduto.setDate(null);
        //Tab Pane--------------------------------------------------------------
        tabPaneInfoProduto.setSelectedIndex(0);
        //Set estado inicial----------------------------------------------------
        jrdParaProducao.setSelected(true);
    }
    //--------------------------------------------------------------------------

    private static int mdc(int a, int b) {
        while (b != 0) {
            int r = a % b;
            a = b;
            b = r;
        }
        return a;
    }

    private static int mmc(int a, int b) {
        return a * (b / mdc(a, b));
    }

    /**
     * Carrega as informações para a clonagem do produto
     *
     * @param tipo 1 - Para produção, 2 - Para pronta entrega
     */
    private void carregaClonagem(byte tipo) {
        try {
            limpa();

            COD_PROD = Integer.valueOf(tblConsulta.getValueAt(tblConsulta.getSelectedRow(), 0).toString());
            this.setTitle("CLONANDO PRODUTO " + COD_PROD);
            loading.setVisible(true);
            loading.setText("CARREGANDO CLONAGEM...");

            FUNCAO = 2;

            switch (tipo) {
                case 1:
                    ProdutoBEAN produtoPP = ProdutoDAO.retornaInfoProd(COD_PROD, (byte) 1);
                    jftfDescricaoProduto.setText(produtoPP.getDescricao());
                    jftfLarguraProduto.setValue(produtoPP.getLargura());
                    jftfAlturaProduto.setValue(produtoPP.getAltura());
                    jsfQtdFolhasProduto.setValue(produtoPP.getQuantidadeFolhas());
                    jcbTipoProduto.setSelectedItem(produtoPP.getTipoProduto());
                    jrdParaProducao.setSelected(true);
                    jckbAtivo.setSelected(produtoPP.isAtivo());
                    jckbUtilizadoEcommerce.setSelected(produtoPP.isUsoEcommerce());

                    if (produtoPP.isUsoEcommerce()) {
                        jftfEspessuraProduto.setValue(produtoPP.getEspessura());
                        jftfPesoProduto.setValue(produtoPP.getPeso());
                    }

                    DefaultTableModel modeloPapeis = (DefaultTableModel) ProdutoFrame.tblPapel.getModel();
                    for (PapelBEAN bean : ProdutoDAO.retornaInformacoesPapel(COD_PROD)) {
                        modeloPapeis.addRow(new Object[]{
                            bean.getCodigo(),
                            bean.getDescricaoPapel(),
                            bean.getTipoPapel(),
                            bean.getOrelha(),
                            bean.getCorFrente(),
                            bean.getCorVerso()
                        });
                    }

                    try {
                        DefaultTableModel modeloAcabamentos = (DefaultTableModel) ProdutoFrame.tblAcabamentos.getModel();
                        for (AcabamentoProdBEAN bean : AcabamentoDAO.retornaAcabamentosProduto(COD_PROD)) {
                            modeloAcabamentos.addRow(new Object[]{
                                bean.getCodigoAcabamento(),
                                AcabamentoDAO.retornaDescricaoAcabamentos(bean.getCodigoAcabamento())
                            });
                        }
                    } catch (SemAcabamentoException ex) {
                        //NENHUMA AÇÃO
                    }
                    break;
                case 2:
                    //CARREGA OS DADOS DO BD--------------------------------------------
                    ProdutoPrEntBEAN produtoPE = ProdutoDAO.retornaPeEdicao(COD_PROD);
                    //------------------------------------------------------------------

                    //PREENCHE OS CAMPOS------------------------------------------------
                    jrdParaProntaEntrega.setSelected(true);
                    jckbAtivo.setSelected(produtoPE.isAtivo());
                    jftfDescricaoProduto.setText(produtoPE.getDescricao());
                    jftfLarguraProduto.setValue(produtoPE.getLargura());
                    jftfAlturaProduto.setValue(produtoPE.getAltura());
                    jftfEspessuraProduto.setValue(produtoPE.getEspessura());
                    jftfPesoProduto.setValue(produtoPE.getPeso());
                    jsfQtdFolhasProduto.setValue(produtoPE.getQtdPaginas());
                    jcbTipoProduto.setSelectedItem(produtoPE.getTipo());
                    jckbProdPreVenda.setSelected((produtoPE.getPreVenda() == 1));
                    jftfVlrUnitProduto.setValue(produtoPE.getVlrUnit());
                    jckbUtilizadoEcommerce.setSelected(produtoPE.isUtilizadoEcommerce());
                    if (produtoPE.getPromocao() == 1) {
                        jckbPromProduto.setSelected(produtoPE.getPromocao() == 1);
                        jftfVlrPromProduto.setValue(produtoPE.getVlrPromocao());
                        jdcInicioPromProduto.setDate(produtoPE.getInicioPromocao());
                        jdcFimPromProduto.setDate(produtoPE.getFimPromocao());
                    }
                    jftfEstoqueFisicoProduto.setValue(produtoPE.getEstoque());
                    if (produtoPE.getAvisoEstoque() == 1) {
                        jckbAvisoEstoqueProduto.setSelected(produtoPE.getAvisoEstoque() == 1);
                        jftfAvisoEstoqueProduto.setValue(produtoPE.getAvisoEstoqueUn());
                    }
                    jftfQtdMinProduto.setValue(produtoPE.getPdQtdMin());
                    if (produtoPE.getPdMax() == 1) {
                        jckbQtdMaxProduto.setSelected(produtoPE.getPdMax() == 1);
                        jftfQtdMaxProduto.setValue(produtoPE.getPdQtdMax());
                    }
                    //------------------------------------------------------------------
                    break;
            }
            tabPane.setSelectedIndex(0);
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
        loading.setVisible(false);
    }

    /**
     * Salva o cadastro dos produtos
     *
     * @param tipo 1 - Para produção, 2 - Para pronta entrega (PE)
     */
    private void salvarProduto(byte tipo) {
        try {
            loading.setText("SALVANDO...");
            loading.setVisible(true);

            if (verificaCasosErro(tipo) == 1) {
                return;
            }

            switch (tipo) {
                case 1:
                    ProdutoBEAN produto = new ProdutoBEAN();
                    PapelBEAN papeisCadastroBEAN = new PapelBEAN();
                    AcabamentoProdBEAN produtosComponentesBEAN = new AcabamentoProdBEAN();

                    produto.setDescricao(jftfDescricaoProduto.getText().toUpperCase());
                    produto.setLargura(Float.valueOf(jftfLarguraProduto.getValue().toString().replace(",", ".")));
                    produto.setAltura(Float.valueOf(jftfAlturaProduto.getValue().toString().replace(",", ".")));
                    produto.setQuantidadePaginas(jsfQtdFolhasProduto.getValue());
                    produto.setTipoProduto(jcbTipoProduto.getSelectedItem().toString());
                    produto.setAtivo(jckbAtivo.isSelected());

                    //CASO O PRODUTO SEJA UTILIZADO NO E-COMMERCE---------------
                    if (jckbUtilizadoEcommerce.isSelected()) {
                        produto.setEspessura(Float.valueOf(jftfEspessuraProduto.getValue().toString().replace(",", ".")));
                        produto.setPeso(Float.valueOf(jftfPesoProduto.getValue().toString().replace(",", ".")));
                        produto.setValorCusto(Float.valueOf(jftfVlrUnitProduto.getValue().toString().replace(",", ".")));
                        produto.setUsoEcommerce(true);
                        if (jckbPromProduto.isSelected()) {
                            produto.setPrecoPromocional(true);
                            produto.setValorPromocional(Float.valueOf(jftfVlrPromProduto.getValue().toString().replace(",", ".")));
                        } else {
                            produto.setPrecoPromocional(false);
                            produto.setValorPromocional(produto.getValorCusto());
                        }
                    } else {
                        produto.setUsoEcommerce(false);
                    }
                    //----------------------------------------------------------

                    switch (FUNCAO) {
                        case 1:
                            produto.setCodigo(COD_PROD);
                            PapelDAO.exluiPapeisProduto(COD_PROD, (byte) 1);
                            AcabamentoDAO.excluiAcabamentosProduto(COD_PROD, (byte) 1);
                            ProdutoDAO.atualiza(produto);

                            if (jckbUtilizadoEcommerce.isSelected()) {
                                try {
                                    loading.setText("INSERINDO NO E-COMMERCE...");
                                    realizaRequisicaoPOST((byte) 5, new Product(
                                            String.valueOf(COD_PROD),
                                            "PP" + String.valueOf(COD_PROD),
                                            produto.getDescricao(),
                                            produto.getDescricao(),
                                            produto.isAtivo(),
                                            produto.getPeso(),
                                            produto.getAltura(),
                                            produto.getLargura(),
                                            produto.getEspessura(),
                                            "normal"
                                    ));

                                    realizaRequisicaoPUT((byte) 2, new Product(
                                            String.valueOf(COD_PROD),
                                            "PP" + String.valueOf(COD_PROD),
                                            produto.getValorCusto(),
                                            produto.getValorPromocional()
                                    ));
                                    loading.setText("SALVANDO...");
                                } catch (IOException | InterruptedException | SQLException ex) {
                                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                                    EnvioExcecao.envio();
                                }
                            }

                            break;

                        case 0:
                        case 2:
                            COD_PROD = ProdutoDAO.retornaUltimoProduto((byte) 1) + 1;
                            produto.setCodigo(COD_PROD);
                            ProdutoDAO.cria(produto);

                            if (jckbUtilizadoEcommerce.isSelected()) {
                                try {
                                    loading.setText("INSERINDO NO E-COMMERCE...");
                                    realizaRequisicaoPOST((byte) 5, new Product(
                                            String.valueOf(COD_PROD),
                                            "PP" + String.valueOf(COD_PROD),
                                            produto.getDescricao(),
                                            produto.getDescricao(),
                                            produto.isAtivo(),
                                            produto.getPeso(),
                                            produto.getAltura(),
                                            produto.getLargura(),
                                            produto.getEspessura(),
                                            "normal"
                                    ));

                                    realizaRequisicaoPUT((byte) 2, new Product(
                                            String.valueOf(COD_PROD),
                                            "PP" + String.valueOf(COD_PROD),
                                            produto.getValorCusto(),
                                            produto.getValorPromocional()
                                    ));
                                    loading.setText("SALVANDO...");
                                } catch (IOException | InterruptedException | SQLException ex) {
                                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                                    EnvioExcecao.envio();
                                }
                            }

                            break;

                    }

                    switch (FUNCAO) {
                        case 0:
                        case 1:
                        case 2:
                            if (tblPapel.getRowCount() > 0) {
                                for (int i = 0; i < tblPapel.getRowCount(); i++) {
                                    papeisCadastroBEAN.setCodProduto(COD_PROD);
                                    papeisCadastroBEAN.setTipoProduto((byte) 1);
                                    papeisCadastroBEAN.setCodPapel((int) tblPapel.getValueAt(i, 0));
                                    papeisCadastroBEAN.setTipo_papel((String) tblPapel.getValueAt(i, 2));
                                    papeisCadastroBEAN.setCor_frente((int) tblPapel.getValueAt(i, 4));
                                    papeisCadastroBEAN.setCor_verso((int) tblPapel.getValueAt(i, 5));
                                    papeisCadastroBEAN.setDescricaoPapel((String) tblPapel.getValueAt(i, 1));
                                    papeisCadastroBEAN.setOrelha(Float.valueOf(tblPapel.getValueAt(i, 3).toString().replace(",", ".")));
                                    PapelDAO.criaPplProduto(papeisCadastroBEAN);
                                }
                            }

                            if (tblAcabamentos.getRowCount() > 0) {
                                for (int i = 0; i < tblAcabamentos.getRowCount(); i++) {
                                    produtosComponentesBEAN.setTipoProduto((byte) 1);
                                    produtosComponentesBEAN.setCodigoProduto(COD_PROD);
                                    produtosComponentesBEAN.setCodigoAcabamento((int) tblAcabamentos.getValueAt(i, 0));
                                    AcabamentoDAO.criaAcabamentosProduto(produtosComponentesBEAN);
                                }
                            }
                            break;
                    }
                    break;
                case 2:
                    switch (FUNCAO) {
                        case 1:
                            ProdutoDAO.atualizaPE(new ProdutoPrEntBEAN(COD_PROD,
                                    jftfDescricaoProduto.getText().toUpperCase(),
                                    Float.valueOf(jftfLarguraProduto.getText().replace(",", ".")),
                                    Float.valueOf(jftfAlturaProduto.getText().replace(",", ".")),
                                    Float.valueOf(jftfEspessuraProduto.getText().replace(",", ".")),
                                    Float.valueOf(jftfPesoProduto.getText().replace(",", ".")),
                                    jckbProdPreVenda.isSelected() ? (byte) 1 : (byte) 0,
                                    jckbPromProduto.isSelected() ? (byte) 1 : (byte) 0,
                                    jftfVlrPromProduto.getText().equals("") ? 0.00 : Double.valueOf(jftfVlrPromProduto.getText().replace(",", ".")),
                                    jdcInicioPromProduto.getDate(),
                                    jdcFimPromProduto.getDate(),
                                    jsfQtdFolhasProduto.getValue(),
                                    Integer.valueOf(jftfEstoqueFisicoProduto.getValue().toString()),
                                    jckbAvisoEstoqueProduto.isSelected() ? (byte) 1 : (byte) 0,
                                    Integer.valueOf(jftfAvisoEstoqueProduto.getValue().toString()),
                                    String.valueOf(jcbTipoProduto.getSelectedItem()),
                                    Double.valueOf(jftfVlrUnitProduto.getValue().toString()),
                                    new java.sql.Timestamp(new Date().getTime()),
                                    Integer.valueOf(jftfQtdMinProduto.getText()),
                                    jckbQtdMaxProduto.isSelected() ? (byte) 1 : (byte) 0,
                                    jftfQtdMaxProduto.getText().equals("") ? 0 : Integer.valueOf(jftfQtdMaxProduto.getText()),
                                    jckbAtivo.isSelected(),
                                    jckbUtilizadoEcommerce.isSelected()
                            ));

                            if (jckbUtilizadoEcommerce.isSelected()) {
                                try {
                                    loading.setText("INSERINDO NO E-COMMERCE...");
                                    realizaRequisicaoPUT((byte) 1, new Product(
                                            String.valueOf(COD_PROD),
                                            "PE" + String.valueOf(COD_PROD),
                                            jftfDescricaoProduto.getText().toUpperCase(),
                                            jftfDescricaoProduto.getText().toUpperCase(),
                                            true,
                                            Float.valueOf(jftfPesoProduto.getText().replace(",", ".")),
                                            Float.valueOf(jftfAlturaProduto.getText().replace(",", ".")),
                                            Float.valueOf(jftfLarguraProduto.getText().replace(",", ".")),
                                            Float.valueOf(jftfEspessuraProduto.getText().replace(",", ".")),
                                            "normal"
                                    ));

                                    realizaRequisicaoPUT((byte) 2, new Product(
                                            String.valueOf(COD_PROD),
                                            "PE" + String.valueOf(COD_PROD),
                                            Float.valueOf(jftfVlrUnitProduto.getValue().toString()),
                                            jftfVlrPromProduto.getText().equals("") ? 0 : Float.valueOf(jftfVlrPromProduto.getText().replace(",", "."))
                                    ));

                                    realizaRequisicaoPUT((byte) 3, new Product(
                                            String.valueOf(COD_PROD),
                                            "PE" + String.valueOf(COD_PROD),
                                            Integer.valueOf(jftfEstoqueFisicoProduto.getValue().toString())
                                    ));

                                    loading.setText("SALVANDO...");
                                } catch (IOException | InterruptedException | SQLException ex) {
                                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                                    EnvioExcecao.envio();
                                }

                                //INTERAÇÃO COM O USUÁRIO---------------------------------------
                                JOptionPane.showMessageDialog(null, "PRODUTO EDITADO COM SUCESSO COM SUCESSO. >> CÓDIGO: "
                                        + COD_PROD, "CONFIMAÇÃO", JOptionPane.INFORMATION_MESSAGE);
                                //--------------------------------------------------------------

                                break;
                            }

                        case 3:
                            ProdutoDAO.atualizaEstPe(new ProdutoPrEntBEAN(
                                    COD_PROD,
                                    Integer.valueOf(jftfEstoqueFisicoProduto.getValue().toString()),
                                    jckbAvisoEstoqueProduto.isSelected() ? (byte) 1 : (byte) 0,
                                    Integer.valueOf(jftfAvisoEstoqueProduto.getText())
                            ));
                            JOptionPane.showMessageDialog(null, "INFORMAÇÕES ATUALIZADAS COM SUCESSO.",
                                    "CONFIMAÇÃO", JOptionPane.INFORMATION_MESSAGE);
                            //--------------------------------------------------------------
                            break;
                        default:
                            COD_PROD = ProdutoDAO.retornaUltimoProduto((byte) 2) + 1;
                            ProdutoDAO.inserePe(new ProdutoPrEntBEAN(COD_PROD,
                                    jftfDescricaoProduto.getText().toUpperCase(),
                                    Float.valueOf(jftfLarguraProduto.getText().replace(",", ".")),
                                    Float.valueOf(jftfAlturaProduto.getText().replace(",", ".")),
                                    Float.valueOf(jftfEspessuraProduto.getText().replace(",", ".")),
                                    Float.valueOf(jftfPesoProduto.getText().replace(",", ".")),
                                    jckbProdPreVenda.isSelected() ? (byte) 1 : (byte) 0,
                                    jckbPromProduto.isSelected() ? (byte) 1 : (byte) 0,
                                    jckbPromProduto.isSelected() ? Double.valueOf(jftfVlrPromProduto.getText().replace(",", ".")) : (Double) 0.00,
                                    jdcInicioPromProduto.getDate(),
                                    jdcFimPromProduto.getDate(),
                                    jsfQtdFolhasProduto.getValue(),
                                    Integer.valueOf(jftfEstoqueFisicoProduto.getValue().toString()),
                                    jckbAvisoEstoqueProduto.isSelected() ? (byte) 1 : (byte) 0,
                                    Integer.valueOf(jftfAvisoEstoqueProduto.getValue().toString()),
                                    String.valueOf(jcbTipoProduto.getSelectedItem()),
                                    Double.valueOf(jftfVlrUnitProduto.getValue().toString()),
                                    new java.sql.Timestamp(new Date().getTime()),
                                    Integer.valueOf(jftfQtdMinProduto.getText()),
                                    jckbQtdMaxProduto.isSelected() ? (byte) 1 : (byte) 0,
                                    jckbQtdMaxProduto.isSelected() ? Integer.valueOf(jftfQtdMaxProduto.getText()) : (int) 0,
                                    jckbAtivo.isSelected(),
                                    jckbUtilizadoEcommerce.isSelected()
                            ));

                            if (jckbUtilizadoEcommerce.isSelected()) {
                                try {
                                    loading.setText("INSERINDO NO E-COMMERCE...");
                                    realizaRequisicaoPUT((byte) 1, new Product(
                                            String.valueOf(COD_PROD),
                                            "PE" + String.valueOf(COD_PROD),
                                            jftfDescricaoProduto.getText().toUpperCase(),
                                            jftfDescricaoProduto.getText().toUpperCase(),
                                            true,
                                            Float.valueOf(jftfPesoProduto.getText().replace(",", ".")),
                                            Float.valueOf(jftfAlturaProduto.getText().replace(",", ".")),
                                            Float.valueOf(jftfLarguraProduto.getText().replace(",", ".")),
                                            Float.valueOf(jftfEspessuraProduto.getText().replace(",", ".")),
                                            "normal"
                                    ));

                                    realizaRequisicaoPUT((byte) 2, new Product(
                                            String.valueOf(COD_PROD),
                                            "PE" + String.valueOf(COD_PROD),
                                            Float.valueOf(jftfVlrUnitProduto.getValue().toString()),
                                            jftfVlrPromProduto.getText().equals("") ? 0 : Float.valueOf(jftfVlrPromProduto.getText().replace(",", "."))
                                    ));

                                    realizaRequisicaoPUT((byte) 3, new Product(
                                            String.valueOf(COD_PROD),
                                            "PE" + String.valueOf(COD_PROD),
                                            Integer.valueOf(jftfEstoqueFisicoProduto.getValue().toString())
                                    ));

                                    loading.setText("SALVANDO...");
                                } catch (IOException | InterruptedException | SQLException ex) {
                                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                                    EnvioExcecao.envio();
                                }
                            }

                            //INTERAÇÃO COM O USUÁRIO---------------------------------------
                            JOptionPane.showMessageDialog(null, "PRODUTO SALVO COM SUCESSO COM SUCESSO. >> CÓDIGO: "
                                    + ProdutoDAO.traduzCodProd(COD_PROD, (byte) 2), "CONFIMAÇÃO", JOptionPane.INFORMATION_MESSAGE);
                            //--------------------------------------------------------------
                            break;
                    }
                    //------------------------------------------------------------------
                    /**
                     * Reseta a função
                     */
                    FUNCAO = 0;
                    break;
            }
            JOptionPane.showMessageDialog(null, "PRODUTO Nº " + COD_PROD + " CADASTRADO COM SUCESSO!");
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
            loading.setVisible(false);
            return;
        }
        loading.setVisible(false);
        limpa();
        this.setTitle("CADASTRO DE PRODUTOS");
    }

    /**
     * Verifica os casos de erro de inserção do usuário
     *
     * @param tipo 1 - Para produção, 2 - Para pronta entrega (PE)
     * @return 1 - Erro, 0 - Ok
     */
    private byte verificaCasosErro(byte tipo) {
        try {
            switch (tipo) {
                case 1:
                    if (ProdutoDAO.verificaDescricao(jftfDescricaoProduto.getText())
                            & FUNCAO != 1) {
                        JOptionPane.showMessageDialog(null, "DESCRIÇÃO DE PRODUTO JÁ EXISTENTE!", "ERRO AO SALVAR", JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    } else {
                        if (jftfDescricaoProduto.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "INSIRA UM CONTEÚDO NO CAMPO DESCRIÇÃO!", "ERRO AO SALVAR", JOptionPane.ERROR_MESSAGE);
                            loading.setVisible(false);
                            return 1;
                        }
                        if (jftfDescricaoProduto.getText().length() >= 150) {
                            JOptionPane.showMessageDialog(null, "O CAMPO DESCRIÇÃO DO PRODUTO EXCEDE 150 CARACTERES", "LIMITE DE CARACTERES", JOptionPane.ERROR_MESSAGE);
                            loading.setVisible(false);
                            return 1;
                        }
                    }

                    if (Float.valueOf(jftfLarguraProduto.getText().replace(",", ".")) == (float) 0) {
                        JOptionPane.showMessageDialog(null, "INSIRA UM CONTEÚDO NO CAMPO LARGURA", "ERRO AO SALVAR", JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }

                    if (Float.valueOf(jftfAlturaProduto.getText().replace(",", ".")) == (float) 0) {
                        JOptionPane.showMessageDialog(null, "INSIRA UM CONTEÚDO NO CAMPO ALTURA.");
                        loading.setVisible(false);
                        return 1;
                    }

                    if ((jftfEspessuraProduto.getText().isEmpty() || Float.valueOf(jftfEspessuraProduto.getText().replace(",", ".")) == (float) 0) && jckbUtilizadoEcommerce.isSelected()) {
                        JOptionPane.showMessageDialog(null, "INSIRA UM CONTEÚDO NO CAMPO ESPESSURA.");
                        loading.setVisible(false);
                        return 1;
                    }

                    if ((jftfPesoProduto.getText().isEmpty() || Float.valueOf(jftfPesoProduto.getText().replace(",", ".")) == (float) 0) && jckbUtilizadoEcommerce.isSelected()) {
                        JOptionPane.showMessageDialog(null, "INSIRA UM CONTEÚDO NO CAMPO PESO.");
                        loading.setVisible(false);
                        return 1;
                    }

                    if (tblPapel.getRowCount() == 0) {
                        JOptionPane.showMessageDialog(null, "PRODUTO SEM PAPEL!", "ERRO AO SALVAR", JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }

                    if (jsfQtdFolhasProduto.getValue() == 0) {
                        JOptionPane.showMessageDialog(null, "A QUANTIDADE DE FOLHAS NÃO PODE SER 0!", "ERRO AO SALVAR", JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }

                    if (Double.valueOf(jftfVlrUnitProduto.getText().replace(",", ".")) == 0d && jckbUtilizadoEcommerce.isSelected()) {
                        JOptionPane.showMessageDialog(null, "O VALOR UNITÁRIO DO PRODUTO NÃO PODE SER ZERO!", "ERRO AO SALVAR", JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }

                    int dialogButton = JOptionPane.YES_NO_OPTION;
                    int dialogResult = JOptionPane.showConfirmDialog(this, "CONFIRMA A QUANTIDADE DE PÁGINAS DE '" + jsfQtdFolhasProduto.getValue() + "' ?\n (ISSO AFETARÁ NO CALCÚLO DE FOLHAS A SEREM UTILIZADAS)", "CONFIRMAÇÃO DE PÁGINAS", dialogButton);
                    if (dialogResult != 0) {
                        loading.setVisible(false);
                        return 1;
                    }

                    if (jcbTipoProduto.getSelectedItem().toString().equals("SELECIONE...")) {
                        JOptionPane.showMessageDialog(null, "SELECIONE O TIPO DO PRODUTO.");
                        loading.setVisible(false);
                        return 1;
                    }

                    dialogButton = JOptionPane.YES_NO_OPTION;
                    dialogResult = JOptionPane.showConfirmDialog(this, "CONFIRMA O TIPO DE PRODUTO COMO '" + jcbTipoProduto.getSelectedItem().toString() + "' ?\n (ISSO AFETARÁ NO CALCÚLO DE FOLHAS A SEREM UTILIZADAS)", "CONFIRMAÇÃO DE TIPO DE PRODUTO", dialogButton);
                    if (dialogResult != 0) {
                        loading.setVisible(false);
                        return 1;
                    }
                    break;
                case 2:
                    if (jftfDescricaoProduto.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "INSIRA A DESCRIÇÃO DO PRODUTO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (Double.valueOf(jftfLarguraProduto.getText().replace(",", ".")) == 0d) {
                        JOptionPane.showMessageDialog(null, "INSIRA A LARGURA DO PRODUTO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (Double.valueOf(jftfAlturaProduto.getText().replace(",", ".")) == 0d) {
                        JOptionPane.showMessageDialog(null, "INSIRA A ALTURA DO PRODUTO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (Double.valueOf(jftfEspessuraProduto.getText().replace(",", ".")) == 0d) {
                        JOptionPane.showMessageDialog(null, "INSIRA A ESPESSURA DO PRODUTO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (Double.valueOf(jftfPesoProduto.getText().replace(",", ".")) == 0d) {
                        JOptionPane.showMessageDialog(null, "INSIRA O PESO DO PRODUTO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (jsfQtdFolhasProduto.getValue() == 0) {
                        JOptionPane.showMessageDialog(null, "A QUANTIDADE DE FOLHAS NÃO PODE SER IGUAL À ZERO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (jcbTipoProduto.getSelectedIndex() == 0) {
                        JOptionPane.showMessageDialog(null, "SELECIONE O TIPO DO PRODUTO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (!jckbProdPreVenda.isSelected()) {
                        if (Double.valueOf(jftfVlrUnitProduto.getText().replace(",", ".")) == 0d) {
                            JOptionPane.showMessageDialog(null, "DIGITE O VALOR UNITÁRIO DO PRODUTO", "ERRO",
                                    JOptionPane.ERROR_MESSAGE);
                            loading.setVisible(false);
                            return 1;
                        }
                    }
                    if (jckbPromProduto.isSelected()) {
                        if (Double.valueOf(jftfVlrPromProduto.getText().replace(",", ".")) == 0d) {
                            JOptionPane.showMessageDialog(null, "DIGITE O VALOR PROMOCIONAL DO PRODUTO", "ERRO",
                                    JOptionPane.ERROR_MESSAGE);
                            loading.setVisible(false);
                            return 1;
                        }
                        if (jdcInicioPromProduto.getDate() == null) {
                            JOptionPane.showMessageDialog(null, "DIGITE A DATA DE INÍCIO DA PROMOÇÃO", "ERRO",
                                    JOptionPane.ERROR_MESSAGE);
                            loading.setVisible(false);
                            return 1;
                        }
                        if (jdcFimPromProduto.getDate() == null) {
                            JOptionPane.showMessageDialog(null, "DIGITE A DATA FIM DA PROMOÇÃO", "ERRO",
                                    JOptionPane.ERROR_MESSAGE);
                            loading.setVisible(false);
                            return 1;
                        }
                    }
                    if (Integer.valueOf(jftfEstoqueFisicoProduto.getText().replace(".", "")) == 0) {
                        JOptionPane.showMessageDialog(null, "O ESTOQUE FÍSICO DO PRODUTO NÃO PODE SER IGUAL À ZERO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (Integer.valueOf(jftfQtdMinProduto.getText()) == 0) {
                        JOptionPane.showMessageDialog(null, "A QUANTIDADE MÍNIMA PARA PEDIDO DO PRODUTO NÃO PODE SER IGUAL À ZERO", "ERRO",
                                JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }
                    if (jckbQtdMaxProduto.isSelected()) {
                        if (Integer.valueOf(jftfQtdMaxProduto.getText().replace(",", ".")) == 0) {
                            JOptionPane.showMessageDialog(null, "A QUANTIDADE MÁXIMA PARA PEDIDO DO PRODUTO NÃO PODE SER IGUAL À ZERO", "ERRO",
                                    JOptionPane.ERROR_MESSAGE);
                            loading.setVisible(false);
                            return 1;
                        }
                    }

                    if (Double.valueOf(jftfVlrUnitProduto.getText().replace(",", ".")) == 0d && jckbUtilizadoEcommerce.isSelected()) {
                        JOptionPane.showMessageDialog(null, "O VALOR UNITÁRIO DO PRODUTO NÃO PODE SER ZERO!", "ERRO AO SALVAR", JOptionPane.ERROR_MESSAGE);
                        loading.setVisible(false);
                        return 1;
                    }

                    if (FUNCAO != 1 & FUNCAO != 3) {
                        if (ProdutoDAO.verificaDescPe(jftfDescricaoProduto.getText())) {
                            JOptionPane.showMessageDialog(null, "A DESCRIÇÃO DO PRODUTO JÁ EXISTE", "ERRO",
                                    JOptionPane.ERROR_MESSAGE);
                            loading.setVisible(false);
                            return 1;
                        }
                    }
                    break;
            }

            return 0;
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
            loading.setVisible(false);
            return 1;
        }

    }

    /**
     * Adiciona os registros na tabela de consulta
     *
     * @param modelo
     * @param produto
     * @param tipoProduto 1 - Produção, 2 - Pronta Entrega
     */
    private void adicionaTblConsulta(DefaultTableModel modelo,
            Object produto,
            byte tipoProduto) {
        switch (tipoProduto) {
            case 1:
                ProdutoBEAN cast = (ProdutoBEAN) produto;
                modelo.addRow(new Object[]{
                    cast.getCodigo(),
                    "PP",
                    cast.getDescricao(),
                    null,
                    null,
                    null,
                    null
                });
                break;
            case 2:
                ProdutoPrEntBEAN cast2 = (ProdutoPrEntBEAN) produto;
                modelo.addRow(new Object[]{
                    cast2.getCodigo(),
                    "PE",
                    cast2.getDescricao(),
                    cast2.getVlrUnit(),
                    cast2.getEstoque(),
                    (cast2.getPreVenda() == 1),
                    (cast2.getPromocao() == 1)
                });
                break;
        }
    }
}
