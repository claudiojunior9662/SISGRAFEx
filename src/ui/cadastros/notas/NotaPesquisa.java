/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.cadastros.notas;

import entidades.Cliente;
import ui.cadastros.clientes.ClienteBEAN;
import ui.cadastros.contatos.ContatoBEAN;
import ui.cadastros.enderecos.EnderecoBEAN;
import java.text.ParseException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import ui.cadastros.produtos.ProdutoBEAN;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import entidades.ProdOrcamento;
import exception.EnvioExcecao;
import model.dao.OrcamentoDAO;
import ui.administrador.FuncionarioDAO;
import ui.cadastros.clientes.ClienteDAO;
import ui.cadastros.produtos.ProdutoDAO;
import ui.cadastros.servicos.ServicoDAO;
import ui.controle.Controle;

/**
 *
 * @author claud
 */
public class NotaPesquisa extends javax.swing.JInternalFrame {
//VARIAVEIS DA CLASSE-------------------------------------------------------

    MaskFormatter mascaraPesquisa = null;
    public static int CODIGO_NOTA = 0;
    public static int CODIGO_OP = 0;
    public static int CODIGO_TRANSPORTE = 0;
    public static int CODIGO_ORCAMENTO_BASE = 0;

    private JLabel loading;
    /*
    1 - VENDA
    2 - CREDITO
     */
    private byte TIPO_NOTA;

    private static NotaPesquisa notaPesquisaNovo;

    public static NotaPesquisa getInstancia(JLabel loading, byte TIPO_NOTA) {
        return new NotaPesquisa(loading, TIPO_NOTA);
    }

    /**
     * Creates new form NotaPesquisaNovo
     */
    public NotaPesquisa(JLabel loading, byte TIPO_NOTA) {
        initComponents();
        this.loading = loading;
        this.TIPO_NOTA = TIPO_NOTA;
        botaoSelecionar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        p1 = new javax.swing.JComboBox<>();
        p2 = new javax.swing.JComboBox<>();
        botaoPesquisar = new javax.swing.JButton();
        botaoMostrarUltimos = new javax.swing.JButton();
        p3Data = new com.toedter.calendar.JDateChooser();
        p3Texto = new javax.swing.JTextField();
        p3Formatado = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaConsulta = new javax.swing.JTable();
        botaoSelecionar = new javax.swing.JButton();

        setTitle("CONSULTA DE NOTAS DE CRÉDITO");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1033, 540));

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        p1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "CÓDIGO", "SÉRIE", "OP", "DATA LANÇAMENTO", "CLIENTE", "EMISSOR" }));
        p1.setBorder(javax.swing.BorderFactory.createTitledBorder("PESQUISA POR"));
        p1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                p1ItemStateChanged(evt);
            }
        });
        p1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p1ActionPerformed(evt);
            }
        });

        p2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                p2ItemStateChanged(evt);
            }
        });
        p2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2ActionPerformed(evt);
            }
        });

        botaoPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        botaoPesquisar.setText("PESQUISAR");
        botaoPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarActionPerformed(evt);
            }
        });

        botaoMostrarUltimos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ultimos.png"))); // NOI18N
        botaoMostrarUltimos.setText("MOSTRAR 45 ÚLTIMAS");
        botaoMostrarUltimos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMostrarUltimosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p3Formatado, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(p3Data, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(p3Texto, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoPesquisar)
                    .addComponent(botaoMostrarUltimos))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {p3Data, p3Formatado, p3Texto});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {botaoMostrarUltimos, botaoPesquisar});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botaoPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoMostrarUltimos))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(p3Texto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(p3Formatado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(p3Data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {p1, p2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {p3Data, p3Formatado, p3Texto});

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tabelaConsulta.setAutoCreateRowSorter(true);
        tabelaConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "DATA LANÇAMENTO", "CÓDIGO CLIENTE", "NOME CLIENTE", "EMISSOR", "VALOR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaConsultaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaConsulta);
        if (tabelaConsulta.getColumnModel().getColumnCount() > 0) {
            tabelaConsulta.getColumnModel().getColumn(0).setPreferredWidth(20);
            tabelaConsulta.getColumnModel().getColumn(1).setPreferredWidth(30);
            tabelaConsulta.getColumnModel().getColumn(2).setPreferredWidth(20);
            tabelaConsulta.getColumnModel().getColumn(3).setPreferredWidth(350);
            tabelaConsulta.getColumnModel().getColumn(4).setPreferredWidth(20);
            tabelaConsulta.getColumnModel().getColumn(5).setPreferredWidth(50);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
        );

        botaoSelecionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        botaoSelecionar.setText("SELECIONAR");
        botaoSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoSelecionar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addComponent(botaoSelecionar)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void p1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_p1ItemStateChanged
        new Thread() {
            @Override
            public void run() {
                pesquisarPorSC();
            }
        }.start();
    }//GEN-LAST:event_p1ItemStateChanged

    private void p1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p1ActionPerformed

    }//GEN-LAST:event_p1ActionPerformed

    private void p2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_p2ItemStateChanged
        if (p2.getItemCount() != 0) {
            String s = p2.getSelectedItem().toString();
            if (s == "PESSOA FÍSICA - CÓDIGO" || s == "PESSOA FÍSICA - NOME" || s == "PESSOA JURÍDICA - CÓDIGO" || s == "PESSOA JURÍDICA - NOME" || s == "PESSOA JURÍDICA - NOME FANTASIA") {
                p3Texto.setEnabled(true);
                p3Formatado.setEnabled(false);
                p3Data.setEnabled(false);
            } else if (s == "PESSOA FÍSICA - CPF (SOMENTE NÚMEROS)" || s == "PESSOA JURÍDICA - CNPJ (SOMENTE NÚMEROS)") {
                p3Formatado.setEnabled(true);
                p3Data.setEnabled(false);
                p3Texto.setEnabled(false);
                if (s == "PESSOA FÍSICA - CPF (SOMENTE NÚMEROS)") {
                    try {
                        mascaraPesquisa = new MaskFormatter("###.###.###-##");
                        p3Formatado.setFormatterFactory(new DefaultFormatterFactory(mascaraPesquisa));
                        p3Formatado.setValue("");
                        p3Formatado.setEnabled(true);
                    } catch (ParseException ex) {
                        EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                        EnvioExcecao.envio();
                        return;
                    }
                } else if (s == "PESSOA JURÍDICA - CNPJ (SOMENTE NÚMEROS)") {
                    try {
                        mascaraPesquisa = new MaskFormatter("##.###.###/####-##");
                        p3Formatado.setFormatterFactory(new DefaultFormatterFactory(mascaraPesquisa));
                        p3Formatado.setValue("");
                        p3Formatado.setEnabled(true);
                    } catch (ParseException ex) {
                        EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                        EnvioExcecao.envio();
                        return;
                    }
                }
            }
        }
    }//GEN-LAST:event_p2ItemStateChanged

    private void p2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_p2ActionPerformed

    private void botaoPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarActionPerformed
        new Thread() {
            @Override
            public void run() {
                pesquisar();
            }
        }.start();

    }//GEN-LAST:event_botaoPesquisarActionPerformed

    private void botaoMostrarUltimosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoMostrarUltimosActionPerformed
        new Thread() {
            @Override
            public void run() {
                mostrarUltimos();
            }
        }.start();
    }//GEN-LAST:event_botaoMostrarUltimosActionPerformed

    private void tabelaConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaConsultaMouseClicked
        botaoSelecionar.setEnabled(true);
    }//GEN-LAST:event_tabelaConsultaMouseClicked

    private void botaoSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarActionPerformed
        selNota();
        this.dispose();
    }//GEN-LAST:event_botaoSelecionarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoMostrarUltimos;
    private javax.swing.JButton botaoPesquisar;
    private javax.swing.JButton botaoSelecionar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> p1;
    private javax.swing.JComboBox<String> p2;
    private com.toedter.calendar.JDateChooser p3Data;
    private javax.swing.JFormattedTextField p3Formatado;
    private javax.swing.JTextField p3Texto;
    private javax.swing.JTable tabelaConsulta;
    // End of variables declaration//GEN-END:variables
    private synchronized String retornaTelefoneFormatado(String telefone) {
        String formatar = telefone;
        formatar = formatar.replace("(", "");
        formatar = formatar.replace(")", "");
        formatar = formatar.replace(" ", "");
        formatar = formatar.replace("-", "");
        MaskFormatter formatoTelefone = null;
        if (formatar.length() == 10) {
            try {
                formatoTelefone = new MaskFormatter("(##) ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
            } catch (ParseException ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                return "";
            }
        }
        if (formatar.length() == 11) {
            try {
                formatoTelefone = new MaskFormatter("(##) # ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
            } catch (ParseException ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                return "";
            }
        }
        return formatar;
    }

    private synchronized void selNota() {
        loading.setVisible(true);
        loading.setText("CARREGANDO...");

        CODIGO_NOTA = Integer.valueOf(tabelaConsulta.getValueAt(tabelaConsulta.getSelectedRow(), 0).toString());
        CODIGO_TRANSPORTE = 0;

        try {
            for (NotaBEAN nota : NotaDAO.selecionaNotaCredito(CODIGO_NOTA)) {
                NCFrame.numeroNota.setValue(nota.getCod());
                try {
                    NCFrame.data.setDate(Controle.dataPadrao.parse(nota.getData()));
                } catch (ParseException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                    loading.setVisible(false);
                    return;
                }
                if (nota.getTipo() == 1) {
                    NCFrame.descricaoNota.setSelectedIndex(0);
                } else {
                    NCFrame.descricaoNota.setSelectedIndex(1);
                }
                NCFrame.emissor.setText(FuncionarioDAO.retornaNomeAtendente(nota.getCodEmissor()));
                if (nota.getTipoPessoa() == 1) {
                    NCFrame.tipoCliente.setText("PESSOA FÍSICA");
                } else if (nota.getTipoPessoa() == 2) {
                    NCFrame.tipoCliente.setText("PESSOA JURÍDICA");
                }
                NCFrame.codigoCliente.setValue(nota.getCodCliente());
                for (ClienteBEAN aux2 : NotaDAO.carregaClientes(nota.getCodCliente(), nota.getTipoPessoa())) {
                    NCFrame.nomeCliente.setText(aux2.getNome());
                    if (nota.getTipoPessoa() == 1) {
                        NCFrame.cnpjCpf.setText(aux2.getCpf());
                    } else if (nota.getTipoPessoa() == 2) {
                        NCFrame.cnpjCpf.setText(aux2.getCnpj());
                    }
                }
                NCFrame.codigosEnderecos.addItem(String.valueOf(nota.getCodEndereco()));
                NCFrame.codigosEnderecos.setSelectedItem(String.valueOf(nota.getCodEndereco()));
                EnderecoBEAN endereco = ClienteDAO.selInfoEndereco(nota.getCodEndereco());
                NCFrame.tipoEndereco.setText(endereco.getTipoEndereco());
                NCFrame.bairroCliente.setText(endereco.getBairro());
                NCFrame.cidadeCliente.setText(endereco.getCidade());
                NCFrame.ufCliente.setText(endereco.getUf());
                NCFrame.complementoCliente.setText(endereco.getComplemento());
                NCFrame.cepCliente.setText(EnderecoBEAN.retornaCepFormatado(endereco.getCep()));
                NCFrame.logadouroCliente.setText(endereco.getLogadouro());

                NCFrame.codigosContatos.addItem(String.valueOf(nota.getCodContato()));
                NCFrame.codigosContatos.setSelectedItem(String.valueOf(nota.getCodContato()));
                ContatoBEAN contato = ClienteDAO.selInfoContato(nota.getCodContato());
                NCFrame.nomeContatoCliente.setText(contato.getNomeContato());
                NCFrame.telefoneCliente.setText(contato.getTelefone());
                NCFrame.telefoneCliente2.setText(contato.getTelefone2());
                NCFrame.emailCliente.setText(contato.getEmail());

                switch (nota.getFormaPagamento()) {
                    case 1:
                        if (NotaDAO.verificaLanc(CODIGO_NOTA)) {
                            LancSigaSiafi lanc = NotaDAO.retornaLanc(CODIGO_NOTA);
                            NCFrame.jftfCpfUsr.setText(lanc.getCpfUsr());
                            NCFrame.jtfNomeUsr.setText(lanc.getNomeUsr());
                            NCFrame.jftfUg.setValue(lanc.getUg());
                            NCFrame.jdcDataLancamento.setDate(lanc.getDataHora());
                            NCFrame.jftfHoraLancamento.setText(lanc.getDataHora().getHours()
                                    + ":"
                                    + lanc.getDataHora().getMinutes());
                        } else {
                            NCFrame.jftfCpfUsr.setText(null);
                            NCFrame.jtfNomeUsr.setText(null);
                            NCFrame.jftfUg.setText(null);
                            NCFrame.jdcDataLancamento.setDate(null);
                            NCFrame.jftfHoraLancamento.setText(null);
                        }
                        break;
                    case 4:
                        if (NotaDAO.verificaLancGru(CODIGO_NOTA)) {
                            LancGru lancGru = NotaDAO.retornaLancGru(CODIGO_NOTA);
                            NCFrame.jftfCpfUsrGru.setText(lancGru.getCpfUsr());
                            NCFrame.jtfNomeUsrGru.setText(lancGru.getNomeUsr());
                            NCFrame.jftfCodRecGru.setValue(lancGru.getCodRec());
                            NCFrame.jdcDataLancamentoGru.setDate(lancGru.getDataHora());
                            NCFrame.jftfHoraLancamentoGru.setText(lancGru.getDataHora().getHours()
                                    + ":"
                                    + lancGru.getDataHora().getMinutes());
                        } else {
                            NCFrame.jftfCpfUsrGru.setText(null);
                            NCFrame.jtfNomeUsrGru.setText(null);
                            NCFrame.jftfCodRecGru.setText(null);
                            NCFrame.jdcDataLancamentoGru.setDate(null);
                            NCFrame.jftfHoraLancamentoGru.setText(null);
                        }

                        break;
                }
                NCFrame.jcbFormaPgto.setSelectedIndex(nota.getFormaPagamento());
                NCFrame.valorNota.setValue(nota.getValor());
                NCFrame.areaObservacoes.setText(nota.getObservacoes());
            }
            NCFrame.estadoPosPesquisar();

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }

        loading.setVisible(false);
    }

    private synchronized void mostrarUltimos() {
        loading.setVisible(true);
        loading.setText("CARREGANDO...");

        try {
            DefaultTableModel modeloConsulta = (DefaultTableModel) tabelaConsulta.getModel();

            modeloConsulta.setNumRows(0);

            for (NotaBEAN nota : NotaDAO.mostraUltimas()) {
                String op = null;
                modeloConsulta.addRow(new Object[]{
                    nota.getCod(),
                    nota.getData(),
                    nota.getCodCliente(),
                    nota.getNomeCliente(),
                    nota.getCodEmissor(),
                    nota.getValor()
                });

            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }

        loading.setVisible(false);
    }

    private synchronized void pesquisar() {
        try {

            loading.setVisible(true);
            loading.setText("CARREGANDO...");

            DefaultTableModel modeloConsulta = (DefaultTableModel) tabelaConsulta.getModel();

            modeloConsulta.setNumRows(0);

            if (p1.getSelectedItem().equals("SELECIONE...")) {
                JOptionPane.showMessageDialog(null, "SELECIONE UM TIPO DE PESQUISA!");
                return;
            } else {
                if (p1.getSelectedItem().toString().equals("SÉRIE")) {
                    for (NotaBEAN nota : NotaDAO.pesquisaNota(p1.getSelectedItem().toString(), null, p3Texto.getText())) {
                        modeloConsulta.addRow(new Object[]{
                            nota.getCod(),
                            nota.getData(),
                            nota.getCodCliente(),
                            nota.getNomeCliente(),
                            nota.getCodEmissor(),
                            nota.getValor()
                        });
                    }
                } else if (p1.getSelectedItem().toString().equals("OP")) {
                    for (NotaBEAN nota : NotaDAO.pesquisaNota(p1.getSelectedItem().toString(), null, p3Texto.getText())) {
                        modeloConsulta.addRow(new Object[]{
                            nota.getCod(),
                            nota.getData(),
                            nota.getCodCliente(),
                            nota.getNomeCliente(),
                            nota.getCodEmissor(),
                            nota.getValor()
                        });
                    }
                } else if (p1.getSelectedItem().toString().equals("DATA LANÇAMENTO")) {
                    for (NotaBEAN nota : NotaDAO.pesquisaNota(p1.getSelectedItem().toString(), null, Controle.dataPadrao.format(p3Data.getDate()).toString())) {
                        modeloConsulta.addRow(new Object[]{
                            nota.getCod(),
                            nota.getData(),
                            nota.getCodCliente(),
                            nota.getNomeCliente(),
                            nota.getCodEmissor(),
                            nota.getValor()
                        });
                    }
                } else if (p1.getSelectedItem().toString().equals("CLIENTE")) {
                    if (p2.getSelectedItem().toString().contains("CPF") == false || p2.getSelectedItem().toString().contains("CNPJ") == false) {
                        for (NotaBEAN nota : NotaDAO.pesquisaNota(p1.getSelectedItem().toString(), p2.getSelectedItem().toString(), p3Texto.getText())) {
                            modeloConsulta.addRow(new Object[]{
                                nota.getCod(),
                                nota.getData(),
                                nota.getCodCliente(),
                                nota.getNomeCliente(),
                                nota.getCodEmissor(),
                                nota.getValor()
                            });
                        }
                    } else {
                        for (NotaBEAN nota : NotaDAO.pesquisaNota(p1.getSelectedItem().toString(), p2.getSelectedItem().toString(), p3Formatado.getText())) {
                            modeloConsulta.addRow(new Object[]{
                                nota.getCod(),
                                nota.getData(),
                                nota.getCodCliente(),
                                nota.getNomeCliente(),
                                nota.getCodEmissor(),
                                nota.getValor()
                            });
                        }
                    }
                } else if (p1.getSelectedItem().toString().equals("EMISSOR")) {
                    for (NotaBEAN nota : NotaDAO.pesquisaNota(p1.getSelectedItem().toString(), null, p2.getSelectedItem().toString())) {
                        modeloConsulta.addRow(new Object[]{
                            nota.getCod(),
                            nota.getData(),
                            nota.getCodCliente(),
                            nota.getNomeCliente(),
                            nota.getCodEmissor(),
                            nota.getValor()
                        });
                    }
                } else if (p1.getSelectedItem().toString().equals("CÓDIGO")) {
                    for (NotaBEAN nota : NotaDAO.pesquisaNota(p1.getSelectedItem().toString(), null, p3Texto.getText())) {
                        modeloConsulta.addRow(new Object[]{
                            nota.getCod(),
                            nota.getData(),
                            nota.getCodCliente(),
                            nota.getNomeCliente(),
                            nota.getCodEmissor(),
                            nota.getValor()
                        });
                    }
                }

            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }

        loading.setVisible(false);
    }

    private synchronized void pesquisarPorSC() {
        p2.removeAllItems();
        if (p1.getSelectedItem().toString() != "SELECIONE...") {
            if (p1.getSelectedItem().toString().equals("SÉRIE")) {
                p2.setEnabled(false);
                p3Data.setEnabled(false);
                p3Texto.setEnabled(true);
                p3Formatado.setEnabled(false);
            } else if (p1.getSelectedItem().toString().equals("OP")) {
                p2.setEnabled(false);
                p3Data.setEnabled(false);
                p3Texto.setEnabled(true);
                p3Formatado.setEnabled(false);
            } else if (p1.getSelectedItem().toString().equals("DATA LANÇAMENTO")) {
                p2.setEnabled(false);
                p3Data.setEnabled(true);
                p3Texto.setEnabled(false);
                p3Formatado.setEnabled(false);
            } else if (p1.getSelectedItem().toString().equals("CLIENTE")) {
                p2.setEnabled(true);
                p3Data.setEnabled(false);
                p3Texto.setEnabled(false);
                p3Formatado.setEnabled(false);
                p2.addItem("PESSOA FÍSICA - CÓDIGO");
                p2.addItem("PESSOA FÍSICA - NOME");
                p2.addItem("PESSOA FÍSICA - CPF (SOMENTE NÚMEROS)");
                p2.addItem("PESSOA JURÍDICA - CÓDIGO");
                p2.addItem("PESSOA JURÍDICA - NOME");
                p2.addItem("PESSOA JURÍDICA - NOME FANTASIA");
                p2.addItem("PESSOA JURÍDICA - CNPJ (SOMENTE NÚMEROS)");
            } else if (p1.getSelectedItem().toString().equals("EMISSOR")) {
                try {
                    p2.setEnabled(true);
                    p3Data.setEnabled(false);
                    p3Texto.setEnabled(false);
                    p3Formatado.setEnabled(false);
                    List retorno = NotaDAO.retornaEmissores();
                    for (int i = 0; i < retorno.size(); i++) {
                        p2.addItem(String.valueOf(retorno.get(i)));
                    }
                } catch (SQLException ex) {
                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                    EnvioExcecao.envio();
                    return;
                }
            } else if (p1.getSelectedItem().toString().equals("CÓDIGO")) {
                p2.setEnabled(false);
                p3Data.setEnabled(false);
                p3Texto.setEnabled(true);
                p3Formatado.setEnabled(false);
            }
        }
    }
}
