/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.cadastros.notas;

import entidades.Cliente;
import entidades.Faturamento;
import entidades.OrdemProducao;
import ui.cadastros.clientes.ClienteBEAN;
import ui.cadastros.contatos.ContatoBEAN;
import ui.cadastros.enderecos.EnderecoBEAN;
import java.text.ParseException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import ui.cadastros.produtos.ProdutoBEAN;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import entidades.ProdOrcamento;
import exception.EnvioExcecao;
import model.dao.OrcamentoDAO;
import model.dao.OrdemProducaoDAO;
import model.tabelas.FatPesqTableModel;
import ui.cadastros.clientes.ClienteDAO;
import ui.cadastros.produtos.ProdutoDAO;
import ui.cadastros.produtos.ProdutoPrEntBEAN;
import ui.cadastros.servicos.ServicoDAO;
import ui.controle.Controle;

/**
 *
 * @author claud
 */
public class FatPesquisa extends javax.swing.JInternalFrame {
//VARIAVEIS DA CLASSE-------------------------------------------------------

    MaskFormatter mascaraPesquisa = null;
    public static int CODIGO_NOTA = 0;
    public static int CODIGO_OP = 0;
    public static int CODIGO_TRANSPORTE = 0;
    public static int CODIGO_ORCAMENTO_BASE = 0;
    FatPesqTableModel model = new FatPesqTableModel();
    private JLabel loading;
    /*
    1 - VENDA
    2 - CREDITO
     */
    private byte TIPO_NOTA;

    private static FatPesquisa fatPesquisa;

    public static FatPesquisa getInstancia(JLabel loading) {
        return new FatPesquisa(loading);
    }

    /**
     * Creates new form NotaPesquisaNovo
     */
    public FatPesquisa(JLabel loading) {
        initComponents();
        this.loading = loading;
        botaoSelecionar.setEnabled(false);

        tabelaConsulta.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        p1 = new javax.swing.JComboBox<>();
        p2 = new javax.swing.JComboBox<>();
        botaoPesquisar = new javax.swing.JButton();
        botaoMostrarUltimos = new javax.swing.JButton();
        p3Data = new com.toedter.calendar.JDateChooser();
        p3Texto = new javax.swing.JTextField();
        p3Formatado = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaConsulta = new javax.swing.JTable();
        botaoSelecionar = new javax.swing.JButton();

        setTitle("CONSULTA DE FATURAMENTOS");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        p1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECIONE...", "CÓDIGO", "ORÇAMENTO", "OP", "DATA LANÇAMENTO", "CLIENTE", "EMISSOR" }));
        p1.setBorder(javax.swing.BorderFactory.createTitledBorder("PESQUISA POR"));
        p1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                p1ItemStateChanged(evt);
            }
        });
        p1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p1ActionPerformed(evt);
            }
        });

        p2.setEditable(true);
        p2.setEnabled(false);
        p2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                p2ItemStateChanged(evt);
            }
        });
        p2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2ActionPerformed(evt);
            }
        });

        botaoPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        botaoPesquisar.setText("PESQUISAR");
        botaoPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarActionPerformed(evt);
            }
        });

        botaoMostrarUltimos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ultimos.png"))); // NOI18N
        botaoMostrarUltimos.setText("MOSTRAR 45 ÚLTIMAS");
        botaoMostrarUltimos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoMostrarUltimosActionPerformed(evt);
            }
        });

        p3Data.setEnabled(false);

        p3Texto.setEnabled(false);

        p3Formatado.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p3Data, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(p3Texto, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                    .addComponent(p3Formatado))
                .addGap(139, 139, 139)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoPesquisar)
                    .addComponent(botaoMostrarUltimos))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {botaoMostrarUltimos, botaoPesquisar});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(p3Texto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(p3Formatado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(p3Data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botaoPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoMostrarUltimos)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {p1, p2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {botaoMostrarUltimos, botaoPesquisar});

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tabelaConsulta.setAutoCreateRowSorter(true);
        tabelaConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabelaConsulta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaConsultaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaConsulta);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
        );

        botaoSelecionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/confirma.png"))); // NOI18N
        botaoSelecionar.setText("SELECIONAR");
        botaoSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoSelecionar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoSelecionar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void p1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_p1ItemStateChanged
        new Thread() {
            @Override
            public void run() {
                pesquisarPorSC();
            }
        }.start();
    }//GEN-LAST:event_p1ItemStateChanged

    private void p1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p1ActionPerformed

    }//GEN-LAST:event_p1ActionPerformed

    private void p2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_p2ItemStateChanged
        if (p2.getItemCount() != 0) {
            switch (p2.getSelectedIndex()) {
                case 0:
                case 1:
                case 3:
                case 4:
                case 5:
                    p3Texto.setEnabled(true);
                    p3Texto.requestFocus();
                    p3Formatado.setEnabled(false);
                    p3Data.setEnabled(false);
                    break;
                case 2:
                    p3Formatado.setEnabled(true);
                    p3Formatado.requestFocus();
                    p3Data.setEnabled(false);
                    p3Texto.setEnabled(false);
                    try {
                        mascaraPesquisa = new MaskFormatter("###.###.###-##");
                        p3Formatado.setFormatterFactory(new DefaultFormatterFactory(mascaraPesquisa));
                        p3Formatado.setValue("");
                    } catch (ParseException ex) {
                        EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                        EnvioExcecao.envio();
                        return;
                    }
                    break;
                case 6:
                    p3Formatado.setEnabled(true);
                    p3Formatado.requestFocus();
                    p3Data.setEnabled(false);
                    p3Texto.setEnabled(false);
                    try {
                        mascaraPesquisa = new MaskFormatter("##.###.###/####-##");
                        p3Formatado.setFormatterFactory(new DefaultFormatterFactory(mascaraPesquisa));
                        p3Formatado.setValue("");
                    } catch (ParseException ex) {
                        EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                        EnvioExcecao.envio();
                        return;
                    }
                    break;
            }
        }
    }//GEN-LAST:event_p2ItemStateChanged

    private void p2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_p2ActionPerformed

    private void botaoPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarActionPerformed
        new Thread() {
            @Override
            public void run() {
                pesquisar();
            }
        }.start();
    }//GEN-LAST:event_botaoPesquisarActionPerformed

    private void botaoMostrarUltimosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoMostrarUltimosActionPerformed
        new Thread() {
            @Override
            public void run() {
                mostrarUltimos();
            }
        }.start();
    }//GEN-LAST:event_botaoMostrarUltimosActionPerformed

    private void tabelaConsultaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaConsultaMouseClicked
        botaoSelecionar.setEnabled(true);
    }//GEN-LAST:event_tabelaConsultaMouseClicked

    private void botaoSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarActionPerformed
        selFat();
        this.dispose();
    }//GEN-LAST:event_botaoSelecionarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoMostrarUltimos;
    private javax.swing.JButton botaoPesquisar;
    private javax.swing.JButton botaoSelecionar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> p1;
    private javax.swing.JComboBox<String> p2;
    private com.toedter.calendar.JDateChooser p3Data;
    private javax.swing.JFormattedTextField p3Formatado;
    private javax.swing.JTextField p3Texto;
    private javax.swing.JTable tabelaConsulta;
    // End of variables declaration//GEN-END:variables
    private synchronized String retornaTelefoneFormatado(String telefone) {
        String formatar = telefone;
        formatar = formatar.replace("(", "");
        formatar = formatar.replace(")", "");
        formatar = formatar.replace(" ", "");
        formatar = formatar.replace("-", "");
        MaskFormatter formatoTelefone = null;
        if (formatar.length() == 10) {
            try {
                formatoTelefone = new MaskFormatter("(##) ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
            } catch (ParseException ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                return "";
            }
        }
        if (formatar.length() == 11) {
            try {
                formatoTelefone = new MaskFormatter("(##) # ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
            } catch (ParseException ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                return "";
            }
        }
        return formatar;
    }

    private synchronized void selFat() {
        /**
         * mostra a imagem carregando
         */
        loading.setVisible(true);
        loading.setText("CARREGANDO...");

        /**
         * define o fat e código transporte
         */
        Faturamento fat = model.getValueAt(tabelaConsulta.getSelectedRow());
        CODIGO_TRANSPORTE = 0;

        try {
            /**
             * preenche o fat frame
             */
            FatFrame.numeroNota.setValue(fat.getCod());
            FatFrame.codOp.setText(String.valueOf(fat.getCodOp()));
            FatFrame.codOrc.setText(String.valueOf(fat.getCodOrc()));
            FatFrame.vlrTotalNota.setValue(fat.getVlrFat());
            FatFrame.FAT_FRETE = fat.getFreteFat();
            FatFrame.FAT_SERVICOS = fat.getServicosFat();
            FatFrame.dataEntrega.setDate(fat.getDtFat());
            FatFrame.emissor.setText(fat.getEmissor());
            FatFrame.areaObservacoes.setText(fat.getObservacoes() == null ? "" : fat.getObservacoes());
            FatFrame.setFAT(fat);

            /**
             * sel informações transporte, op, cliente, contato e endereço
             */
            TransporteBEAN transporte = NotaDAO.selTransporte(fat.getCod());
            OrdemProducao op = OrdemProducaoDAO.selecionaInformacoesNota(fat.getCodOp());
            ContatoBEAN contato = ClienteDAO.selInfoContato(op.getCodContato());
            EnderecoBEAN endereco = ClienteDAO.selInfoEndereco(op.getCodEndereco());
            Cliente cliente = ClienteDAO.selInfoNota((byte) op.getTipoPessoa(), op.getCodCliente());

            if (transporte.getModalidadeFrete().contains("COR")) {
                FatFrame.modalidadeFrete.setSelectedIndex(1);
            } else {
                FatFrame.modalidadeFrete.setSelectedIndex(0);
            }
            FatFrame.nomeTransportador.setText(transporte.getNomeTransportador());
            FatFrame.espessuraProduto.setValue(transporte.getEspessuraProduto());
            FatFrame.pesoProduto.setValue(transporte.getPesoProduto());
            CODIGO_TRANSPORTE = transporte.getCod();
            DefaultTableModel modeloVolumes = (DefaultTableModel) FatFrame.tabelaVolumes.getModel();
            modeloVolumes.setNumRows(0);
            for (VolumeBEAN volume : NotaDAO.selecionaVolumes(CODIGO_TRANSPORTE)) {
                modeloVolumes.addRow(new Object[]{
                    volume.getNumeroVolume(),
                    volume.getAlturaVolume(),
                    volume.getLarguraVolume(),
                    volume.getPesoVolume()
                });
            }

            /**
             * preenche os contatos
             */
            FatFrame.nomeContatoCliente.setText(contato.getNomeContato());
            FatFrame.telefoneCliente.setText(retornaTelefoneFormatado(contato.getTelefone()));
            FatFrame.telefoneCliente2.setText(retornaTelefoneFormatado(contato.getTelefone2()));
            FatFrame.emailCliente.setText(contato.getEmail());
            FatFrame.valorServicos.setValue(ServicoDAO.retornaVlrSvOrcExistente(fat.getCodOrc()));
            FatFrame.valorFrete.setValue(OrcamentoDAO.retornaValorFrete(fat.getCodOrc()));
            FatFrame.STATUS_FATURAMENTO = OrcamentoDAO.retornaStatusFaturamento(fat.getCodOrc());

            /**
             * preenche os endereços
             */
            FatFrame.logadouroCliente.setText(endereco.getLogadouro());
            FatFrame.tipoEndereco.setText(endereco.getTipoEndereco());
            FatFrame.bairroCliente.setText(endereco.getBairro());
            FatFrame.cidadeCliente.setText(endereco.getCidade());
            FatFrame.ufCliente.setText(endereco.getUf());
            FatFrame.complementoCliente.setText(endereco.getComplemento());
            FatFrame.cepCliente.setText(EnderecoBEAN.retornaCepFormatado(endereco.getCep()));
            FatFrame.nomeCliente.setText(cliente.getNome());
            FatFrame.cnpjCpf.setText(op.getTipoPessoa() == 1 ? "PESSOA FÍSICA" : "PESSOA JURÍDICA");
            FatFrame.tipoCliente.setText(op.getTipoPessoa() == 1 ? "PESSOA FÍSICA" : "PESSOA JURÍDICA");
            FatFrame.codigoCliente.setValue(op.getCodCliente());

            /**
             * preenche informações dos produtos
             */
            ProdOrcamento prodOrc = OrcamentoDAO.selecionaInformacoesProduto(
                    fat.getCodOrc(), op.getCodProduto());
            FatFrame.descricao.setText(prodOrc.getDescricaoProduto());
            FatFrame.qtdSolicitada.setValue(prodOrc.getQuantidade());
            FatFrame.qtdEntregue.setValue(fat.getQtdEntregue());
            FatFrame.qtdSerEntregue.setModel(new SpinnerNumberModel(0,
                    0,
                    prodOrc.getQuantidade() - (int) FatFrame.qtdEntregue.getValue(),
                    1));

            FatFrame.valorUnitario.setValue(prodOrc.getPrecoUnitario());
            FatFrame.setCOD_PRODUTO(prodOrc.getCodProduto());

            if (op.getCodProduto().contains("PE")) {
                /**
                 * Pesquisa as informações do produto
                 */
                ProdutoPrEntBEAN produto = ProdutoDAO.selDimProdPrEnt(op.getCodProduto());
                FatFrame.alturaProduto.setValue(produto.getAltura());
                FatFrame.larguraProduto.setValue(produto.getLargura());
                FatFrame.espessuraProduto.setValue(produto.getEspessura());
                FatFrame.pesoProduto.setValue(produto.getPeso());
                /**
                 * Desativa os campos não editáveis
                 */
                FatFrame.espessuraProduto.setEditable(false);
                FatFrame.pesoProduto.setEditable(false);
            } else {
                /**
                 * Pesquisa as informações do produto
                 */
                ProdutoBEAN produto = ProdutoDAO.selecionaDimensoesProduto(op.getCodProduto());
                FatFrame.alturaProduto.setValue(produto.getAltura());
                FatFrame.larguraProduto.setValue(produto.getLargura());
                /**
                 * Ativa os campos editáveis
                 */
                FatFrame.espessuraProduto.setEditable(true);
                FatFrame.pesoProduto.setEditable(true);
            }

            /**
             * seta estado pós pesquisar na classe FatFrame
             */
            FatFrame.estadoPosPesquisar();

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }

        loading.setVisible(false);
    }

    private synchronized void mostrarUltimos() {
        loading.setVisible(true);
        loading.setText("CARREGANDO...");
        try {
            model.setNumRows(0);
            for (Faturamento fat : NotaDAO.pesqFat((byte) 7, null, null)) {
                model.addRow(fat);
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }

        loading.setVisible(false);
    }

    private synchronized void pesquisar() {
        try {

            loading.setVisible(true);
            loading.setText("CARREGANDO...");
            model.setNumRows(0);

            switch (p1.getSelectedIndex()) {
                case 0:
                    JOptionPane.showMessageDialog(null,
                            "SELECIONE UM TIPO DE PESQUISA!",
                            "ERRO",
                            JOptionPane.ERROR_MESSAGE);
                    break;
                case 1:
                case 2:
                case 3:
                case 6:
                    for (Faturamento fat : NotaDAO.pesqFat((byte) p1.getSelectedIndex(), p3Texto.getText(), null)) {
                        model.addRow(fat);
                    }
                    break;
                case 4:
                    for (Faturamento fat : NotaDAO.pesqFat((byte) p1.getSelectedIndex(),
                            null, p3Data.getDate())) {
                        model.addRow(fat);
                    }
                    break;
                case 5:
                    List<ClienteBEAN> clientes;
                    switch (p2.getSelectedIndex()) {
                        case 2:
                        case 6:
                            clientes = ClienteDAO.retornaCliente(p2.getSelectedItem().toString(),
                                    p3Formatado.getText());
                            break;
                        default:
                            clientes = ClienteDAO.retornaCliente(p2.getSelectedItem().toString(),
                                    p3Texto.getText());
                            break;
                    }
                    List<Integer> op = OrdemProducaoDAO.retornaCodOpCliente(clientes);
                    for (int codOp : op) {
                        for (Faturamento fat : NotaDAO.pesqFat((byte) 5, String.valueOf(codOp), null)) {
                            model.addRow(fat);
                        }
                    }
                    break;
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }

        loading.setVisible(false);
    }

    private synchronized void pesquisarPorSC() {
        p2.removeAllItems();
        switch (p1.getSelectedIndex()) {
            case 1:
            case 2:
            case 3:
            case 6:
                p2.setEnabled(false);
                p3Data.setEnabled(false);
                p3Texto.setEnabled(true);
                p3Texto.requestFocus();
                p3Formatado.setEnabled(false);
                break;
            case 4:
                p2.setEnabled(false);
                p3Data.setEnabled(true);
                p3Data.requestFocus();
                p3Texto.setEnabled(false);
                p3Formatado.setEnabled(false);
                break;
            case 5:
                p2.setEnabled(true);
                p2.requestFocus();
                p3Data.setEnabled(false);
                p3Texto.setEnabled(true);
                p3Formatado.setEnabled(false);
                p2.addItem("PESSOA FÍSICA - CÓDIGO");
                p2.addItem("PESSOA FÍSICA - NOME");
                p2.addItem("PESSOA FÍSICA - CPF (SOMENTE NÚMEROS)");
                p2.addItem("PESSOA JURÍDICA - CÓDIGO");
                p2.addItem("PESSOA JURÍDICA - NOME");
                p2.addItem("PESSOA JURÍDICA - NOME FANTASIA");
                p2.addItem("PESSOA JURÍDICA - CNPJ (SOMENTE NÚMEROS)");
                break;

        }
    }
}
