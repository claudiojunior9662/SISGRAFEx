/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.cadastros.notas;

import ui.login.TelaAutenticacao;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.PdfPCell;
import entidades.Faturamento;
import entidades.OrdemProducao;
import java.io.IOException;
import java.text.ParseException;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import exception.EnvioExcecao;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import model.dao.OrcamentoDAO;
import model.dao.OrdemProducaoDAO;
import ui.cadastros.clientes.ClienteDAO;
import ui.controle.Controle;
import ui.ordemProducao.consultas.OpConsultaFrame;
import ui.principal.GerenteJanelas;

/**
 *
 * @author claud
 */
public class FatFrame extends javax.swing.JInternalFrame {

    private static boolean EDITAR = false;
    private static boolean INCLUIR = false;
    public static float valorAntigo = 0f;
    public static int CODIGO_FAT;
    public static int CODIGO_TRANSPORTE;

    public static byte FAT_FRETE;
    public static byte FAT_SERVICOS;

    private static int COD_PRODUTO;
    private static int COD_CONTATO;
    private static int COD_ENDERECO;

    private static Faturamento FAT;

    private static List<Integer> listaCancelamento = new ArrayList();

    public static Faturamento getFAT() {
        return FAT;
    }

    public static void setFAT(Faturamento FAT) {
        FatFrame.FAT = FAT;
    }

    public static int getCOD_PRODUTO() {
        return COD_PRODUTO;
    }

    public static void setCOD_PRODUTO(int COD_PRODUTO) {
        FatFrame.COD_PRODUTO = COD_PRODUTO;
    }

    public static int getCOD_CONTATO() {
        return COD_CONTATO;
    }

    public static void setCOD_CONTATO(int COD_CONTATO) {
        FatFrame.COD_CONTATO = COD_CONTATO;
    }

    public static int getCOD_ENDERECO() {
        return COD_ENDERECO;
    }

    public static void setCOD_ENDERECO(int COD_ENDERECO) {
        FatFrame.COD_ENDERECO = COD_ENDERECO;
    }

    private final JLabel loading;
    private final GerenteJanelas gj;

    /**
     * @param STATUS_FATURAMENTO 0 - NÃO DESCONTADO CRÉDITO 1 - NÃO FATURADO 2 -
     * FRETE FATURADO 3 - SERVICOS FATURADO 4 - FATURADO TOTALMENTE
     */
    public static byte STATUS_FATURAMENTO = 0;

    private static FatFrame notaVendaNovo;

    public static FatFrame getInstancia(JLabel loading, GerenteJanelas gj) {
        return new FatFrame(loading, gj);
    }

    /**
     * Creates new form NotaVendaNovo
     */
    public FatFrame(JLabel loading, GerenteJanelas gj) {
        initComponents();
        this.loading = loading;
        this.gj = gj;
        emissor.setText(TelaAutenticacao.getUsrLogado().getNome());
        estadoInicial();

        listaCancelamento.add(2018);
        listaCancelamento.add(2019);

        avisoAnoFin.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsNV = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        origem = new javax.swing.JComboBox<>();
        codOp = new javax.swing.JTextField();
        pesquisarOrigem = new javax.swing.JButton();
        descricao = new javax.swing.JTextField();
        qtdEntregue = new javax.swing.JFormattedTextField();
        valorUnitario = new javax.swing.JFormattedTextField();
        valorTotalEntregue = new javax.swing.JFormattedTextField();
        valorServicos = new javax.swing.JFormattedTextField();
        faturarServicos = new javax.swing.JCheckBox();
        faturarFrete = new javax.swing.JCheckBox();
        valorFrete = new javax.swing.JFormattedTextField();
        qtdSerEntregue = new javax.swing.JSpinner();
        qtdSolicitada = new javax.swing.JFormattedTextField();
        vlrTotalNota = new javax.swing.JFormattedTextField();
        codOrc = new javax.swing.JTextField();
        faturarFrete1 = new javax.swing.JCheckBox();
        valorFrete1 = new javax.swing.JFormattedTextField();
        jPanel7 = new javax.swing.JPanel();
        avisoAnoFin = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        numeroNota = new javax.swing.JFormattedTextField();
        dataEntrega = new com.toedter.calendar.JDateChooser();
        serieNota = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        descricaoNota = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        emissor = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        codigoCliente = new javax.swing.JFormattedTextField();
        nomeCliente = new javax.swing.JTextField();
        cnpjCpf = new javax.swing.JTextField();
        nomeContatoCliente = new javax.swing.JTextField();
        telefoneCliente = new javax.swing.JTextField();
        tipoEndereco = new javax.swing.JTextField();
        logadouroCliente = new javax.swing.JTextField();
        bairroCliente = new javax.swing.JTextField();
        ufCliente = new javax.swing.JTextField();
        complementoCliente = new javax.swing.JTextField();
        cidadeCliente = new javax.swing.JTextField();
        cepCliente = new javax.swing.JTextField();
        tipoCliente = new javax.swing.JLabel();
        telefoneCliente2 = new javax.swing.JTextField();
        emailCliente = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        modalidadeFrete = new javax.swing.JComboBox<>();
        jPanel10 = new javax.swing.JPanel();
        nomeTransportador = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        pesoProduto = new javax.swing.JFormattedTextField();
        jLabel34 = new javax.swing.JLabel();
        alturaProduto = new javax.swing.JFormattedTextField();
        jLabel36 = new javax.swing.JLabel();
        larguraProduto = new javax.swing.JFormattedTextField();
        jLabel38 = new javax.swing.JLabel();
        espessuraProduto = new javax.swing.JFormattedTextField();
        jLabel40 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        larguraVolume = new javax.swing.JFormattedTextField();
        jLabel45 = new javax.swing.JLabel();
        pesoVolume = new javax.swing.JFormattedTextField();
        jLabel43 = new javax.swing.JLabel();
        alturaVolume = new javax.swing.JFormattedTextField();
        botaoAdicionarVolume = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaVolumes = new javax.swing.JTable();
        botaoRetirarTabela = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaObservacoes = new javax.swing.JTextArea();
        jPanel13 = new javax.swing.JPanel();
        botaoPesquisarNota = new javax.swing.JButton();
        botaoIncluirNota = new javax.swing.JButton();
        botaoEditarNota = new javax.swing.JButton();
        botaoExcluirNota = new javax.swing.JButton();
        botaoGravarNota = new javax.swing.JButton();
        botaoCancelarNota = new javax.swing.JButton();
        botaoGerarArquivo = new javax.swing.JButton();

        setTitle("FATURAMENTO");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/faturamento.png"))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1133, 650));

        tabsNV.setPreferredSize(new java.awt.Dimension(1238, 580));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("PRODUTO/SERVIÇO"));

        origem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 - ORDEM DE PRODUÇÃO" }));
        origem.setBorder(javax.swing.BorderFactory.createTitledBorder("ORIGEM"));

        codOp.setBorder(javax.swing.BorderFactory.createTitledBorder("CÓDIGO OP"));
        codOp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                codOpFocusLost(evt);
            }
        });
        codOp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codOpKeyPressed(evt);
            }
        });

        pesquisarOrigem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        pesquisarOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarOrigemActionPerformed(evt);
            }
        });

        descricao.setBorder(javax.swing.BorderFactory.createTitledBorder("DESCRIÇÃO"));

        qtdEntregue.setBorder(javax.swing.BorderFactory.createTitledBorder("QTD ENTREGUE"));

        valorUnitario.setBorder(javax.swing.BorderFactory.createTitledBorder("VALOR UNITÁRIO"));
        valorUnitario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        valorTotalEntregue.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "VALOR A SER ENTREGUE"));
        valorTotalEntregue.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        valorServicos.setBorder(javax.swing.BorderFactory.createTitledBorder("VALOR SERVIÇOS"));
        valorServicos.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        faturarServicos.setText("FATURAR SERVIÇOS DO ORÇAMENTO");
        faturarServicos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                faturarServicosItemStateChanged(evt);
            }
        });

        faturarFrete.setText("FATURAR FRETE");
        faturarFrete.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                faturarFreteItemStateChanged(evt);
            }
        });

        valorFrete.setBorder(javax.swing.BorderFactory.createTitledBorder("VALOR FRETE"));
        valorFrete.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        qtdSerEntregue.setBorder(javax.swing.BorderFactory.createTitledBorder("QTD A SER ENTREGUE"));
        qtdSerEntregue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qtdSerEntregueStateChanged(evt);
            }
        });

        qtdSolicitada.setBorder(javax.swing.BorderFactory.createTitledBorder("QTD SOLICITADA"));

        vlrTotalNota.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "VALOR FATURADO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        vlrTotalNota.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
        vlrTotalNota.setCaretColor(new java.awt.Color(255, 0, 0));

        codOrc.setEditable(false);
        codOrc.setBorder(javax.swing.BorderFactory.createTitledBorder("CÓDIGO ORÇAMENTO"));
        codOrc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                codOrcFocusLost(evt);
            }
        });
        codOrc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codOrcKeyPressed(evt);
            }
        });

        faturarFrete1.setText("FATURAR ARTE");
        faturarFrete1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                faturarFrete1ItemStateChanged(evt);
            }
        });

        valorFrete1.setBorder(javax.swing.BorderFactory.createTitledBorder("VALOR ARTE"));
        valorFrete1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(origem, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(qtdSolicitada, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(qtdEntregue, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(qtdSerEntregue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(vlrTotalNota, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(codOp, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pesquisarOrigem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codOrc, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(descricao, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(valorTotalEntregue, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(valorUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(faturarServicos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(valorServicos, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel6Layout.createSequentialGroup()
                                            .addComponent(faturarFrete1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(valorFrete1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel6Layout.createSequentialGroup()
                                            .addComponent(faturarFrete)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(valorFrete, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(26, 26, 26)))
                .addContainerGap())
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {valorTotalEntregue, valorUnitario});

        jPanel6Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {faturarFrete, faturarFrete1});

        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(codOrc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(codOp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pesquisarOrigem)
                            .addComponent(origem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qtdSolicitada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qtdEntregue)
                            .addComponent(valorTotalEntregue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(qtdSerEntregue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(faturarServicos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(valorServicos))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(faturarFrete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(valorFrete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addComponent(vlrTotalNota)
                                .addGap(5, 5, 5))
                            .addComponent(valorFrete1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(faturarFrete1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {codOp, codOrc, descricao, origem, pesquisarOrigem});

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {faturarFrete, faturarFrete1, faturarServicos, valorFrete, valorFrete1, valorServicos, valorTotalEntregue, vlrTotalNota});

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {qtdSolicitada, valorUnitario});

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 158, Short.MAX_VALUE)
        );

        avisoAnoFin.setBackground(new java.awt.Color(255, 51, 51));
        avisoAnoFin.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        avisoAnoFin.setForeground(new java.awt.Color(255, 51, 51));
        avisoAnoFin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        avisoAnoFin.setText("ANO FINANCEIRO DE EMISSÃO DESTA OP JÁ FOI FECHADO. A OP SERÁ FATURADA COM VALOR ZERO.");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(avisoAnoFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(avisoAnoFin, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(195, Short.MAX_VALUE))
        );

        tabsNV.addTab("PRODUTOS E SERVIÇOS", new javax.swing.ImageIcon(getClass().getResource("/icones/produto.png")), jPanel5); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("FATURAMENTO"));

        numeroNota.setBorder(javax.swing.BorderFactory.createTitledBorder("NÚMERO"));
        numeroNota.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        dataEntrega.setBorder(javax.swing.BorderFactory.createTitledBorder("DATA DE ENTREGA"));

        serieNota.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1" }));
        serieNota.setBorder(javax.swing.BorderFactory.createTitledBorder("SÉRIE"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serieNota, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(numeroNota, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serieNota, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numeroNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dataEntrega, numeroNota, serieNota});

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO DE DOCUMENTO"));

        descricaoNota.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2 - FATURAMENTO DE ORDEM DE PRODUÇÃO" }));
        descricaoNota.setBorder(javax.swing.BorderFactory.createTitledBorder("DESCRIÇÃO"));

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("NORMAL");
        jLabel11.setBorder(javax.swing.BorderFactory.createTitledBorder("FINALIDADE DA EMISSÃO"));

        emissor.setBorder(javax.swing.BorderFactory.createTitledBorder("EMISSOR"));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descricaoNota, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(emissor, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel11)
                        .addComponent(emissor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(descricaoNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {descricaoNota, emissor, jLabel11});

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("CLIENTE"));

        codigoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("CÓDIGO"));

        nomeCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("NOME"));

        cnpjCpf.setBorder(javax.swing.BorderFactory.createTitledBorder("CNPJ/CPF"));

        nomeContatoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("NOME DO CONTATO"));

        telefoneCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("TELEFONE 1"));

        tipoEndereco.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO DE ENDEREÇO"));

        logadouroCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("LOGADOURO"));

        bairroCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("BAIRRO"));

        ufCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("UF"));

        complementoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("COMPLEMENTO"));

        cidadeCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("CIDADE"));

        cepCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("CEP"));

        tipoCliente.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tipoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("TIPO DE PESSOA"));

        telefoneCliente2.setBorder(javax.swing.BorderFactory.createTitledBorder("TELEFONE 2"));

        emailCliente.setBorder(javax.swing.BorderFactory.createTitledBorder("EMAIL"));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logadouroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(tipoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bairroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cidadeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ufCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(complementoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cepCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addComponent(nomeContatoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(telefoneCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(telefoneCliente2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(emailCliente))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                            .addComponent(codigoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(tipoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cnpjCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codigoCliente)
                    .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cnpjCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomeContatoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telefoneCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(telefoneCliente2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tipoEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bairroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ufCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(complementoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cidadeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cepCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logadouroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {codigoCliente, logadouroCliente, nomeContatoCliente, tipoEndereco});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 1095, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(66, 66, 66))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        tabsNV.addTab("DADOS DO FATURAMENTO", new javax.swing.ImageIcon(getClass().getResource("/icones/faturamento.png")), jPanel1); // NOI18N

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("MODALIDADE DO FRETE"));

        modalidadeFrete.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EMC - ENTREGUE EM MÃOS AO CLIENTE", "COR - CORREIOS" }));
        modalidadeFrete.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                modalidadeFreteItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modalidadeFrete, 0, 377, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modalidadeFrete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("TRANSPORTADOR"));

        nomeTransportador.setBorder(javax.swing.BorderFactory.createTitledBorder("NOME DO TRANSPORTADOR"));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nomeTransportador)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nomeTransportador, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("PESOS E MEDIDAS - PRODUTO"));

        pesoProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("PESO DO PRODUTO"));
        pesoProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel34.setText("KG");

        alturaProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("ALTURA DO PRODUTO"));
        alturaProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel36.setText("CM");

        larguraProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("LARGURA DO PRODUTO"));
        larguraProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel38.setText("CM");

        espessuraProduto.setBorder(javax.swing.BorderFactory.createTitledBorder("ESPESSURA DO PRODUTO"));
        espessuraProduto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel40.setText("CM");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(alturaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel36)
                .addGap(18, 18, 18)
                .addComponent(larguraProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel38)
                .addGap(18, 18, 18)
                .addComponent(espessuraProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel40)
                .addGap(18, 18, 18)
                .addComponent(pesoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel34)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addComponent(alturaProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(jLabel40)
                    .addComponent(jLabel34)
                    .addComponent(larguraProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(espessuraProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pesoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {alturaProduto, jLabel34, jLabel36, jLabel38, jLabel40});

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("VOLUMES"));

        jLabel48.setText("KG");

        larguraVolume.setBorder(javax.swing.BorderFactory.createTitledBorder("LARGURA DO VOLUME"));
        larguraVolume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel45.setText("CM");

        pesoVolume.setBorder(javax.swing.BorderFactory.createTitledBorder("PESO DO VOLUME"));
        pesoVolume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        jLabel43.setText("CM");

        alturaVolume.setBorder(javax.swing.BorderFactory.createTitledBorder("ALTURA DO VOLUME"));
        alturaVolume.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        botaoAdicionarVolume.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        botaoAdicionarVolume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAdicionarVolumeActionPerformed(evt);
            }
        });

        tabelaVolumes.setAutoCreateRowSorter(true);
        tabelaVolumes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NÚMERO", "ALTURA (CM)", "LARGURA (CM)", "PESO (KG)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelaVolumes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaVolumesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaVolumes);

        botaoRetirarTabela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove.png"))); // NOI18N
        botaoRetirarTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRetirarTabelaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1056, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(alturaVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel43)
                        .addGap(18, 18, 18)
                        .addComponent(larguraVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel45)
                        .addGap(18, 18, 18)
                        .addComponent(pesoVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel48)
                        .addGap(18, 18, 18)
                        .addComponent(botaoAdicionarVolume)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoRetirarTabela)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pesoVolume)
                            .addComponent(botaoAdicionarVolume, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(botaoRetirarTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel48)
                            .addComponent(jLabel45)
                            .addComponent(larguraVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel43)
                            .addComponent(alturaVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {alturaVolume, jLabel43, jLabel45, jLabel48});

        jPanel12Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {botaoAdicionarVolume, pesoVolume});

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(71, 71, 71))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabsNV.addTab("TRANSPORTE", new javax.swing.ImageIcon(getClass().getResource("/icones/transporte.png")), jPanel8); // NOI18N

        areaObservacoes.setColumns(20);
        areaObservacoes.setRows(5);
        jScrollPane2.setViewportView(areaObservacoes);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1149, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsNV.addTab("OBSERVAÇÕES", new javax.swing.ImageIcon(getClass().getResource("/icones/editar.png")), jPanel14); // NOI18N

        botaoPesquisarNota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pesquisar.png"))); // NOI18N
        botaoPesquisarNota.setText("PESQUISAR");
        botaoPesquisarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPesquisarNotaActionPerformed(evt);
            }
        });

        botaoIncluirNota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/incluir.png"))); // NOI18N
        botaoIncluirNota.setText("INCLUIR");
        botaoIncluirNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIncluirNotaActionPerformed(evt);
            }
        });

        botaoEditarNota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/editar.png"))); // NOI18N
        botaoEditarNota.setText("EDITAR");
        botaoEditarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarNotaActionPerformed(evt);
            }
        });

        botaoExcluirNota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/remove.png"))); // NOI18N
        botaoExcluirNota.setText("EXCLUIR");
        botaoExcluirNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirNotaActionPerformed(evt);
            }
        });

        botaoGravarNota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/gravar.png"))); // NOI18N
        botaoGravarNota.setText("GRAVAR");
        botaoGravarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGravarNotaActionPerformed(evt);
            }
        });

        botaoCancelarNota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/cancelar.png"))); // NOI18N
        botaoCancelarNota.setText("CANCELAR");
        botaoCancelarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCancelarNotaActionPerformed(evt);
            }
        });

        botaoGerarArquivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/pdf.png"))); // NOI18N
        botaoGerarArquivo.setText("GERAR ARQUIVO");
        botaoGerarArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGerarArquivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(81, Short.MAX_VALUE)
                .addComponent(botaoPesquisarNota)
                .addGap(18, 18, 18)
                .addComponent(botaoIncluirNota)
                .addGap(18, 18, 18)
                .addComponent(botaoEditarNota, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botaoExcluirNota)
                .addGap(18, 18, 18)
                .addComponent(botaoGravarNota)
                .addGap(18, 18, 18)
                .addComponent(botaoCancelarNota)
                .addGap(18, 18, 18)
                .addComponent(botaoGerarArquivo)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        jPanel13Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {botaoCancelarNota, botaoEditarNota, botaoExcluirNota, botaoGravarNota, botaoIncluirNota, botaoPesquisarNota});

        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botaoPesquisarNota, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoIncluirNota, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEditarNota, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoExcluirNota, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoGravarNota, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botaoGerarArquivo)
                        .addComponent(botaoCancelarNota, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel13Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {botaoCancelarNota, botaoGerarArquivo});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabsNV, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabsNV, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codOpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codOpFocusLost

    }//GEN-LAST:event_codOpFocusLost

    private void codOpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codOpKeyPressed

    }//GEN-LAST:event_codOpKeyPressed

    private void pesquisarOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarOrigemActionPerformed
        Controle.getDefaultGj().abrirJanelas(OpConsultaFrame.getInstancia(loading), "CONSULTA DE ORDENS DE PRODUÇÃO");
        OpConsultaFrame.setSEL_NOTA(true);
    }//GEN-LAST:event_pesquisarOrigemActionPerformed

    private void modalidadeFreteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_modalidadeFreteItemStateChanged
        if (modalidadeFrete.getSelectedItem().toString().equals("COR - CORREIOS")) {
            nomeTransportador.setText("EMPRESA BRASILEIRA DE CORREIOS E TELÉGRAFOS");
            nomeTransportador.setEditable(false);
        } else {
            nomeTransportador.setText(null);
            nomeTransportador.setEditable(true);
        }
    }//GEN-LAST:event_modalidadeFreteItemStateChanged

    private void botaoAdicionarVolumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAdicionarVolumeActionPerformed
        DefaultTableModel modeloVolumes = (DefaultTableModel) tabelaVolumes.getModel();
        int numeroVolume = 0;
        if (tabelaVolumes.getRowCount() == 0) {
            numeroVolume = 1;
        } else {
            numeroVolume = Integer.valueOf(tabelaVolumes.getValueAt(tabelaVolumes.getRowCount() - 1, 0).toString()) + 1;
        }
        if (alturaVolume.getText().equals("") || Integer.valueOf(alturaVolume.getValue().toString()) == 0) {
            JOptionPane.showMessageDialog(null, "PREENCHA O CAMPO ALUTRA VOLUME.");
            return;
        }
        if (larguraVolume.getText().equals("") || Integer.valueOf(larguraVolume.getValue().toString()) == 0) {
            JOptionPane.showMessageDialog(null, "PREENCHA O CAMPO LARGURA VOLUME.");
            return;
        }
        if (pesoVolume.getText().equals("") || Integer.valueOf(pesoVolume.getValue().toString()) == 0) {
            JOptionPane.showMessageDialog(null, "PREENCHA O CAMPO PESO VOLUME.");
            return;
        }
        modeloVolumes.addRow(new Object[]{
            numeroVolume,
            alturaVolume.getValue(),
            larguraVolume.getValue(),
            pesoVolume.getValue()
        });
    }//GEN-LAST:event_botaoAdicionarVolumeActionPerformed

    private void tabelaVolumesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaVolumesMouseClicked
        if (tabelaVolumes.getRowCount() != 0) {
            botaoRetirarTabela.setEnabled(true);
        }
    }//GEN-LAST:event_tabelaVolumesMouseClicked

    private void botaoRetirarTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRetirarTabelaActionPerformed
        DefaultTableModel modeloVolumes = (DefaultTableModel) tabelaVolumes.getModel();
        int linha = tabelaVolumes.getSelectedRow();
        modeloVolumes.removeRow(linha);
        botaoRetirarTabela.setEnabled(false);
    }//GEN-LAST:event_botaoRetirarTabelaActionPerformed

    private void botaoPesquisarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoPesquisarNotaActionPerformed
        gj.abrirJanelas(FatPesquisa.getInstancia(loading), "PESQUISA POR FATURAMENTOS");
    }//GEN-LAST:event_botaoPesquisarNotaActionPerformed

    private void botaoIncluirNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIncluirNotaActionPerformed
        estadoIncluir();
        EDITAR = false;
        INCLUIR = true;
    }//GEN-LAST:event_botaoIncluirNotaActionPerformed

    private void botaoEditarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarNotaActionPerformed
        estadoEditar();
        valorAntigo = Float.valueOf(vlrTotalNota.getValue().toString());
    }//GEN-LAST:event_botaoEditarNotaActionPerformed

    private void botaoExcluirNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirNotaActionPerformed
        //INSTANCIA AS FUNÇÕES E VARIÁVEIS NECESSÁRIAS--------------------------
        //SOLICITA A SENHA, CORRIGE O CRÉDITO E EXCLUI A NOTA-------------------
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(this, "A OPERAÇÃO A SEGUIR AFETARÁ DIRETAMENTE NO "
                + "CRÉDITO DO CLIENTE.\nDESEJA CONTINUAR?", "ATENÇÃO!", dialogButton);
        if (dialogResult != 0) {
            return;
        } else {
            try {
                double valor = Double.valueOf(vlrTotalNota.getValue().toString());

                int tipoPessoa = 0;
                if (tipoCliente.getText().equals("PESSOA FÍSICA")) {
                    tipoPessoa = 1;
                } else {
                    tipoPessoa = 2;
                }

                if (FAT_FRETE == 1 & FAT_SERVICOS == 1) {
                    OrcamentoDAO.atualizaStatusFaturamento(OrdemProducaoDAO.retornaOrcamentoBase(
                            Integer.valueOf(codOp.getText())),
                            (byte) 1);
                } else if (FAT_FRETE == 1 & STATUS_FATURAMENTO == 3) {
                    OrcamentoDAO.atualizaStatusFaturamento(OrdemProducaoDAO.retornaOrcamentoBase(
                            Integer.valueOf(codOp.getText())),
                            (byte) 3);
                } else if (FAT_SERVICOS == 1 & STATUS_FATURAMENTO == 3) {
                    OrcamentoDAO.atualizaStatusFaturamento(OrdemProducaoDAO.retornaOrcamentoBase(
                            Integer.valueOf(codOp.getText())),
                            (byte) 2);
                } else if ((FAT_FRETE == 1 & STATUS_FATURAMENTO == 1)
                        | (FAT_SERVICOS == 1 & STATUS_FATURAMENTO == 2)) {
                    OrcamentoDAO.atualizaStatusFaturamento(OrdemProducaoDAO.retornaOrcamentoBase(
                            Integer.valueOf(codOp.getText())),
                            (byte) 1);
                }
                ClienteDAO.corrigeCredito((int) codigoCliente.getValue(),
                        (byte) tipoPessoa,
                        Float.valueOf(vlrTotalNota.getValue().toString()),
                        (byte) 1);
                CODIGO_FAT = Integer.valueOf(numeroNota.getValue().toString());
                NotaDAO.excluiVolumes(CODIGO_FAT);
                NotaDAO.excluiTransportes(CODIGO_FAT);
                NotaDAO.removeFat(CODIGO_FAT);
                OrdemProducaoDAO.alteraStatusOp(Integer.valueOf(codOp.getText()),
                        "ENCAMINHADO PARA EXPEDIÇÃO");
            } catch (SQLException ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                return;
            }
            JOptionPane.showMessageDialog(null, "A NOTA DE VENDA " + CODIGO_FAT + " FOI EXCLUÍDA COM SUCESSO."
                    + "\nO CRÉDITO DO CLIENTE FOI RESTAURADO.");
            estadoPosExcluir();
        }
    }//GEN-LAST:event_botaoExcluirNotaActionPerformed

    private void botaoGravarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGravarNotaActionPerformed
        gravarNota();
    }//GEN-LAST:event_botaoGravarNotaActionPerformed

    private void botaoCancelarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCancelarNotaActionPerformed
        estadoInicial();
    }//GEN-LAST:event_botaoCancelarNotaActionPerformed

    private void botaoGerarArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGerarArquivoActionPerformed
        try {
            if (NotaDAO.verificaQuantidadeEntregue(FAT.getCodOp()) < (int) qtdSolicitada.getValue()) {
                NotaBEAN.geraRecibo(FAT);
            } else {
                OrdemProducao.gerarPdfOp(FAT.getCodOp(), FAT.getCodOrc(), (byte) 2, FAT);
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }//GEN-LAST:event_botaoGerarArquivoActionPerformed

    private void qtdSerEntregueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qtdSerEntregueStateChanged
        verificaFaturamento();
        calculaVlrTotal();
    }//GEN-LAST:event_qtdSerEntregueStateChanged

    private void faturarServicosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_faturarServicosItemStateChanged
        calculaVlrTotal();
    }//GEN-LAST:event_faturarServicosItemStateChanged

    private void faturarFreteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_faturarFreteItemStateChanged
        calculaVlrTotal();
    }//GEN-LAST:event_faturarFreteItemStateChanged

    private void codOrcFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codOrcFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_codOrcFocusLost

    private void codOrcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codOrcKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_codOrcKeyPressed

    private void faturarFrete1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_faturarFrete1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_faturarFrete1ItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JFormattedTextField alturaProduto;
    public static javax.swing.JFormattedTextField alturaVolume;
    public static javax.swing.JTextArea areaObservacoes;
    public static javax.swing.JLabel avisoAnoFin;
    public static javax.swing.JTextField bairroCliente;
    public static javax.swing.JButton botaoAdicionarVolume;
    public static javax.swing.JButton botaoCancelarNota;
    public static javax.swing.JButton botaoEditarNota;
    public static javax.swing.JButton botaoExcluirNota;
    public static javax.swing.JButton botaoGerarArquivo;
    public static javax.swing.JButton botaoGravarNota;
    public static javax.swing.JButton botaoIncluirNota;
    public static javax.swing.JButton botaoPesquisarNota;
    public static javax.swing.JButton botaoRetirarTabela;
    public static javax.swing.JTextField cepCliente;
    public static javax.swing.JTextField cidadeCliente;
    public static javax.swing.JTextField cnpjCpf;
    public static javax.swing.JTextField codOp;
    public static javax.swing.JTextField codOrc;
    public static javax.swing.JFormattedTextField codigoCliente;
    public static javax.swing.JTextField complementoCliente;
    public static com.toedter.calendar.JDateChooser dataEntrega;
    public static javax.swing.JTextField descricao;
    public static javax.swing.JComboBox<String> descricaoNota;
    public static javax.swing.JTextField emailCliente;
    public static javax.swing.JLabel emissor;
    public static javax.swing.JFormattedTextField espessuraProduto;
    public static javax.swing.JCheckBox faturarFrete;
    public static javax.swing.JCheckBox faturarFrete1;
    public static javax.swing.JCheckBox faturarServicos;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JFormattedTextField larguraProduto;
    public static javax.swing.JFormattedTextField larguraVolume;
    public static javax.swing.JTextField logadouroCliente;
    public static javax.swing.JComboBox<String> modalidadeFrete;
    public static javax.swing.JTextField nomeCliente;
    public static javax.swing.JTextField nomeContatoCliente;
    public static javax.swing.JTextField nomeTransportador;
    public static javax.swing.JFormattedTextField numeroNota;
    public static javax.swing.JComboBox<String> origem;
    public static javax.swing.JFormattedTextField pesoProduto;
    public static javax.swing.JFormattedTextField pesoVolume;
    public static javax.swing.JButton pesquisarOrigem;
    public static javax.swing.JFormattedTextField qtdEntregue;
    public static javax.swing.JSpinner qtdSerEntregue;
    public static javax.swing.JFormattedTextField qtdSolicitada;
    public static javax.swing.JComboBox<String> serieNota;
    public static javax.swing.JTable tabelaVolumes;
    private javax.swing.JTabbedPane tabsNV;
    public static javax.swing.JTextField telefoneCliente;
    public static javax.swing.JTextField telefoneCliente2;
    public static javax.swing.JLabel tipoCliente;
    public static javax.swing.JTextField tipoEndereco;
    public static javax.swing.JTextField ufCliente;
    public static javax.swing.JFormattedTextField valorFrete;
    public static javax.swing.JFormattedTextField valorFrete1;
    public static javax.swing.JFormattedTextField valorServicos;
    public static javax.swing.JFormattedTextField valorTotalEntregue;
    public static javax.swing.JFormattedTextField valorUnitario;
    public static javax.swing.JFormattedTextField vlrTotalNota;
    // End of variables declaration//GEN-END:variables

//    public void gerarArquivoPdf() {
//        NotaDAO dao = new NotaDAO();
//
//        com.itextpdf.text.Document document = new com.itextpdf.text.Document(PageSize.A4, 30, 20, 20, 30);
//
//        CODIGO_FAT = Integer.valueOf(numeroNota.getValue().toString());
//
//        new Thread() {
//            @Override
//            public void run() {
//                try {
//
//                    loading.setVisible(true);
//                    loading.setText("GERANDO PDF...");
//
//                    PdfWriter.getInstance(document, new FileOutputStream(System.getProperty("java.io.tmpdir") + "/notaVenda" + CODIGO_FAT + ".pdf"));
//                    //------------------------------------------------------
//                    document.setMargins(20, 20, 20, 20);
//                    document.setPageSize(PageSize.A4);
//                    document.open();
//                    //------------------------------------------------------
//                    DecimalFormat df = new DecimalFormat("###,##0.00");
//                    PdfPTable tblGuiaEntrega = new PdfPTable(new float[]{3f, 8f, 3f});
//                    tblGuiaEntrega.setWidthPercentage(100);
//
//                    NotaBEAN nota = NotaDAO.selNotaVenda(CODIGO_FAT);
//                    PdfPCell cell1 = null;
//                    PdfPCell cell2 = null;
//                    PdfPCell cell3 = null;
//                    PdfPCell cell4 = null;
//                    PdfPCell cell5 = null;
//
//                    Cliente cliente = ClienteDAO.selInfoNota(
//                            (byte) nota.getTipoPessoa(), nota.getCodCliente());
//                    if (nota.getTipoPessoa() == 1) {
//                        cell1 = new PdfPCell(new Phrase("RECEBEMOS DE ESTABELECIMENTO GENERAL GUSTAVO CORDEIRO DE FARIAS "
//                                + "OS PRODUTOS/SERVIÇOS CONSTANTES DA NOTA FISCAL INDICADA AO LADO"
//                                + "\nEMISSÃO: " + nota.getData() + " - DEST/REM: " + cliente.getNome()
//                                + " - VALOR TOTAL: R$ " + df.format(nota.getValor()), FontFactory.getFont("arial.ttf", 8)));
//                    } else if (nota.getTipoPessoa() == 2) {
//                        if (cliente.getNomeFantasia() == null) {
//                            cell1 = new PdfPCell(new Phrase("RECEBEMOS DE ESTABELECIMENTO GENERAL GUSTAVO CORDEIRO DE FARIAS "
//                                    + "OS PRODUTOS/SERVIÇOS CONSTANTES DA NOTA FISCAL INDICADA AO LADO"
//                                    + "\nEMISSÃO: " + nota.getData() + " - DEST/REM: " + cliente.getNome()
//                                    + " - VALOR TOTAL: R$ " + df.format(nota.getValor()), FontFactory.getFont("arial.ttf", 8)));
//                        } else {
//                            cell1 = new PdfPCell(new Phrase("RECEBEMOS DE ESTABELECIMENTO GENERAL GUSTAVO CORDEIRO DE FARIAS "
//                                    + "OS PRODUTOS/SERVIÇOS CONSTANTES DA NOTA FISCAL INDICADA AO LADO"
//                                    + "\nEMISSÃO: " + nota.getData() + " - DEST/REM: " + cliente.getNome() + " (" + cliente.getNomeFantasia() + " )"
//                                    + " - VALOR TOTAL: R$ " + df.format(nota.getValor()), FontFactory.getFont("arial.ttf", 8)));
//                        }
//                    }
//                    cell1.setColspan(2);
//                    cell1.setHorizontalAlignment(1);
//                    cell2 = new PdfPCell(new Phrase((nota.getSerie() == 1 ? "NV\nNº " : "NC\nNº ") + CODIGO_FAT + "\nSÉRIE " + nota.getSerie(), FontFactory.getFont("arial.ttf", 12, Font.BOLD)));
//                    cell2.setHorizontalAlignment(1);
//                    cell2.setVerticalAlignment(2);
//                    cell2.setRowspan(2);
//                    tblGuiaEntrega.addCell(cell1);
//                    tblGuiaEntrega.addCell(cell2);
//
//                    cell1 = new PdfPCell(new Phrase("DATA DE RECEBIMENTO:\n\n\n", FontFactory.getFont("arial.ttf", 8)));
//                    cell2 = new PdfPCell(new Phrase("IDENTIFICAÇÃO E ASSINATURA DO RECEBEDOR:\n\n\n", FontFactory.getFont("arial.ttf", 8)));
//                    tblGuiaEntrega.addCell(cell1);
//                    tblGuiaEntrega.addCell(cell2);
//                    document.add(tblGuiaEntrega);
//                    document.add(new Paragraph("------------------------------------------------------------------------------------------------------------------------------------------\n\n"));
//
//                    //INDENTIFICAÇÃO DO REMETENTE-------------------
//                    PdfPTable identificacaoEmitente = new PdfPTable(new float[]{8f, 3f});
//                    identificacaoEmitente.setWidthPercentage(100);
//
//                    identificacaoEmitente.addCell(createImageCell());
//                    cell2 = new PdfPCell();
//                    Paragraph p1 = new Paragraph();
//                    p1 = new Paragraph(nota.getSerie() == 1 ? "NV" : "NC", FontFactory.getFont("arial.ttf", 11, Font.BOLD));
//                    p1.setAlignment(Element.ALIGN_CENTER);
//                    cell2.addElement(p1);
//                    p1 = new Paragraph(nota.getSerie() == 1 ? "NOTA DE VENDA\n " : "NOTA DE CRÉDITO\n ", FontFactory.getFont("arial.ttf", 9));
//                    p1.setAlignment(Element.ALIGN_CENTER);
//                    cell2.addElement(p1);
//                    p1 = new Paragraph("Nº " + nota.getCod() + "\n", FontFactory.getFont("arial.ttf", 9, Font.BOLD));
//                    p1.setAlignment(Element.ALIGN_CENTER);
//                    cell2.addElement(p1);
//                    p1 = new Paragraph("SÉRIE " + nota.getSerie(), FontFactory.getFont("arial.ttf", 9, Font.BOLD));
//                    p1.setAlignment(Element.ALIGN_CENTER);
//                    cell2.addElement(p1);
//                    identificacaoEmitente.addCell(cell2);
//                    cell1 = new PdfPCell(new Phrase("NATUREZA DA OPERAÇÃO:\n\nPRODUTO PARA CONSUMIDOR", FontFactory.getFont("arial.ttf", 9)));
//                    cell2 = new PdfPCell(new Phrase("CNPJ:\n\n09.574.722/0001-24", FontFactory.getFont("arial.ttf", 9)));
//                    identificacaoEmitente.addCell(cell1);
//                    identificacaoEmitente.addCell(cell2);
//                    document.add(identificacaoEmitente);
//                    //IDENTIFICAÇÃO DO DESTINATÁRIO-----------------
//                    PdfPTable identificacaoDestinatario = new PdfPTable(new float[]{5f, 5f, 5f, 5f});
//                    identificacaoDestinatario.setWidthPercentage(100);
//
//                    p1 = new Paragraph("DESTINATÁRIO/REMETENTE\n\n", FontFactory.getFont("arial.ttf", 9, Font.BOLD));
//                    document.add(p1);
//
//                    if (nota.getTipoPessoa() == 1) {
//                        cell1 = new PdfPCell(new Phrase("NOME/RAZÃO SOCIAL - CÓDIGO\n\n" + cliente.getNome() + " - " + nota.getCodCliente(), FontFactory.getFont("arial.ttf", 9)));
//                        cell2 = new PdfPCell(new Phrase("CNPJ/CPF\n\n" + cliente.getCpf(), FontFactory.getFont("arial.ttf", 9)));
//                    } else if (nota.getTipoPessoa() == 2) {
//                        if (cliente.getNomeFantasia() == null) {
//                            cell1 = new PdfPCell(new Phrase("NOME/RAZÃO SOCIAL - CÓDIGO\n\n" + cliente.getNome() + " - " + nota.getCodCliente(), FontFactory.getFont("arial.ttf", 9)));
//                        } else {
//                            cell1 = new PdfPCell(new Phrase("NOME/RAZÃO SOCIAL - CÓDIGO\n\n" + cliente.getNome() + " (" + cliente.getNomeFantasia() + ") - " + nota.getCodCliente(), FontFactory.getFont("arial.ttf", 9)));
//                        }
//                        cell2 = new PdfPCell(new Phrase("CNPJ/CPF\n\n" + cliente.getCnpj(), FontFactory.getFont("arial.ttf", 9)));
//                    }
//                    cell1.setColspan(2);
//                    cell3 = new PdfPCell(new Phrase("DATA DA EMISSÃO\n\n" + nota.getData(), FontFactory.getFont("arial.ttf", 9)));
//                    identificacaoDestinatario.addCell(cell1);
//                    identificacaoDestinatario.addCell(cell2);
//                    identificacaoDestinatario.addCell(cell3);
//
//                    EnderecoBEAN endereco
//                            = ClienteDAO.selInfoEndereco(nota.getCodEndereco());
//                    cell1 = new PdfPCell(new Phrase("LOGADOURO\n\n" + endereco.getLogadouro(), FontFactory.getFont("arial.ttf", 9)));
//                    identificacaoDestinatario.addCell(cell1);
//                    cell2 = new PdfPCell(new Phrase("BAIRRO\n\n" + endereco.getBairro(), FontFactory.getFont("arial.ttf", 9)));
//                    cell3 = new PdfPCell(new Phrase("CIDADE\n\n" + endereco.getCidade(), FontFactory.getFont("arial.ttf", 9)));
//                    cell4 = new PdfPCell(new Phrase("CEP\n\n" + EnderecoBEAN.retornaCepFormatado(endereco.getCep()), FontFactory.getFont("arial.ttf", 9)));
//                    cell1 = new PdfPCell(new Phrase("UF\n\n" + endereco.getUf(), FontFactory.getFont("arial.ttf", 9)));
//
//                    identificacaoDestinatario.addCell(cell2);
//                    identificacaoDestinatario.addCell(cell3);
//                    identificacaoDestinatario.addCell(cell4);
//                    identificacaoDestinatario.addCell(cell1);
//
//                    ContatoBEAN contato = ClienteDAO.selInfoContato(nota.getCodContato());
//                    cell2 = new PdfPCell(new Phrase("FONE/FAX\n\n" + contato.getTelefone(), FontFactory.getFont("arial.ttf", 9)));
//                    cell3 = new PdfPCell(new Phrase("CONTATO\n\n" + contato.getNomeContato(), FontFactory.getFont("arial.ttf", 9)));
//                    cell3.setColspan(2);
//
//                    identificacaoDestinatario.addCell(cell2);
//                    identificacaoDestinatario.addCell(cell3);
//
//                    document.add(identificacaoDestinatario);
//                    //VALORES---------------------------------------
//                    Paragraph p = new Paragraph("DESCRIÇÃO DE VALORES\n\n", FontFactory.getFont("arial.ttf", 9, Font.BOLD));
//                    document.add(p);
//                    PdfPTable tblValores = new PdfPTable(new float[]{5f, 5f, 5f, 5f, 5f});
//                    tblValores.setWidthPercentage(100);
//
//                    ProdOrcamento prodOrc
//                            = OrcamentoDAO.selecionaInformacoesProduto(nota.getCodOrc(), nota.getCodProduto());
//                    if (nota.getCodOp() == 0) {
//                        cell1 = new PdfPCell(new Phrase("VALOR UNITÁRIO\n\nR$ " + df.format(ProdutoDAO.retornaVlrPe(nota.getCodProduto())), FontFactory.getFont("arial.ttf", 9)));
//                    } else {
//                        cell1 = new PdfPCell(new Phrase("VALOR UNITÁRIO\n\nR$ " + df.format(
//                                prodOrc.getPrecoUnitario()), FontFactory.getFont("arial.ttf", 9)));
//                    }
//                    cell2 = new PdfPCell(new Phrase("QUANTIDADE\n\n" + nota.getQuantidadeEntregue(), FontFactory.getFont("arial.ttf", 9)));
//
//                    cell3 = new PdfPCell(new Phrase("VALOR FRETE\n\n"
//                            + "R$ " + (nota.getFatFrete() == 1
//                                    ? df.format(OrcamentoDAO.retornaValorFrete(nota.getCodOrc()))
//                                    : "0,00"),
//                            FontFactory.getFont("arial.ttf", 9)));
//                    cell4 = new PdfPCell(new Phrase("VALOR SERVIÇOS\n\nR$ " + (nota.getFatServicos() == 1
//                            ? df.format(ServicoDAO.retornaVlrSvOrcExistente(nota.getCodOrc()))
//                            : "0,00"), FontFactory.getFont("arial.ttf", 9)));
//                    cell5 = new PdfPCell(new Phrase("VALOR TOTAL DA NOTA\n\n" + "R$ " + df.format(nota.getValor()), FontFactory.getFont("arial.ttf", 9, BaseColor.WHITE)));
//                    cell5.setBackgroundColor(BaseColor.GRAY);
//                    tblValores.addCell(cell1);
//                    tblValores.addCell(cell2);
//                    tblValores.addCell(cell3);
//                    tblValores.addCell(cell4);
//                    tblValores.addCell(cell5);
//                    document.add(tblValores);
//                    //TRANSPORTE----------------------------------------
//                    p = new Paragraph("TRANSPORTADOR/VOLUMES TRANSPORTADOS\n\n", FontFactory.getFont("arial.ttf", 9, Font.BOLD));
//                    document.add(p);
//                    PdfPTable tblTransporte = new PdfPTable(new float[]{5f, 5f, 5f, 5f});
//                    tblTransporte.setWidthPercentage(100);
//
//                    TransporteBEAN transporte = NotaDAO.selTransporte(CODIGO_FAT);
//                    cell1 = new PdfPCell(new Phrase("RAZÃO SOCIAL\n\n" + transporte.getNomeTransportador(), FontFactory.getFont("arial.ttf", 9)));
//                    cell1.setColspan(2);
//                    cell2 = new PdfPCell(new Phrase("MODALIDADE\n\n" + transporte.getModalidadeFrete(), FontFactory.getFont("arial.ttf", 9)));
//                    cell3 = new PdfPCell(new Phrase("PESO PRODUTO\n\n" + transporte.getPesoProduto(), FontFactory.getFont("arial.ttf", 9)));
//                    tblTransporte.addCell(cell1);
//                    tblTransporte.addCell(cell2);
//                    tblTransporte.addCell(cell3);
//
//                    cell1 = new PdfPCell(new Phrase("RELAÇÃO DE VOLUMES", FontFactory.getFont("arial.ttf", 9)));
//                    cell1.setColspan(4);
//                    tblTransporte.addCell(cell1);
//
//                    cell1 = new PdfPCell(new Phrase("NÚMERO", FontFactory.getFont("arial.ttf", 9)));
//                    cell2 = new PdfPCell(new Phrase("ALTURA", FontFactory.getFont("arial.ttf", 9)));
//                    cell3 = new PdfPCell(new Phrase("LARGURA", FontFactory.getFont("arial.ttf", 9)));
//                    cell4 = new PdfPCell(new Phrase("PESO", FontFactory.getFont("arial.ttf", 9)));
//                    tblTransporte.addCell(cell1);
//                    tblTransporte.addCell(cell2);
//                    tblTransporte.addCell(cell3);
//                    tblTransporte.addCell(cell4);
//                    for (VolumeBEAN volume : NotaDAO.selecionaVolumes(transporte.getCod())) {
//                        cell1 = new PdfPCell(new Phrase(String.valueOf(volume.getNumeroVolume()), FontFactory.getFont("arial.ttf", 9)));
//                        cell2 = new PdfPCell(new Phrase(df.format(volume.getAlturaVolume()), FontFactory.getFont("arial.ttf", 9)));
//                        cell3 = new PdfPCell(new Phrase(df.format(volume.getLarguraVolume()), FontFactory.getFont("arial.ttf", 9)));
//                        cell4 = new PdfPCell(new Phrase(df.format(volume.getPesoVolume()), FontFactory.getFont("arial.ttf", 9)));
//                        tblTransporte.addCell(cell1);
//                        tblTransporte.addCell(cell2);
//                        tblTransporte.addCell(cell3);
//                        tblTransporte.addCell(cell4);
//                    }
//                    document.add(tblTransporte);
//                    //PRODUTOS------------------------------------------
//                    p = new Paragraph("DESCRIÇÃO DO PRODUTO/SERVIÇO\n\n", FontFactory.getFont("arial.ttf", 9, Font.BOLD));
//                    document.add(p);
//                    PdfPTable produto = new PdfPTable(new float[]{5f, 5f});
//                    produto.setWidthPercentage(100);
//
//                    cell1 = new PdfPCell(new Phrase("CÓDIGO\n\n" + nota.getCodProduto(), FontFactory.getFont("arial.ttf", 9)));
//                    cell2 = new PdfPCell(new Phrase("DESCRIÇÃO\n\n" + prodOrc.getDescricaoProduto(), FontFactory.getFont("arial.ttf", 9)));
//
//                    produto.addCell(cell1);
//                    produto.addCell(cell2);
//                    document.add(produto);
//
//                    //OBSERVAÇÕES---------------------------------------
//                    p = new Paragraph("OBSERVAÇÕES\n\n", FontFactory.getFont("arial.ttf", 9, java.awt.Font.BOLD));
//                    document.add(p);
//                    PdfPTable observacoes = new PdfPTable(new float[]{5f});
//                    observacoes.setWidthPercentage(100);
//
//                    cell1 = new PdfPCell(new Phrase(nota.getObservacoes(), FontFactory.getFont("arial.ttf", 8)));
//                    observacoes.addCell(cell1);
//                    document.add(observacoes);
//
//                    document.close();
//                } catch (Exception ex) {
//                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
//                    EnvioExcecao.envio();
//                }
//
//                try {
//                    java.awt.Desktop.getDesktop().open(new File(System.getProperty("java.io.tmpdir") + "/notaVenda" + CODIGO_FAT + ".pdf"));
//                } catch (IOException ex) {
//                    EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
//                    EnvioExcecao.envio();
//                }
//
//                loading.setVisible(false);
//                CODIGO_FAT = 0;
//            }
//        }.start();
//    }
    //ESTADOS DA UI-------------------------------------------------------------
    public void estadoInicial() {
        EDITAR = false;
        INCLUIR = false;
        //BOTOES PRINCIPAIS-----------------------------------------------------
        botaoPesquisarNota.setEnabled(true);
        botaoIncluirNota.setEnabled(true);
        botaoEditarNota.setEnabled(false);
        botaoExcluirNota.setEnabled(false);
        botaoGravarNota.setEnabled(false);
        botaoCancelarNota.setEnabled(false);
        botaoGerarArquivo.setEnabled(false);
        //PRODUTOS E SERVICOS---------------------------------------------------
        origem.setEnabled(false);
        codOp.setEditable(false);
        pesquisarOrigem.setEnabled(false);
        descricao.setEditable(false);
        qtdEntregue.setEditable(false);
        qtdSerEntregue.setEnabled(false);
        qtdSerEntregue.setValue(0);
        valorUnitario.setEditable(false);
        valorTotalEntregue.setEditable(false);
        valorServicos.setEnabled(false);
        valorFrete.setEnabled(false);
        faturarFrete.setEnabled(false);
        faturarServicos.setEnabled(false);
        valorServicos.setValue(0d);
        valorFrete.setValue(0d);
        faturarFrete.setSelected(false);
        faturarServicos.setSelected(false);
        qtdSolicitada.setEditable(false);
        vlrTotalNota.setEditable(false);
        qtdSolicitada.setValue(0);
        vlrTotalNota.setValue(0);
        //DADOS DA NOTA---------------------------------------------------------
        serieNota.setEnabled(false);
        numeroNota.setEditable(false);
        dataEntrega.setEnabled(false);
        descricaoNota.setEnabled(false);
        codigoCliente.setEditable(false);
        nomeCliente.setEditable(false);
        cnpjCpf.setEditable(false);
        nomeContatoCliente.setEditable(false);
        telefoneCliente.setEditable(false);
        telefoneCliente2.setEditable(false);
        logadouroCliente.setEditable(false);
        tipoEndereco.setEditable(false);
        bairroCliente.setEditable(false);
        cidadeCliente.setEditable(false);
        ufCliente.setEditable(false);
        complementoCliente.setEditable(false);
        cepCliente.setEditable(false);
        emailCliente.setEditable(false);
        //TRANSPORTE------------------------------------------------------------
        modalidadeFrete.setEnabled(false);
        nomeTransportador.setEditable(false);
        alturaProduto.setEditable(false);
        larguraProduto.setEditable(false);
        espessuraProduto.setEditable(false);
        pesoProduto.setEditable(false);
        alturaVolume.setEditable(false);
        larguraVolume.setEditable(false);
        pesoVolume.setEditable(false);
        tabelaVolumes.setEnabled(false);
        botaoAdicionarVolume.setEnabled(false);
        botaoRetirarTabela.setEnabled(false);
        //OBSERVACOES-----------------------------------------------------------
        areaObservacoes.setEditable(false);
        avisoAnoFin.setVisible(false);
    }

    public synchronized static void estadoPosPesquisar() {
        EDITAR = false;
        INCLUIR = false;
        //BOTOES PRINCIPAIS-----------------------------------------------------
        botaoPesquisarNota.setEnabled(false);
        botaoIncluirNota.setEnabled(false);

        if (TelaAutenticacao.getUsrLogado().getAcessoExpAdm() == 1) {
            botaoEditarNota.setEnabled(true);
            botaoExcluirNota.setEnabled(true);
        } else {
            botaoEditarNota.setEnabled(false);
            botaoExcluirNota.setEnabled(false);
            botaoEditarNota.setToolTipText(Controle.naoAdm);
            botaoExcluirNota.setToolTipText(Controle.naoAdm);
        }

        botaoGravarNota.setEnabled(false);
        botaoCancelarNota.setEnabled(true);
        botaoGerarArquivo.setEnabled(true);
        //PRODUTOS E SERVICOS---------------------------------------------------
        origem.setEnabled(false);
        codOp.setEditable(false);
        pesquisarOrigem.setEnabled(false);
        descricao.setEditable(false);
        qtdEntregue.setEditable(false);
        qtdSerEntregue.setEnabled(false);
        valorUnitario.setEditable(false);
        valorTotalEntregue.setEditable(false);
        verificaFaturamento();
        valorServicos.setEnabled(false);
        valorFrete.setEnabled(false);
        faturarFrete.setEnabled(false);
        faturarServicos.setEnabled(false);
        qtdSolicitada.setEditable(false);
        vlrTotalNota.setEditable(false);
        //DADOS DA NOTA---------------------------------------------------------
        serieNota.setEnabled(false);
        numeroNota.setEditable(false);
        dataEntrega.setEnabled(false);
        descricaoNota.setEnabled(false);
        codigoCliente.setEditable(false);
        nomeCliente.setEditable(false);
        cnpjCpf.setEditable(false);
        nomeContatoCliente.setEditable(false);
        telefoneCliente.setEditable(false);
        telefoneCliente2.setEditable(false);
        logadouroCliente.setEditable(false);
        tipoEndereco.setEditable(false);
        bairroCliente.setEditable(false);
        cidadeCliente.setEditable(false);
        ufCliente.setEditable(false);
        complementoCliente.setEditable(false);
        cepCliente.setEditable(false);
        emailCliente.setEditable(false);
        //TRANSPORTE------------------------------------------------------------
        modalidadeFrete.setEnabled(false);
        nomeTransportador.setEditable(false);
        alturaProduto.setEditable(false);
        larguraProduto.setEditable(false);
        espessuraProduto.setEditable(false);
        pesoProduto.setEditable(false);
        alturaVolume.setEditable(false);
        larguraVolume.setEditable(false);
        pesoVolume.setEditable(false);
        tabelaVolumes.setEnabled(false);
        botaoRetirarTabela.setEnabled(false);
        botaoAdicionarVolume.setEnabled(false);
        botaoRetirarTabela.setEnabled(false);
        //OBSERVACOES-----------------------------------------------------------
        areaObservacoes.setEditable(false);
        avisoAnoFin.setVisible(false);
    }

    public void estadoEditar() {
        EDITAR = true;
        INCLUIR = false;
        //BOTOES PRINCIPAIS-----------------------------------------------------
        botaoPesquisarNota.setEnabled(false);
        botaoIncluirNota.setEnabled(false);
        botaoEditarNota.setEnabled(false);
        botaoExcluirNota.setEnabled(true);
        botaoGravarNota.setEnabled(true);
        botaoCancelarNota.setEnabled(true);
        botaoGerarArquivo.setEnabled(false);
        //PRODUTOS E SERVICOS---------------------------------------------------
        origem.setEnabled(true);
        codOp.setEditable(false);
        pesquisarOrigem.setEnabled(true);
        descricao.setEditable(false);
        qtdEntregue.setEditable(false);
        qtdSerEntregue.setEnabled(true);
        valorUnitario.setEditable(false);
        valorTotalEntregue.setEditable(false);
        qtdSolicitada.setEditable(false);
        vlrTotalNota.setEditable(false);
        verificaFaturamento();
        //DADOS DA NOTA---------------------------------------------------------
        serieNota.setEnabled(false);
        numeroNota.setEditable(false);
        if (TelaAutenticacao.getUsrLogado().getTipo().equals("ADMINISTRADOR")) {
            dataEntrega.setEnabled(true);
        }
        descricaoNota.setEnabled(true);
        codigoCliente.setEditable(false);
        nomeCliente.setEditable(false);
        cnpjCpf.setEditable(false);
        nomeContatoCliente.setEditable(false);
        telefoneCliente.setEditable(false);
        telefoneCliente2.setEditable(false);
        logadouroCliente.setEditable(false);
        tipoEndereco.setEditable(false);
        bairroCliente.setEditable(false);
        cidadeCliente.setEditable(false);
        ufCliente.setEditable(false);
        complementoCliente.setEditable(false);
        cepCliente.setEditable(false);
        emailCliente.setEditable(false);
        //TRANSPORTE------------------------------------------------------------
        modalidadeFrete.setEnabled(true);
        nomeTransportador.setEditable(true);
        alturaProduto.setEditable(false);
        larguraProduto.setEditable(false);
        espessuraProduto.setEditable(true);
        pesoProduto.setEditable(true);
        alturaVolume.setEditable(true);
        larguraVolume.setEditable(true);
        pesoVolume.setEditable(true);
        tabelaVolumes.setEnabled(true);
        botaoAdicionarVolume.setEnabled(true);
        botaoRetirarTabela.setEnabled(false);
        //OBSERVACOES-----------------------------------------------------------
        areaObservacoes.setEditable(true);
        //CARREGA VALOR ENTREGUE------------------------------------------------
        qtdSerEntregue.setModel(new SpinnerNumberModel((int) qtdEntregue.getValue(),
                0,
                (int) qtdSolicitada.getValue(),
                1));
        qtdEntregue.setValue(0);
        avisoAnoFin.setVisible(false);
    }

    public void estadoIncluir() {
        EDITAR = false;
        INCLUIR = true;
        //BOTOES PRINCIPAIS-----------------------------------------------------
        botaoPesquisarNota.setEnabled(false);
        botaoIncluirNota.setEnabled(false);
        botaoEditarNota.setEnabled(false);
        botaoExcluirNota.setEnabled(false);
        botaoGravarNota.setEnabled(true);
        botaoCancelarNota.setEnabled(true);
        botaoGerarArquivo.setEnabled(false);
        //PRODUTOS E SERVICOS---------------------------------------------------
        origem.setEnabled(true);
        origem.setSelectedIndex(0);
        codOp.setEditable(false);
        codOp.setText("");
        pesquisarOrigem.setEnabled(true);
        descricao.setEditable(false);
        descricao.setText("");
        qtdEntregue.setEditable(false);
        qtdEntregue.setValue(0);
        qtdSerEntregue.setEnabled(true);
        qtdSerEntregue.setValue(0);
        valorUnitario.setEditable(false);
        valorUnitario.setValue(0);
        valorTotalEntregue.setEditable(false);
        valorTotalEntregue.setValue(0);
        valorServicos.setEnabled(false);
        valorFrete.setEnabled(false);
        faturarFrete.setEnabled(false);
        faturarServicos.setEnabled(false);
        valorServicos.setValue(0d);
        valorFrete.setValue(0d);
        faturarFrete.setSelected(false);
        faturarServicos.setSelected(false);
        qtdSolicitada.setEditable(false);
        vlrTotalNota.setEditable(false);
        qtdSolicitada.setValue(0);
        vlrTotalNota.setValue(0);
        //DADOS DA NOTA---------------------------------------------------------
        serieNota.setEnabled(true);
        numeroNota.setEditable(false);
        numeroNota.setText("");
        if (TelaAutenticacao.getUsrLogado().getTipo().equals("ADMINISTRADOR")) {
            dataEntrega.setEnabled(true);
        }
        dataEntrega.setDate(new Date());
        descricaoNota.setEnabled(true);
        descricaoNota.setSelectedIndex(0);
        codigoCliente.setEditable(false);
        codigoCliente.setValue(0);
        nomeCliente.setEditable(false);
        nomeCliente.setText("");
        cnpjCpf.setEditable(false);
        cnpjCpf.setText("");
        nomeContatoCliente.setEditable(false);
        nomeContatoCliente.setText(null);
        telefoneCliente.setEditable(false);
        telefoneCliente.setText(null);
        telefoneCliente2.setEditable(false);
        telefoneCliente2.setText(null);
        logadouroCliente.setEditable(false);
        logadouroCliente.setText(null);
        tipoEndereco.setEditable(false);
        tipoEndereco.setText(null);
        bairroCliente.setEditable(false);
        bairroCliente.setText(null);
        cidadeCliente.setEditable(false);
        cidadeCliente.setText(null);
        ufCliente.setEditable(false);
        ufCliente.setText(null);
        complementoCliente.setEditable(false);
        complementoCliente.setText(null);
        cepCliente.setEditable(false);
        cepCliente.setText(null);
        emailCliente.setEditable(false);
        emailCliente.setText(null);
        //TRANSPORTE------------------------------------------------------------
        modalidadeFrete.setEnabled(true);
        modalidadeFrete.setSelectedIndex(0);
        nomeTransportador.setEditable(true);
        nomeTransportador.setText(null);
        alturaProduto.setEditable(false);
        alturaProduto.setValue(0);
        larguraProduto.setEditable(false);
        larguraProduto.setValue(0);
        espessuraProduto.setEditable(true);
        espessuraProduto.setValue(0);
        pesoProduto.setEditable(true);
        pesoProduto.setValue(0);
        alturaVolume.setEditable(true);
        alturaVolume.setValue(0);
        larguraVolume.setEditable(true);
        larguraVolume.setValue(0);
        pesoVolume.setEditable(true);
        pesoVolume.setValue(0);
        tabelaVolumes.setEnabled(true);
        botaoAdicionarVolume.setEnabled(true);
        botaoRetirarTabela.setEnabled(false);
        //OBSERVACOES-----------------------------------------------------------
        areaObservacoes.setEditable(true);
        areaObservacoes.setText("");
        avisoAnoFin.setVisible(false);
    }

    public void estadoGravar() {
        EDITAR = false;
        INCLUIR = false;
        //BOTOES PRINCIPAIS-----------------------------------------------------
        botaoPesquisarNota.setEnabled(false);
        botaoIncluirNota.setEnabled(false);
        botaoEditarNota.setEnabled(true);
        botaoExcluirNota.setEnabled(false);
        botaoGravarNota.setEnabled(false);
        botaoCancelarNota.setEnabled(true);
        botaoGerarArquivo.setEnabled(true);
        //PRODUTOS E SERVICOS---------------------------------------------------
        origem.setEnabled(false);
        codOp.setEditable(false);
        pesquisarOrigem.setEnabled(false);
        descricao.setEditable(false);
        qtdEntregue.setEditable(false);
        qtdSerEntregue.setEnabled(false);
        valorUnitario.setEditable(false);
        valorTotalEntregue.setEditable(false);
        qtdSolicitada.setEditable(false);
        vlrTotalNota.setEditable(false);
        //DADOS DA NOTA---------------------------------------------------------
        serieNota.setEnabled(false);
        numeroNota.setEditable(false);
        dataEntrega.setEnabled(false);
        descricaoNota.setEnabled(false);
        codigoCliente.setEditable(false);
        nomeCliente.setEditable(false);
        cnpjCpf.setEditable(false);
        nomeContatoCliente.setEditable(false);
        telefoneCliente.setEditable(false);
        telefoneCliente2.setEditable(false);
        logadouroCliente.setEditable(false);
        tipoEndereco.setEditable(false);
        bairroCliente.setEditable(false);
        cidadeCliente.setEditable(false);
        ufCliente.setEditable(false);
        complementoCliente.setEditable(false);
        cepCliente.setEditable(false);
        emailCliente.setEditable(false);
        valorServicos.setEnabled(false);
        valorFrete.setEnabled(false);
        faturarFrete.setEnabled(false);
        faturarServicos.setEnabled(false);
        valorServicos.setValue(0d);
        valorFrete.setValue(0d);
        faturarFrete.setSelected(false);
        faturarServicos.setSelected(false);
        //TRANSPORTE------------------------------------------------------------
        modalidadeFrete.setEnabled(false);
        nomeTransportador.setEditable(false);
        alturaProduto.setEditable(false);
        larguraProduto.setEditable(false);
        espessuraProduto.setEditable(false);
        pesoProduto.setEditable(false);
        alturaVolume.setEditable(false);
        larguraVolume.setEditable(false);
        pesoVolume.setEditable(false);
        tabelaVolumes.setEnabled(false);
        botaoRetirarTabela.setEnabled(false);
        botaoAdicionarVolume.setEnabled(false);
        botaoRetirarTabela.setEnabled(false);
        //OBSERVACOES-----------------------------------------------------------
        areaObservacoes.setEditable(false);
        //RETORNA PARA A TAB PRINCIPAL------------------------------------------
        tabsNV.setSelectedIndex(0);
        //MOVE A QUANTIDADE A SER ENTREGUE PARA A QUANTIDADE ENTREGUE-----------
        qtdEntregue.setValue((int) qtdEntregue.getValue() + (int) qtdSerEntregue.getValue());
        qtdSerEntregue.setModel(new SpinnerNumberModel(0,
                0,
                (int) qtdSolicitada.getValue(),
                1));
        avisoAnoFin.setVisible(false);
    }

    public void estadoPosExcluir() {
        //BOTOES PRINCIPAIS-----------------------------------------------------
        botaoPesquisarNota.setEnabled(true);
        botaoIncluirNota.setEnabled(true);
        botaoEditarNota.setEnabled(false);
        botaoExcluirNota.setEnabled(false);
        botaoGravarNota.setEnabled(false);
        botaoCancelarNota.setEnabled(false);
        botaoGerarArquivo.setEnabled(false);
        //PRODUTOS E SERVICOS---------------------------------------------------
        origem.setEnabled(false);
        codOp.setEditable(false);
        pesquisarOrigem.setEnabled(false);
        descricao.setEditable(false);
        qtdEntregue.setEditable(false);
        qtdSerEntregue.setEnabled(false);
        valorUnitario.setEditable(false);
        valorTotalEntregue.setEditable(false);
        valorServicos.setEnabled(false);
        valorFrete.setEnabled(false);
        faturarFrete.setEnabled(false);
        faturarServicos.setEnabled(false);
        valorServicos.setValue(0d);
        valorFrete.setValue(0d);
        faturarFrete.setSelected(false);
        faturarServicos.setSelected(false);
        qtdSolicitada.setEditable(false);
        vlrTotalNota.setEditable(false);
        codOrc.setText("");
        //DADOS DA NOTA---------------------------------------------------------
        serieNota.setEnabled(false);
        numeroNota.setEditable(false);
        dataEntrega.setEnabled(false);
        descricaoNota.setEnabled(false);
        codigoCliente.setEditable(false);
        nomeCliente.setEditable(false);
        cnpjCpf.setEditable(false);
        nomeContatoCliente.setEditable(false);
        telefoneCliente.setEditable(false);
        telefoneCliente2.setEditable(false);
        logadouroCliente.setEditable(false);
        tipoEndereco.setEditable(false);
        bairroCliente.setEditable(false);
        cidadeCliente.setEditable(false);
        ufCliente.setEditable(false);
        complementoCliente.setEditable(false);
        cepCliente.setEditable(false);
        emailCliente.setEditable(false);
        //TRANSPORTE------------------------------------------------------------
        modalidadeFrete.setEnabled(false);
        nomeTransportador.setEditable(false);
        alturaProduto.setEditable(false);
        larguraProduto.setEditable(false);
        espessuraProduto.setEditable(false);
        pesoProduto.setEditable(false);
        alturaVolume.setEditable(false);
        larguraVolume.setEditable(false);
        pesoVolume.setEditable(false);
        tabelaVolumes.setEnabled(false);
        botaoAdicionarVolume.setEnabled(false);
        botaoRetirarTabela.setEnabled(false);
        //OBSERVACOES-----------------------------------------------------------
        areaObservacoes.setEditable(false);
        //LIMPA OS CAMPOS-------------------------------------------------------
        codOp.setText("");
        descricao.setText("");
        qtdEntregue.setText("");
        qtdSerEntregue.setValue(0);
        valorUnitario.setText("");
        valorTotalEntregue.setText("");
        numeroNota.setText("");
        dataEntrega.setDate(null);
        descricaoNota.setSelectedIndex(0);
        codigoCliente.setText("");
        tipoCliente.setText("");
        nomeCliente.setText("");
        cnpjCpf.setText("");
        nomeContatoCliente.setText("");
        telefoneCliente.setText("");
        telefoneCliente2.setText("");
        logadouroCliente.setText("");
        tipoEndereco.setText("");
        bairroCliente.setText("");
        cidadeCliente.setText("");
        ufCliente.setText("");
        complementoCliente.setText("");
        cepCliente.setText("");
        emailCliente.setText("");
        modalidadeFrete.setSelectedIndex(0);
        nomeTransportador.setText("");
        alturaProduto.setText("");
        larguraProduto.setText("");
        espessuraProduto.setText("");
        pesoProduto.setText("");
        alturaVolume.setText("");
        larguraVolume.setText("");
        pesoVolume.setText("");
        areaObservacoes.setText("");
        qtdSolicitada.setValue(0);
        vlrTotalNota.setValue(0);
        DefaultTableModel modeloVolumes = (DefaultTableModel) tabelaVolumes.getModel();
        modeloVolumes.setNumRows(0);
        avisoAnoFin.setVisible(false);
    }
    //--------------------------------------------------------------------------

    //FUNÇÕES DE FORMATAR DADOS-------------------------------------------------
    public String retornaTelefoneFormatado(String telefone) {
        String formatar = telefone;
        formatar = formatar.replace("(", "");
        formatar = formatar.replace(")", "");
        formatar = formatar.replace(" ", "");
        formatar = formatar.replace("-", "");
        MaskFormatter formatoTelefone = null;
        if (formatar.length() == 10) {
            try {
                formatoTelefone = new MaskFormatter("(##) ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
            } catch (ParseException ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                return null;
            }
        }
        if (formatar.length() == 11) {
            try {
                formatoTelefone = new MaskFormatter("(##) # ####-####");
                formatoTelefone.setValueContainsLiteralCharacters(false);
                formatar = formatoTelefone.valueToString(formatar);
            } catch (ParseException ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                return null;
            }
        }
        return formatar;
    }

    //--------------------------------------------------------------------------
    public PdfPCell createImageCell() throws DocumentException, IOException {

        Image imagem = Image.getInstance(getClass().getResource("/ui/orcamentos/operacoes/cabecalhoPropostaPng.png"));

        PdfPCell cell = new PdfPCell(imagem, true);
        cell.setPadding(5);

        return cell;

    }

    //FUNÇÕES PARA CALCULAR VALOR TOTAL
    private void calculaVlrTotal() {
        try {
            double vlrTotal = 0d;
            if (!listaCancelamento.contains(OrdemProducaoDAO.retornaAnoOp(Integer.valueOf(codOp.getText())))) {
                vlrTotal += (int) qtdSerEntregue.getValue()
                        * Double.valueOf(valorUnitario.getText().replace(",", ".").replace("R$ ", ""));
                vlrTotal += faturarServicos.isSelected() ? Double.valueOf(valorServicos.getText().replace(",", ".").replace("R$ ", "")) : 0d;
                vlrTotal += faturarFrete.isSelected() ? Double.valueOf(valorFrete.getText().replace(",", ".").replace("R$ ", "")) : 0d;
                valorTotalEntregue.setValue(vlrTotal);
            } else {
                avisoAnoFin.setVisible(true);
            }
            if (EDITAR | INCLUIR) {
                vlrTotalNota.setValue(vlrTotal);
            }
        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }
    }

    /**
     * Verifica o faturamento de acordo com o orçamento
     */
    public static void verificaFaturamento() {
        switch (STATUS_FATURAMENTO) {
            case 0:
            case 1:
                if ((double) valorFrete.getValue() == 0d
                        | (int) qtdSerEntregue.getValue()
                        + (int) qtdEntregue.getValue()
                        == (int) qtdSolicitada.getValue()) {
                    faturarFrete.setEnabled(false);
                    faturarFrete.setSelected(true);
                } else {
                    faturarFrete.setEnabled(true);
                    faturarFrete.setSelected(false);
                }

                if ((double) valorServicos.getValue() == 0d
                        | (int) qtdSerEntregue.getValue()
                        + (int) qtdEntregue.getValue()
                        == (int) qtdSolicitada.getValue()) {
                    faturarServicos.setEnabled(false);
                    faturarServicos.setSelected(true);
                } else {
                    faturarServicos.setEnabled(true);
                    faturarServicos.setSelected(false);
                }
                break;
            case 2:
                if ((double) valorServicos.getValue() == 0d
                        | (int) qtdSerEntregue.getValue()
                        + (int) qtdEntregue.getValue()
                        == (int) qtdSolicitada.getValue()) {
                    faturarServicos.setEnabled(false);
                    faturarServicos.setSelected(true);
                } else {
                    faturarServicos.setEnabled(true);
                    faturarServicos.setSelected(false);
                }

                faturarFrete.setEnabled(false);
                faturarFrete.setSelected(false);
                break;
            case 3:
                if ((double) valorFrete.getValue() == 0d
                        | (int) qtdSerEntregue.getValue()
                        + (int) qtdEntregue.getValue()
                        == (int) qtdSolicitada.getValue()) {
                    faturarFrete.setEnabled(false);
                    faturarFrete.setSelected(true);
                } else {
                    faturarFrete.setEnabled(true);
                    faturarFrete.setSelected(false);
                }

                faturarServicos.setEnabled(false);
                faturarServicos.setSelected(false);
                break;
            case 4:
                faturarFrete.setEnabled(false);
                faturarFrete.setSelected(false);

                faturarServicos.setEnabled(false);
                faturarServicos.setSelected(false);
                break;
        }
    }

    private void gravarNota() {
        try {
            loading.setVisible(true);
            loading.setText("GRAVANDO...");

            /**
             * Verificação de casos de erro
             */
            if (Integer.valueOf(qtdSerEntregue.getValue().toString())
                    > Integer.valueOf(qtdSolicitada.getValue().toString())
                    - Integer.valueOf(qtdEntregue.getValue().toString())) {
                JOptionPane.showMessageDialog(null, "A QUANTIDADE ENTREGUE NÃO PODE SER MAIOR\nQUE A QUANTIDADE A SER ENTREGUE!", "ERRO", JOptionPane.ERROR_MESSAGE);
                loading.setVisible(false);
                return;
            }
            if (Integer.valueOf(qtdSerEntregue.getValue().toString()) == 0) {
                JOptionPane.showMessageDialog(null, "A QUANTIDADE ENTREGUE NÃO PODE SER IGUAL À ZERO!", "ERRO", JOptionPane.ERROR_MESSAGE);
                loading.setVisible(false);
                return;
            }
            if (dataEntrega.getDate() == null) {
                JOptionPane.showMessageDialog(null, "O CAMPO DATA ENTREGA NÃO PODE SER NULO", "ERRO", JOptionPane.ERROR_MESSAGE);
                loading.setVisible(false);
                return;
            }
            if (modalidadeFrete.getSelectedItem().toString().equals("EMC - ENTREGUE EM MÃOS AO CLIENTE") && nomeTransportador.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "PREENCHA O CAMPO NOME TRANSPORTADOR", "ERRO", JOptionPane.ERROR_MESSAGE);
                loading.setVisible(false);
                return;
            }
            if (espessuraProduto.getText().equals("") || Float.valueOf(espessuraProduto.getValue().toString()) == 0.00) {
                JOptionPane.showMessageDialog(null, "PREENCHA O CAMPO ESPESSURA PRODUTO", "ERRO", JOptionPane.ERROR_MESSAGE);
                loading.setVisible(false);
                return;
            }
            if (pesoProduto.getText().equals("") || Float.valueOf(pesoProduto.getValue().toString()) == 0.00) {
                JOptionPane.showMessageDialog(null, "PREENCHA O CAMPO PESO PRODUTO", "ERRO", JOptionPane.ERROR_MESSAGE);
                loading.setVisible(false);
                return;
            }
            if (tabelaVolumes.getRowCount() == 0) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(null, "NENHUM VOLUME FOI ADICIONADO.\nDESEJA CONTINUAR?", "NENHUM VOLUME ADICIONADO", dialogButton);
                if (dialogResult != 0) {
                    loading.setVisible(false);
                    return;
                }
            }

            /**
             * Excluir notas
             */
            if (EDITAR) {
                ClienteDAO.corrigeCredito((int) codigoCliente.getValue(),
                        tipoCliente.getText().contains("FÍSICA") ? (byte) 1 : (byte) 2,
                        valorAntigo, (byte) 1);
                STATUS_FATURAMENTO = 0;
                NotaDAO.excluiVolumes(FAT.getCod());
                NotaDAO.excluiTransportes(FAT.getCod());
                NotaDAO.removeFat(FAT.getCod());
            } else {
                FAT.setCod(NotaDAO.retornaUltFat() + 1);
            }

            /**
             * Retorna o código do transporte
             */
            CODIGO_TRANSPORTE = NotaDAO.retornaUltimoTransporte() + 1;

            /**
             * Gravar nota
             */
            if (EDITAR) {
                FAT.setEmissor(TelaAutenticacao.getUsrLogado().getCodigo());
                FAT.setQtdEntregue(Integer.valueOf(qtdSerEntregue.getValue().toString()));
                FAT.setVlrFat(Double.valueOf(vlrTotalNota.getValue().toString()));
                FAT.setDtFat(dataEntrega.getDate());
                FAT.setObservacoes(areaObservacoes.getText().equals("") ? null : areaObservacoes.getText());
                FAT.setFreteFat(faturarFrete.isSelected() ? (byte) 1 : (byte) 0);
                FAT.setServicosFat(faturarServicos.isSelected() ? (byte) 1 : (byte) 0);
            } else {
                FAT.setCodOrc(Integer.valueOf(codOrc.getText()));
                FAT.setCodOp(Integer.valueOf(codOp.getText()));
                FAT.setEmissor(TelaAutenticacao.getUsrLogado().getCodigo());
                FAT.setQtdEntregue(Integer.valueOf(qtdSerEntregue.getValue().toString()));
                FAT.setVlrFat(Double.valueOf(valorTotalEntregue.getValue().toString()));
                FAT.setDtFat(dataEntrega.getDate());
                FAT.setObservacoes(areaObservacoes.getText().equals("") ? null : areaObservacoes.getText());
                FAT.setFreteFat(faturarFrete.isSelected() ? (byte) 1 : (byte) 0);
                FAT.setServicosFat(faturarServicos.isSelected() ? (byte) 1 : (byte) 0);
            }

            /**
             * Grava Transportes
             */
            TransporteBEAN transportesBEAN = new TransporteBEAN();
            transportesBEAN.setCod(CODIGO_TRANSPORTE);
            transportesBEAN.setCodNota(FAT.getCod());
            transportesBEAN.setModalidadeFrete(modalidadeFrete.getSelectedItem().toString().substring(0, 3));
            transportesBEAN.setNomeTransportador(nomeTransportador.getText().toUpperCase());
            transportesBEAN.setEspessuraProduto(Float.valueOf(espessuraProduto.getValue().toString()));
            transportesBEAN.setPesoProduto(Float.valueOf(pesoProduto.getValue().toString()));

            try {
                NotaDAO.gravaTransportes(transportesBEAN);
            } catch (Exception ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                return;
            }

            /**
             * Grava volumes
             */
            if (tabelaVolumes.getRowCount() != 0) {
                for (int i = 0; i < tabelaVolumes.getRowCount(); i++) {
                    VolumeBEAN beanVolumes = new VolumeBEAN();
                    int codVolume = NotaDAO.retornaUltimoVolume() + 1;
                    beanVolumes.setCod(codVolume);
                    beanVolumes.setCodTransporte(CODIGO_TRANSPORTE);
                    beanVolumes.setNumeroVolume(Integer.valueOf(tabelaVolumes.getValueAt(i, 0).toString()));
                    beanVolumes.setAlturaVolume(Float.valueOf(tabelaVolumes.getValueAt(i, 1).toString()));
                    beanVolumes.setLarguraVolume(Float.valueOf(tabelaVolumes.getValueAt(i, 2).toString()));
                    beanVolumes.setPesoVolume(Float.valueOf(tabelaVolumes.getValueAt(i, 3).toString()));

                    try {
                        NotaDAO.gravaVolumes(beanVolumes, codVolume);
                    } catch (Exception ex) {
                        EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                        EnvioExcecao.envio();
                        loading.setVisible(false);
                        return;
                    }
                }
            }

            /**
             * Altera o status da ordem de produção
             */
            if ((int) qtdSerEntregue.getValue()
                    < (int) qtdSolicitada.getValue() - (int) qtdEntregue.getValue()) {
                OrdemProducaoDAO.alteraStatus("ENTREGUE PARCIALMENTE", FAT.getCodOp());
            } else if ((int) qtdSerEntregue.getValue()
                    == (int) qtdSolicitada.getValue() - (int) qtdEntregue.getValue()) {
                OrdemProducaoDAO.alteraStatus("ENTREGUE", FAT.getCodOp());
            }

            /**
             * Reseta as variáveis
             */
            EDITAR = false;
            INCLUIR = false;

            /**
             * Carrega as informações da OP
             */
            OrdemProducao op = OrdemProducaoDAO.retornaDadosOp(FAT.getCodOp());

            /**
             * Verifica status faturamento
             */
            if (STATUS_FATURAMENTO == 0) {
                ClienteDAO.corrigeCredito(op.getCodCliente(),
                        op.getTipoPessoa(),
                        FAT.getVlrFat(),
                        (byte) 2);
                if (!OrdemProducaoDAO.verificaOpOrcEntregues(FAT.getCodOrc(), FAT.getCodOp())) {
                    STATUS_FATURAMENTO = 1;
                    if ((int) qtdSerEntregue.getValue()
                            < (int) qtdSolicitada.getValue() - (int) qtdEntregue.getValue()) {
                        OrcamentoDAO.alteraStatus(FAT.getCodOrc(), (byte) 7);
                    } else if ((int) qtdSerEntregue.getValue()
                            == (int) qtdSolicitada.getValue() - (int) qtdEntregue.getValue()) {
                        OrcamentoDAO.alteraStatus(FAT.getCodOrc(), (byte) 8);
                    }
                } else {
                    FAT.setFreteFat((byte) 0);
                    FAT.setServicosFat((byte) 0);
                    ClienteDAO.corrigeCredito(op.getCodCliente(),
                            op.getTipoPessoa(),
                            Double.valueOf(valorServicos.getValue().toString())
                            + Double.valueOf(valorFrete.getValue().toString()),
                            (byte) 2);
                    OrcamentoDAO.alteraStatus(FAT.getCodOrc(), (byte) 7);
                }
            }

            /**
             * Atualiza o status do faturamento
             */
            switch (STATUS_FATURAMENTO) {
                case 1:
                    if (faturarFrete.isSelected() & faturarServicos.isSelected()) {
                        OrcamentoDAO.atualizaStatusFaturamento(
                                FAT.getCodOrc(),
                                (byte) 4);
                    } else if (faturarFrete.isSelected() & !faturarServicos.isSelected()) {
                        OrcamentoDAO.atualizaStatusFaturamento(
                                FAT.getCodOrc(),
                                (byte) 2);
                    } else if (!faturarFrete.isSelected() & faturarServicos.isSelected()) {
                        OrcamentoDAO.atualizaStatusFaturamento(
                                FAT.getCodOrc(),
                                (byte) 3);
                    } else {
                        OrcamentoDAO.atualizaStatusFaturamento(
                                FAT.getCodOrc(),
                                (byte) 1);
                    }
                    break;
                case 2:
                    if (faturarServicos.isSelected()) {
                        OrcamentoDAO.atualizaStatusFaturamento(
                                FAT.getCodOrc(),
                                (byte) 4);
                    }
                    break;
                case 3:
                    if (faturarFrete.isSelected()) {
                        OrcamentoDAO.atualizaStatusFaturamento(
                                FAT.getCodOrc(),
                                (byte) 4);
                    }
                    break;
            }

            try {
                if (EDITAR) {
                    NotaDAO.atualizaFat(FAT);
                } else {
                    NotaDAO.insereFat(FAT);
                }
            } catch (SQLException ex) {
                EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
                EnvioExcecao.envio();
                loading.setVisible(false);
                return;
            }

            STATUS_FATURAMENTO = 0;
            //RESETA OS ESTADOS DA GUI------------------------------------------
            estadoGravar();
            numeroNota.setValue(CODIGO_FAT);
            COD_PRODUTO = 0;
            COD_CONTATO = 0;
            COD_ENDERECO = 0;

            //EXIBE MENSAGEM AO USUÁRIO---------------------------------
            JOptionPane.showMessageDialog(null, "NOTA GRAVADA COM SUCESSO.");

        } catch (SQLException ex) {
            EnvioExcecao envioExcecao = new EnvioExcecao(Controle.getDefaultGj(), ex);
            EnvioExcecao.envio();
        }

        loading.setVisible(false);
    }
}
